/* Generated by Cython 0.29.16 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "CYTHON_TRACE_NOGIL",
                "1"
            ],
            [
                "CYTHON_CLINE_IN_TRACEBACK",
                "0"
            ]
        ],
        "depends": [
            "libs\\libxpdf\\include\\Annot.h",
            "libs\\libxpdf\\include\\Array.h",
            "libs\\libxpdf\\include\\CMap.h",
            "libs\\libxpdf\\include\\Catalog.h",
            "libs\\libxpdf\\include\\CharCodeToUnicode.h",
            "libs\\libxpdf\\include\\CharTypes.h",
            "libs\\libxpdf\\include\\Dict.h",
            "libs\\libxpdf\\include\\Error.h",
            "libs\\libxpdf\\include\\ErrorCodes.h",
            "libs\\libxpdf\\include\\FoFiBase.h",
            "libs\\libxpdf\\include\\FoFiTrueType.h",
            "libs\\libxpdf\\include\\FoFiType1C.h",
            "libs\\libxpdf\\include\\Form.h",
            "libs\\libxpdf\\include\\Function.h",
            "libs\\libxpdf\\include\\GList.h",
            "libs\\libxpdf\\include\\GString.h",
            "libs\\libxpdf\\include\\Gfx.h",
            "libs\\libxpdf\\include\\GfxFont.h",
            "libs\\libxpdf\\include\\GfxState.h",
            "libs\\libxpdf\\include\\GlobalParams.h",
            "libs\\libxpdf\\include\\Link.h",
            "libs\\libxpdf\\include\\Object.h",
            "libs\\libxpdf\\include\\OptionalContent.h",
            "libs\\libxpdf\\include\\Outline.h",
            "libs\\libxpdf\\include\\OutputDev.h",
            "libs\\libxpdf\\include\\PDFCore.h",
            "libs\\libxpdf\\include\\PDFDoc.h",
            "libs\\libxpdf\\include\\Page.h",
            "libs\\libxpdf\\include\\Stream.h",
            "libs\\libxpdf\\include\\TextOutputDev.h",
            "libs\\libxpdf\\include\\TextString.h",
            "libs\\libxpdf\\include\\UnicodeMap.h",
            "libs\\libxpdf\\include\\UnicodeRemapping.h",
            "libs\\libxpdf\\include\\XRef.h",
            "libs\\libxpdf\\include\\gfile.h",
            "libs\\libxpdf\\include\\gtypes.h",
            "src\\pyxpdf\\document.pxi",
            "src\\pyxpdf\\globalconfig.pxi",
            "src\\pyxpdf\\helper.pxi",
            "src\\pyxpdf\\includes\\AcroForm.pxd",
            "src\\pyxpdf\\includes\\Annot.pxd",
            "src\\pyxpdf\\includes\\Array.pxd",
            "src\\pyxpdf\\includes\\CMap.pxd",
            "src\\pyxpdf\\includes\\Catalog.pxd",
            "src\\pyxpdf\\includes\\CharCodeToUnicode.pxd",
            "src\\pyxpdf\\includes\\CharTypes.pxd",
            "src\\pyxpdf\\includes\\Decrypt.pxd",
            "src\\pyxpdf\\includes\\Dict.pxd",
            "src\\pyxpdf\\includes\\DisplayState.pxd",
            "src\\pyxpdf\\includes\\FoFi.pxd",
            "src\\pyxpdf\\includes\\Form.pxd",
            "src\\pyxpdf\\includes\\Function.pxd",
            "src\\pyxpdf\\includes\\Gfx.pxd",
            "src\\pyxpdf\\includes\\GfxFont.pxd",
            "src\\pyxpdf\\includes\\GfxState.pxd",
            "src\\pyxpdf\\includes\\GlobalParams.pxd",
            "src\\pyxpdf\\includes\\HTMLGen.pxd",
            "src\\pyxpdf\\includes\\ImageOutputDev.pxd",
            "src\\pyxpdf\\includes\\Lexer.pxd",
            "src\\pyxpdf\\includes\\Link.pxd",
            "src\\pyxpdf\\includes\\Object.pxd",
            "src\\pyxpdf\\includes\\OptionalContent.pxd",
            "src\\pyxpdf\\includes\\Outline.pxd",
            "src\\pyxpdf\\includes\\OutputDev.pxd",
            "src\\pyxpdf\\includes\\PDFCore.pxd",
            "src\\pyxpdf\\includes\\PDFDoc.pxd",
            "src\\pyxpdf\\includes\\Page.pxd",
            "src\\pyxpdf\\includes\\Stream.pxd",
            "src\\pyxpdf\\includes\\TextOutputDev.pxd",
            "src\\pyxpdf\\includes\\TextString.pxd",
            "src\\pyxpdf\\includes\\UnicodeMap.pxd",
            "src\\pyxpdf\\includes\\UnicodeRemapping.pxd",
            "src\\pyxpdf\\includes\\XRef.pxd",
            "src\\pyxpdf\\includes\\__init__.pxd",
            "src\\pyxpdf\\includes\\defs.pxd",
            "src\\pyxpdf\\includes\\native.pxd",
            "src\\pyxpdf\\includes\\xpdf_error.pxd",
            "src\\pyxpdf\\includes\\xpdf_types.pxd",
            "src\\pyxpdf\\pdferror.pxi",
            "src\\pyxpdf\\textoutput.pxi"
        ],
        "include_dirs": [
            "libs\\libxpdf\\include",
            "src",
            "src\\pyxpdf\\includes"
        ],
        "language": "c++",
        "libraries": [
            "xpdf",
            "shell32",
            "advapi32"
        ],
        "library_dirs": [
            "libs\\libxpdf\\lib"
        ],
        "name": "pyxpdf.xpdf",
        "sources": [
            "src\\pyxpdf\\xpdf.pyx"
        ]
    },
    "module_name": "pyxpdf.xpdf"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_16"
#define CYTHON_HEX_VERSION 0x001D10F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pyxpdf__xpdf
#define __PYX_HAVE_API__pyxpdf__xpdf
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <string.h>
#include <stdio.h>
#include "pythread.h"
#include "stdarg.h"
#include "gtypes.h"
#include "gfile.h"
#include "GString.h"
#include "GList.h"
#include "CharTypes.h"
#include "Object.h"
#include "Stream.h"
#include "XRef.h"
#include "Array.h"
#include "Dict.h"
#include "Function.h"
#include "Link.h"
#include "TextString.h"
#include "Catalog.h"
#include "Form.h"
#include "PDFCore.h"
#include "Outline.h"
#include "OptionalContent.h"
#include "PDFDoc.h"
#include "Annot.h"
#include "CharCodeToUnicode.h"
#include "FoFiBase.h"
#include "FoFiTrueType.h"
#include "FoFiType1C.h"
#include "GfxFont.h"
#include "GfxState.h"
#include "Gfx.h"
#include "OutputDev.h"
#include "Page.h"
#include "ErrorCodes.h"
#include "Error.h"
#include <string>
#include <memory>
#include "UnicodeMap.h"
#include "UnicodeRemapping.h"
#include "CMap.h"
#include "GlobalParams.h"
#include "TextOutputDev.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "src\\pyxpdf\\helper.pxi",
  "src\\pyxpdf\\pdferror.pxi",
  "src\\pyxpdf\\xpdf.pyx",
  "src\\pyxpdf\\globalconfig.pxi",
  "stringsource",
  "src\\pyxpdf\\document.pxi",
  "src\\pyxpdf\\textoutput.pxi",
  "venv\\lib\\site-packages\\Cython\\Includes\\cpython\\type.pxd",
  "venv\\lib\\site-packages\\Cython\\Includes\\cpython\\bool.pxd",
  "venv\\lib\\site-packages\\Cython\\Includes\\cpython\\complex.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_6pyxpdf_4xpdf_PDFError;
struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig;
struct __pyx_obj_6pyxpdf_4xpdf_TextControl;
struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc;
struct __pyx_obj_6pyxpdf_4xpdf_XPage;

/* "pyxpdf/includes/xpdf_error.pxd":38
 * 
 * # Make sure to keep it consistent with setErrorCallback
 * ctypedef void (*ErrorCallback)(void *data, ErrorCategory category, int pos, char *msg)             # <<<<<<<<<<<<<<
 */
typedef void (*__pyx_t_6pyxpdf_8includes_10xpdf_error_ErrorCallback)(void *, ErrorCategory, int, char *);

/* "pyxpdf/includes/TextOutputDev.pxd":8
 * from pyxpdf.includes.GfxState cimport GfxState
 * 
 * ctypedef void (*TextOutputFunc)(void *stream, const char *text, int len)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "TextOutputDev.h" nogil:
 */
typedef void (*__pyx_t_6pyxpdf_8includes_13TextOutputDev_TextOutputFunc)(void *, char const *, int);
struct __pyx_opt_args_6pyxpdf_4xpdf_Dict_to_pydict;
struct __pyx_opt_args_6pyxpdf_4xpdf_pdftotext_raw;
struct __pyx_opt_args_6pyxpdf_4xpdf_5XPage_display_slice;
struct __pyx_opt_args_6pyxpdf_4xpdf_5XPage_display;

/* "src/pyxpdf/helper.pxi":68
 * 
 * 
 * cdef dict Dict_to_pydict(Dict* xdict, dict pydict = {}):             # <<<<<<<<<<<<<<
 *     cdef Object obj
 *     cdef const char* key
 */
struct __pyx_opt_args_6pyxpdf_4xpdf_Dict_to_pydict {
  int __pyx_n;
  PyObject *pydict;
};

/* "pyxpdf/xpdf.pyx":39
 *     (<string*>stream)[0] += string(text, length)
 * 
 * cpdef pdftotext_raw(pdf_file, int start = 0, int end = 0, layout="reading", ownerpass=None, userpass=None, cfg_file=""):             # <<<<<<<<<<<<<<
 *     cdef string ext_text
 *     cdef int err_code
 */
struct __pyx_opt_args_6pyxpdf_4xpdf_pdftotext_raw {
  int __pyx_n;
  int start;
  int end;
  PyObject *layout;
  PyObject *ownerpass;
  PyObject *userpass;
  PyObject *cfg_file;
};

/* "src/pyxpdf/document.pxi":174
 * 
 * 
 *     cdef display_slice(self, OutputDev* out, int x1, int y1, int hgt, int wdt,             # <<<<<<<<<<<<<<
 *                         double hDPI = 72, double vDPI = 72, int rotate = 0,
 *                         GBool use_media_box = gFalse, GBool crop = gTrue,
 */
struct __pyx_opt_args_6pyxpdf_4xpdf_5XPage_display_slice {
  int __pyx_n;
  double hDPI;
  double vDPI;
  int rotate;
  GBool use_media_box;
  GBool crop;
  GBool printing;
};

/* "src/pyxpdf/document.pxi":181
 *                                 x1, y1, hgt, wdt, printing)
 * 
 *     cdef display(self, OutputDev* out, double hDPI = 72, double vDPI = 72,             # <<<<<<<<<<<<<<
 *                         int rotate = 0, GBool use_media_box = gFalse,
 *                         GBool crop = gTrue, GBool printing = gFalse):
 */
struct __pyx_opt_args_6pyxpdf_4xpdf_5XPage_display {
  int __pyx_n;
  double hDPI;
  double vDPI;
  int rotate;
  GBool use_media_box;
  GBool crop;
  GBool printing;
};

/* "src/pyxpdf/pdferror.pxi":2
 * 
 * cdef class PDFError(Exception):             # <<<<<<<<<<<<<<
 *     """Main exception base class for pyxpdf.  All other exceptions inherit from
 *     this one.
 */
struct __pyx_obj_6pyxpdf_4xpdf_PDFError {
  PyBaseExceptionObject __pyx_base;
};


/* "src/pyxpdf/globalconfig.pxi":8
 * 
 * 
 * cdef class GlobalParamsConfig:             # <<<<<<<<<<<<<<
 *     cdef GlobalParams* _global
 * 
 */
struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig {
  PyObject_HEAD
  GlobalParams *_global;
};


/* "src/pyxpdf/textoutput.pxi":12
 * 
 * 
 * cdef class TextControl:             # <<<<<<<<<<<<<<
 *     cdef TextOutputControl control
 * 
 */
struct __pyx_obj_6pyxpdf_4xpdf_TextControl {
  PyObject_HEAD
  TextOutputControl control;
};


/* "src/pyxpdf/document.pxi":22
 * 
 * 
 * cdef class XPDFDoc:             # <<<<<<<<<<<<<<
 *     cdef PDFDoc *doc
 *     cdef GString *ownerpass
 */
struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc {
  PyObject_HEAD
  struct __pyx_vtabstruct_6pyxpdf_4xpdf_XPDFDoc *__pyx_vtab;
  PDFDoc *doc;
  GString *ownerpass;
  GString *userpass;
  PyObject *doc_data;
};


/* "src/pyxpdf/document.pxi":167
 * 
 * 
 * cdef class XPage:             # <<<<<<<<<<<<<<
 *     # No need to free Page* as it is own by PDFDoc
 *     cdef Page *page
 */
struct __pyx_obj_6pyxpdf_4xpdf_XPage {
  PyObject_HEAD
  struct __pyx_vtabstruct_6pyxpdf_4xpdf_XPage *__pyx_vtab;
  Page *page;
  int index;
  struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *doc;
};



/* "src/pyxpdf/document.pxi":22
 * 
 * 
 * cdef class XPDFDoc:             # <<<<<<<<<<<<<<
 *     cdef PDFDoc *doc
 *     cdef GString *ownerpass
 */

struct __pyx_vtabstruct_6pyxpdf_4xpdf_XPDFDoc {
  PyObject *(*get_info_dict)(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *);
  PyObject *(*get_metadata)(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *);
  PyObject *(*_load_from_file)(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *, GString *);
  PyObject *(*_load_from_char_array)(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *, char *, int);
  PyObject *(*check)(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *);
  Catalog *(*get_catalog)(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *);
  PyObject *(*get_page)(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *, int, int __pyx_skip_dispatch);
  PyObject *(*get_page_from_label)(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6pyxpdf_4xpdf_XPDFDoc *__pyx_vtabptr_6pyxpdf_4xpdf_XPDFDoc;


/* "src/pyxpdf/document.pxi":167
 * 
 * 
 * cdef class XPage:             # <<<<<<<<<<<<<<
 *     # No need to free Page* as it is own by PDFDoc
 *     cdef Page *page
 */

struct __pyx_vtabstruct_6pyxpdf_4xpdf_XPage {
  PyObject *(*display_slice)(struct __pyx_obj_6pyxpdf_4xpdf_XPage *, OutputDev *, int, int, int, int, struct __pyx_opt_args_6pyxpdf_4xpdf_5XPage_display_slice *__pyx_optional_args);
  PyObject *(*display)(struct __pyx_obj_6pyxpdf_4xpdf_XPage *, OutputDev *, struct __pyx_opt_args_6pyxpdf_4xpdf_5XPage_display *__pyx_optional_args);
};
static struct __pyx_vtabstruct_6pyxpdf_4xpdf_XPage *__pyx_vtabptr_6pyxpdf_4xpdf_XPage;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* Profile.proto */
#ifndef CYTHON_PROFILE
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
  #define CYTHON_PROFILE 0
#else
  #define CYTHON_PROFILE 1
#endif
#endif
#ifndef CYTHON_TRACE_NOGIL
  #define CYTHON_TRACE_NOGIL 0
#else
  #if CYTHON_TRACE_NOGIL && !defined(CYTHON_TRACE)
    #define CYTHON_TRACE 1
  #endif
#endif
#ifndef CYTHON_TRACE
  #define CYTHON_TRACE 0
#endif
#if CYTHON_TRACE
  #undef CYTHON_PROFILE_REUSE_FRAME
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE || CYTHON_TRACE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL(frame)
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL(frame) Py_CLEAR(frame)
  #endif
  #define __Pyx_TraceDeclarations\
  static PyCodeObject *__pyx_frame_code = NULL;\
  CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;\
  int __Pyx_use_tracing = 0;
  #define __Pyx_TraceFrameInit(codeobj)\
  if (codeobj) __pyx_frame_code = (PyCodeObject*) codeobj;
  #ifdef WITH_THREAD
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  if (nogil) {\
      if (CYTHON_TRACE_NOGIL) {\
          PyThreadState *tstate;\
          PyGILState_STATE state = PyGILState_Ensure();\
          tstate = __Pyx_PyThreadState_Current;\
          if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
                  (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
              __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          }\
          PyGILState_Release(state);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  } else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #else
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  {   PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #endif
  #define __Pyx_TraceException()\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (tstate->use_tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          tstate->tracing++;\
          tstate->use_tracing = 0;\
          PyObject *exc_info = __Pyx_GetExceptionTuple(tstate);\
          if (exc_info) {\
              if (CYTHON_TRACE && tstate->c_tracefunc)\
                  tstate->c_tracefunc(\
                      tstate->c_traceobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              tstate->c_profilefunc(\
                  tstate->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              Py_DECREF(exc_info);\
          }\
          tstate->use_tracing = 1;\
          tstate->tracing--;\
      }\
  }
  static void __Pyx_call_return_trace_func(PyThreadState *tstate, PyFrameObject *frame, PyObject *result) {
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      tstate->tracing++;
      tstate->use_tracing = 0;
      if (CYTHON_TRACE && tstate->c_tracefunc)
          tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_RETURN, result);
      if (tstate->c_profilefunc)
          tstate->c_profilefunc(tstate->c_profileobj, frame, PyTrace_RETURN, result);
      CYTHON_FRAME_DEL(frame);
      tstate->use_tracing = 1;
      tstate->tracing--;
      __Pyx_ErrRestoreInState(tstate, type, value, traceback);
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (tstate->use_tracing) {\
                  __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
              }\
              PyGILState_Release(state);\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (tstate->use_tracing) {\
              __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
          }\
      }\
  }
  #else
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (tstate->use_tracing) {\
          __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
      }\
  }
  #endif
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno);
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, PyThreadState* tstate, const char *funcname, const char *srcfile, int firstlineno);
#else
  #define __Pyx_TraceDeclarations
  #define __Pyx_TraceFrameInit(codeobj)
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)   if ((1)); else goto_error;
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result, nogil)
#endif
#if CYTHON_TRACE
  static int __Pyx_call_line_trace_func(PyThreadState *tstate, PyFrameObject *frame, int lineno) {
      int ret;
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_PyFrame_SetLineNumber(frame, lineno);
      tstate->tracing++;
      tstate->use_tracing = 0;
      ret = tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_LINE, NULL);
      tstate->use_tracing = 1;
      tstate->tracing--;
      if (likely(!ret)) {
          __Pyx_ErrRestoreInState(tstate, type, value, traceback);
      } else {
          Py_XDECREF(type);
          Py_XDECREF(value);
          Py_XDECREF(traceback);
      }
      return ret;
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              int ret = 0;\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
                  ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              }\
              PyGILState_Release(state);\
              if (unlikely(ret)) goto_error;\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
              int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              if (unlikely(ret)) goto_error;\
          }\
      }\
  }
  #else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
          int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
          if (unlikely(ret)) goto_error;\
      }\
  }
  #endif
#else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)   if ((1)); else goto_error;
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* IncludeStringH.proto */
#include <string.h>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* None.proto */
static CYTHON_INLINE long __Pyx_div_long(long, long);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_str(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_str(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* CallableCheck.proto */
#if CYTHON_USE_TYPE_SLOTS && PY_MAJOR_VERSION >= 3
#define __Pyx_PyCallable_Check(obj)   ((obj)->ob_type->tp_call != NULL)
#else
#define __Pyx_PyCallable_Check(obj)   PyCallable_Check(obj)
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* RegisterModuleCleanup.proto */
static void __pyx_module_cleanup(PyObject *self);
#if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
static int __Pyx_RegisterCleanup(void);
#else
#define __Pyx_RegisterCleanup() (0)
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_TextOutputMode(TextOutputMode value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Unicode(Unicode value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE TextOutputMode __Pyx_PyInt_As_TextOutputMode(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_6pyxpdf_4xpdf_7XPDFDoc_get_info_dict(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_7XPDFDoc_get_metadata(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_7XPDFDoc__load_from_file(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self, GString *__pyx_v_pdf); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_7XPDFDoc__load_from_char_array(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self, char *__pyx_v_pdf, int __pyx_v_data_length); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_7XPDFDoc_check(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self); /* proto*/
static Catalog *__pyx_f_6pyxpdf_4xpdf_7XPDFDoc_get_catalog(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_7XPDFDoc_get_page(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self, int __pyx_v_pgno, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_7XPDFDoc_get_page_from_label(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self, PyObject *__pyx_v_label, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_5XPage_display_slice(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self, OutputDev *__pyx_v_out, int __pyx_v_x1, int __pyx_v_y1, int __pyx_v_hgt, int __pyx_v_wdt, struct __pyx_opt_args_6pyxpdf_4xpdf_5XPage_display_slice *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_5XPage_display(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self, OutputDev *__pyx_v_out, struct __pyx_opt_args_6pyxpdf_4xpdf_5XPage_display *__pyx_optional_args); /* proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'cpython.version' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'pyxpdf.includes.native' */

/* Module declarations from 'pyxpdf.includes.xpdf_types' */

/* Module declarations from 'pyxpdf.includes.CharTypes' */

/* Module declarations from 'pyxpdf.includes.Stream' */

/* Module declarations from 'pyxpdf.includes.XRef' */

/* Module declarations from 'pyxpdf.includes.Array' */

/* Module declarations from 'pyxpdf.includes.Object' */

/* Module declarations from 'pyxpdf.includes.Dict' */

/* Module declarations from 'pyxpdf.includes.Function' */

/* Module declarations from 'pyxpdf.includes.Link' */

/* Module declarations from 'pyxpdf.includes.TextString' */

/* Module declarations from 'pyxpdf.includes.Form' */

/* Module declarations from 'pyxpdf.includes.Catalog' */

/* Module declarations from 'pyxpdf.includes.PDFCore' */

/* Module declarations from 'pyxpdf.includes.Outline' */

/* Module declarations from 'pyxpdf.includes.OptionalContent' */

/* Module declarations from 'pyxpdf.includes.PDFDoc' */

/* Module declarations from 'pyxpdf.includes.Annot' */

/* Module declarations from 'pyxpdf.includes.CharCodeToUnicode' */

/* Module declarations from 'pyxpdf.includes.FoFi' */

/* Module declarations from 'pyxpdf.includes.GfxFont' */

/* Module declarations from 'pyxpdf.includes.GfxState' */

/* Module declarations from 'pyxpdf.includes.Gfx' */

/* Module declarations from 'pyxpdf.includes.OutputDev' */

/* Module declarations from 'pyxpdf.includes.Page' */

/* Module declarations from 'pyxpdf.includes.xpdf_error' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.memory' */

/* Module declarations from 'pyxpdf.includes.UnicodeMap' */

/* Module declarations from 'pyxpdf.includes.UnicodeRemapping' */

/* Module declarations from 'pyxpdf.includes.CMap' */

/* Module declarations from 'pyxpdf.includes.GlobalParams' */

/* Module declarations from 'pyxpdf.includes.TextOutputDev' */

/* Module declarations from 'pyxpdf.xpdf' */
static PyTypeObject *__pyx_ptype_6pyxpdf_4xpdf_PDFError = 0;
static PyTypeObject *__pyx_ptype_6pyxpdf_4xpdf_GlobalParamsConfig = 0;
static PyTypeObject *__pyx_ptype_6pyxpdf_4xpdf_TextControl = 0;
static PyTypeObject *__pyx_ptype_6pyxpdf_4xpdf_XPDFDoc = 0;
static PyTypeObject *__pyx_ptype_6pyxpdf_4xpdf_XPage = 0;
static CYTHON_INLINE char *__pyx_f_6pyxpdf_4xpdf__chars(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_6pyxpdf_4xpdf__utf32_bytes(PyObject *); /*proto*/
static CYTHON_INLINE GString *__pyx_f_6pyxpdf_4xpdf_to_GString(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_6pyxpdf_4xpdf_GString_to_unicode(GString *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_6pyxpdf_4xpdf_GBool_to_bool(GBool); /*proto*/
static CYTHON_INLINE GBool __pyx_f_6pyxpdf_4xpdf_to_GBool(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_6pyxpdf_4xpdf_PDFRectangle_to_tuple(PDFRectangle *); /*proto*/
static void __pyx_f_6pyxpdf_4xpdf_utf32_to_Unicode_vector(PyObject *, std::vector<Unicode>  &); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_Dict_to_pydict(Dict *, struct __pyx_opt_args_6pyxpdf_4xpdf_Dict_to_pydict *__pyx_optional_args); /*proto*/
static TextString *__pyx_f_6pyxpdf_4xpdf_to_TextString(PyObject *); /*proto*/
static void __pyx_f_6pyxpdf_4xpdf_append_to_cpp_string(void *, char const *, int); /*proto*/
static void __pyx_f_6pyxpdf_4xpdf__text_out_func(void *, char const *, int); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_pdftotext_raw(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_6pyxpdf_4xpdf_pdftotext_raw *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf___pyx_unpickle_PDFError__set_state(struct __pyx_obj_6pyxpdf_4xpdf_PDFError *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
#define __Pyx_MODULE_NAME "pyxpdf.xpdf"
extern int __pyx_module_is_main_pyxpdf__xpdf;
int __pyx_module_is_main_pyxpdf__xpdf = 0;

/* Implementation of 'pyxpdf.xpdf' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_IndexError;
static const char __pyx_k_[] = "";
static const char __pyx_k_u[] = "u";
static const char __pyx_k_os[] = "os";
static const char __pyx_k_td[] = "td";
static const char __pyx_k_all[] = "__all__";
static const char __pyx_k_dir[] = "dir";
static const char __pyx_k_doc[] = "doc";
static const char __pyx_k_dos[] = "dos";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_mac[] = "mac";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_out[] = "out";
static const char __pyx_k_pdf[] = "pdf";
static const char __pyx_k_raw[] = "raw";
static const char __pyx_k_res[] = "res";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_pgno[] = "pgno";
static const char __pyx_k_read[] = "read";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_text[] = "text";
static const char __pyx_k_unix[] = "unix";
static const char __pyx_k_UTF_8[] = "UTF-8";
static const char __pyx_k_XPage[] = "XPage";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_label[] = "label";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_state[] = "state";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_table[] = "table";
static const char __pyx_k_x_max[] = "x_max";
static const char __pyx_k_x_min[] = "x_min";
static const char __pyx_k_y_max[] = "y_max";
static const char __pyx_k_y_min[] = "y_min";
static const char __pyx_k_Config[] = "Config";
static const char __pyx_k_dict_2[] = "_dict";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_layout[] = "layout";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_simple[] = "simple";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_XPDFDoc[] = "XPDFDoc";
static const char __pyx_k_control[] = "control";
static const char __pyx_k_linesep[] = "linesep";
static const char __pyx_k_message[] = "message";
static const char __pyx_k_reading[] = "reading";
static const char __pyx_k_PDFError[] = "PDFError";
static const char __pyx_k_backward[] = "backward";
static const char __pyx_k_cfg_file[] = "cfg_file";
static const char __pyx_k_cfg_path[] = "cfg_path";
static const char __pyx_k_get_page[] = "get_page";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_metadata[] = "metadata";
static const char __pyx_k_pdf_file[] = "pdf_file";
static const char __pyx_k_physical[] = "physical";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_rotation[] = "rotation";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_text_dev[] = "text_dev";
static const char __pyx_k_text_raw[] = "text_raw";
static const char __pyx_k_userpass[] = "userpass";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_char_name[] = "char_name";
static const char __pyx_k_clip_text[] = "clip_text";
static const char __pyx_k_find_text[] = "find_text";
static const char __pyx_k_info_dict[] = "info_dict";
static const char __pyx_k_load_file[] = "load_file";
static const char __pyx_k_num_pages[] = "num_pages";
static const char __pyx_k_ownerpass[] = "ownerpass";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_text_page[] = "text_page";
static const char __pyx_k_wholeword[] = "wholeword";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_insert_bom[] = "insert_bom";
static const char __pyx_k_margin_top[] = "margin_top";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_search_box[] = "search_box";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_TextControl[] = "TextControl";
static const char __pyx_k_enable_html[] = "enable_html";
static const char __pyx_k_fixed_pitch[] = "fixed_pitch";
static const char __pyx_k_lineprinter[] = "lineprinter";
static const char __pyx_k_margin_left[] = "margin_left";
static const char __pyx_k_pyxpdf_xpdf[] = "pyxpdf.xpdf";
static const char __pyx_k_TextRawOrder[] = "TextRawOrder";
static const char __pyx_k_margin_right[] = "margin_right";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_start_at_top[] = "start_at_top";
static const char __pyx_k_stop_at_last[] = "stop_at_last";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_text_control[] = "text_control";
static const char __pyx_k_use_setstate[] = "use_setstate";
static const char __pyx_k_margin_bottom[] = "margin_bottom";
static const char __pyx_k_pdftotext_raw[] = "pdftotext_raw";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_start_at_last[] = "start_at_last";
static const char __pyx_k_text_encoding[] = "text_encoding";
static const char __pyx_k_Unknown_layout[] = "Unknown layout - ";
static const char __pyx_k_XPage_text_raw[] = "XPage.text_raw";
static const char __pyx_k_case_sensitive[] = "case_sensitive";
static const char __pyx_k_rotation_value[] = "rotation_value";
static const char __pyx_k_stop_at_bottom[] = "stop_at_bottom";
static const char __pyx_k_TextLinePrinter[] = "TextLinePrinter";
static const char __pyx_k_TextTableLayout[] = "TextTableLayout";
static const char __pyx_k_XPage_find_text[] = "XPage.find_text";
static const char __pyx_k_discard_clipped[] = "discard_clipped";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_Invalid_EOL_type[] = "Invalid EOL type.";
static const char __pyx_k_TextReadingOrder[] = "TextReadingOrder";
static const char __pyx_k_TextSimpleLayout[] = "TextSimpleLayout";
static const char __pyx_k_XPDFDoc_get_page[] = "XPDFDoc.get_page";
static const char __pyx_k_XPDFDoc_metadata[] = "XPDFDoc.metadata";
static const char __pyx_k_discard_diagonal[] = "discard_diagonal";
static const char __pyx_k_setup_base_fonts[] = "setup_base_fonts";
static const char __pyx_k_XPDFDoc_info_dict[] = "XPDFDoc.info_dict";
static const char __pyx_k_discard_invisible[] = "discard_invisible";
static const char __pyx_k_GlobalParamsConfig[] = "GlobalParamsConfig";
static const char __pyx_k_TextPhysicalLayout[] = "TextPhysicalLayout";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_fixed_line_spacing[] = "fixed_line_spacing";
static const char __pyx_k_get_page_from_label[] = "get_page_from_label";
static const char __pyx_k_map_name_to_unicode[] = "map_name_to_unicode";
static const char __pyx_k_src_pyxpdf_xpdf_pyx[] = "src\\pyxpdf\\xpdf.pyx";
static const char __pyx_k_Error_in_pdf_options[] = "Error in pdf options";
static const char __pyx_k_XPage___reduce_cython[] = "XPage.__reduce_cython__";
static const char __pyx_k_pyx_unpickle_PDFError[] = "__pyx_unpickle_PDFError";
static const char __pyx_k_pdftotext_raw_PDFError[] = "pdftotext_raw, PDFError";
static const char __pyx_k_XPDFDoc___reduce_cython[] = "XPDFDoc.__reduce_cython__";
static const char __pyx_k_XPage___setstate_cython[] = "XPage.__setstate_cython__";
static const char __pyx_k_src_pyxpdf_document_pxi[] = "src\\pyxpdf\\document.pxi";
static const char __pyx_k_PDFError___reduce_cython[] = "PDFError.__reduce_cython__";
static const char __pyx_k_XPDFDoc___setstate_cython[] = "XPDFDoc.__setstate_cython__";
static const char __pyx_k_Cannot_Parse_PDF_ErrorCode[] = "Cannot Parse PDF. ErrorCode - ";
static const char __pyx_k_PDFError___setstate_cython[] = "PDFError.__setstate_cython__";
static const char __pyx_k_TextControl___reduce_cython[] = "TextControl.__reduce_cython__";
static const char __pyx_k_XPDFDoc_get_page_from_label[] = "XPDFDoc.get_page_from_label";
static const char __pyx_k_src_pyxpdf_globalconfig_pxi[] = "src\\pyxpdf\\globalconfig.pxi";
static const char __pyx_k_GlobalParamsConfig_load_file[] = "GlobalParamsConfig.load_file";
static const char __pyx_k_TextControl___setstate_cython[] = "TextControl.__setstate_cython__";
static const char __pyx_k_Cannot_open_pdf_file_ErrorCode[] = "Cannot open pdf file. ErrorCode-";
static const char __pyx_k_Cannot_allocate_memory_for_inter[] = "Cannot allocate memory for internal objects";
static const char __pyx_k_Cannot_create_GlobalParamsConfig[] = "Cannot create GlobalParamsConfig object.";
static const char __pyx_k_Copying_of_text_from_this_docume[] = "Copying of text from this document is not allowed.";
static const char __pyx_k_GlobalParamsConfig___reduce_cyth[] = "GlobalParamsConfig.__reduce_cython__";
static const char __pyx_k_GlobalParamsConfig___setstate_cy[] = "GlobalParamsConfig.__setstate_cython__";
static const char __pyx_k_GlobalParamsConfig_map_name_to_u[] = "GlobalParamsConfig.map_name_to_unicode";
static const char __pyx_k_GlobalParamsConfig_setup_base_fo[] = "GlobalParamsConfig.setup_base_fonts";
static const char __pyx_k_Incompatible_checksums_s_vs_0xd4[] = "Incompatible checksums (%s vs 0xd41d8cd = ())";
static const char __pyx_k_PDF_cannot_be_decrypted_please_p[] = "PDF cannot be decrypted please provide correct passwords.";
static const char __pyx_k_Page_index_must_be_positive_inte[] = "Page index must be positive integer less than total pages";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_pdf_argument_must_be_a_string_or[] = "pdf argument must be a string or a file-like object.";
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_kp_u_Cannot_Parse_PDF_ErrorCode;
static PyObject *__pyx_kp_s_Cannot_allocate_memory_for_inter;
static PyObject *__pyx_kp_s_Cannot_create_GlobalParamsConfig;
static PyObject *__pyx_kp_u_Cannot_open_pdf_file_ErrorCode;
static PyObject *__pyx_n_s_Config;
static PyObject *__pyx_kp_s_Copying_of_text_from_this_docume;
static PyObject *__pyx_kp_s_Error_in_pdf_options;
static PyObject *__pyx_n_s_GlobalParamsConfig;
static PyObject *__pyx_n_s_GlobalParamsConfig___reduce_cyth;
static PyObject *__pyx_n_s_GlobalParamsConfig___setstate_cy;
static PyObject *__pyx_n_s_GlobalParamsConfig_load_file;
static PyObject *__pyx_n_s_GlobalParamsConfig_map_name_to_u;
static PyObject *__pyx_n_s_GlobalParamsConfig_setup_base_fo;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xd4;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Invalid_EOL_type;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_n_s_PDFError;
static PyObject *__pyx_n_s_PDFError___reduce_cython;
static PyObject *__pyx_n_s_PDFError___setstate_cython;
static PyObject *__pyx_kp_s_PDF_cannot_be_decrypted_please_p;
static PyObject *__pyx_kp_s_Page_index_must_be_positive_inte;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_TextControl;
static PyObject *__pyx_n_s_TextControl___reduce_cython;
static PyObject *__pyx_n_s_TextControl___setstate_cython;
static PyObject *__pyx_n_s_TextLinePrinter;
static PyObject *__pyx_n_s_TextPhysicalLayout;
static PyObject *__pyx_n_s_TextRawOrder;
static PyObject *__pyx_n_s_TextReadingOrder;
static PyObject *__pyx_n_s_TextSimpleLayout;
static PyObject *__pyx_n_s_TextTableLayout;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_UTF_8;
static PyObject *__pyx_kp_u_Unknown_layout;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_XPDFDoc;
static PyObject *__pyx_n_s_XPDFDoc___reduce_cython;
static PyObject *__pyx_n_s_XPDFDoc___setstate_cython;
static PyObject *__pyx_n_s_XPDFDoc_get_page;
static PyObject *__pyx_n_s_XPDFDoc_get_page_from_label;
static PyObject *__pyx_n_s_XPDFDoc_info_dict;
static PyObject *__pyx_n_s_XPDFDoc_metadata;
static PyObject *__pyx_n_s_XPage;
static PyObject *__pyx_n_s_XPage___reduce_cython;
static PyObject *__pyx_n_s_XPage___setstate_cython;
static PyObject *__pyx_n_s_XPage_find_text;
static PyObject *__pyx_n_s_XPage_text_raw;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_backward;
static PyObject *__pyx_n_s_case_sensitive;
static PyObject *__pyx_n_s_cfg_file;
static PyObject *__pyx_n_s_cfg_path;
static PyObject *__pyx_n_s_char_name;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_clip_text;
static PyObject *__pyx_n_s_control;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_dict_2;
static PyObject *__pyx_n_s_dir;
static PyObject *__pyx_n_s_discard_clipped;
static PyObject *__pyx_n_s_discard_diagonal;
static PyObject *__pyx_n_s_discard_invisible;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_dos;
static PyObject *__pyx_n_s_enable_html;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_find_text;
static PyObject *__pyx_n_s_fixed_line_spacing;
static PyObject *__pyx_n_s_fixed_pitch;
static PyObject *__pyx_n_s_get_page;
static PyObject *__pyx_n_s_get_page_from_label;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_info_dict;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_insert_bom;
static PyObject *__pyx_n_s_label;
static PyObject *__pyx_n_s_layout;
static PyObject *__pyx_n_s_lineprinter;
static PyObject *__pyx_n_s_linesep;
static PyObject *__pyx_n_s_load_file;
static PyObject *__pyx_n_s_mac;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_map_name_to_unicode;
static PyObject *__pyx_n_s_margin_bottom;
static PyObject *__pyx_n_s_margin_left;
static PyObject *__pyx_n_s_margin_right;
static PyObject *__pyx_n_s_margin_top;
static PyObject *__pyx_n_s_message;
static PyObject *__pyx_n_s_metadata;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_num_pages;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_out;
static PyObject *__pyx_n_s_ownerpass;
static PyObject *__pyx_n_s_pdf;
static PyObject *__pyx_kp_u_pdf_argument_must_be_a_string_or;
static PyObject *__pyx_n_s_pdf_file;
static PyObject *__pyx_n_s_pdftotext_raw;
static PyObject *__pyx_kp_s_pdftotext_raw_PDFError;
static PyObject *__pyx_n_s_pgno;
static PyObject *__pyx_n_s_physical;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_PDFError;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_pyxpdf_xpdf;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_raw;
static PyObject *__pyx_n_s_read;
static PyObject *__pyx_n_s_reading;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_res;
static PyObject *__pyx_n_s_rotation;
static PyObject *__pyx_n_s_rotation_value;
static PyObject *__pyx_n_s_search_box;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_setup_base_fonts;
static PyObject *__pyx_n_s_simple;
static PyObject *__pyx_kp_s_src_pyxpdf_document_pxi;
static PyObject *__pyx_kp_s_src_pyxpdf_globalconfig_pxi;
static PyObject *__pyx_kp_s_src_pyxpdf_xpdf_pyx;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_start_at_last;
static PyObject *__pyx_n_s_start_at_top;
static PyObject *__pyx_n_s_state;
static PyObject *__pyx_n_s_stop_at_bottom;
static PyObject *__pyx_n_s_stop_at_last;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_s_table;
static PyObject *__pyx_n_s_td;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_text;
static PyObject *__pyx_n_s_text_control;
static PyObject *__pyx_n_s_text_dev;
static PyObject *__pyx_n_s_text_encoding;
static PyObject *__pyx_n_s_text_page;
static PyObject *__pyx_n_s_text_raw;
static PyObject *__pyx_n_s_u;
static PyObject *__pyx_n_s_unix;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_use_setstate;
static PyObject *__pyx_n_s_userpass;
static PyObject *__pyx_n_s_wholeword;
static PyObject *__pyx_n_s_x_max;
static PyObject *__pyx_n_s_x_min;
static PyObject *__pyx_n_s_y_max;
static PyObject *__pyx_n_s_y_min;
static int __pyx_pf_6pyxpdf_4xpdf_8PDFError___init__(struct __pyx_obj_6pyxpdf_4xpdf_PDFError *__pyx_v_self, PyObject *__pyx_v_message); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFError_2__reduce_cython__(struct __pyx_obj_6pyxpdf_4xpdf_PDFError *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFError_4__setstate_cython__(struct __pyx_obj_6pyxpdf_4xpdf_PDFError *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_pdftotext_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pdf_file, int __pyx_v_start, int __pyx_v_end, PyObject *__pyx_v_layout, PyObject *__pyx_v_ownerpass, PyObject *__pyx_v_userpass, PyObject *__pyx_v_cfg_file); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_load_file(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_cfg_path); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_2__cinit__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_cfg_path); /* proto */
static void __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_4__dealloc__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_6setup_base_fonts(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_dir); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_8base_dir___get__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_8base_dir_2__set__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_dir); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_8map_name_to_unicode(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_char_name); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_14ps_paper_width___get__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_14ps_paper_width_2__set__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self, int __pyx_v_width); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_15ps_paper_height___get__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_15ps_paper_height_2__set__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self, int __pyx_v_height); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_13text_encoding___get__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_13text_encoding_2__set__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_encoding); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_8text_eol___get__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_8text_eol_2__set__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_eol); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_16text_page_breaks___get__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_16text_page_breaks_2__set__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_breaks); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_14text_keep_tiny___get__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_14text_keep_tiny_2__set__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_keep); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_14print_commands___get__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_14print_commands_2__set__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_print_cmd); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_11error_quiet___get__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_11error_quiet_2__set__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_quiet); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_21default_text_encoding___get__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_11TextControl___cinit__(struct __pyx_obj_6pyxpdf_4xpdf_TextControl *__pyx_v_self, CYTHON_UNUSED TextOutputMode __pyx_v_mode, double __pyx_v_fixed_pitch, double __pyx_v_fixed_line_spacing, PyObject *__pyx_v_enable_html, PyObject *__pyx_v_clip_text, PyObject *__pyx_v_discard_diagonal, PyObject *__pyx_v_discard_invisible, PyObject *__pyx_v_discard_clipped, PyObject *__pyx_v_insert_bom, double __pyx_v_margin_left, double __pyx_v_margin_right, double __pyx_v_margin_top, double __pyx_v_margin_bottom); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_11TextControl_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_TextControl *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_11TextControl_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_TextControl *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_7XPDFDoc___cinit__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self, PyObject *__pyx_v_pdf, PyObject *__pyx_v_ownerpass, PyObject *__pyx_v_userpass); /* proto */
static void __pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_2__dealloc__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_8filename___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_15has_page_labels___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_9num_pages___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_11pdf_version___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_13is_linearized___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_12is_encrypted___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_11ok_to_print___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_12ok_to_change___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_10ok_to_copy___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_15ok_to_add_notes___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_4info_dict(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_6metadata(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_8get_page(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self, int __pyx_v_pgno); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_10get_page_from_label(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self, PyObject *__pyx_v_label); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_5XPage___cinit__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self, struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_doc, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_2find_text(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self, PyObject *__pyx_v_text, PyObject *__pyx_v_search_box, PyObject *__pyx_v_start_at_top, PyObject *__pyx_v_stop_at_bottom, PyObject *__pyx_v_start_at_last, PyObject *__pyx_v_stop_at_last, PyObject *__pyx_v_case_sensitive, PyObject *__pyx_v_backward, PyObject *__pyx_v_wholeword, PyObject *__pyx_v_rotation); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_4text_raw(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self, PyObject *__pyx_v_search_box, struct __pyx_obj_6pyxpdf_4xpdf_TextControl *__pyx_v_control); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_5label___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_8rotation___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_10is_cropped___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_12media_height___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_11media_width___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_11crop_height___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_8mediabox___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_7cropbox___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_8bleedbox___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_7trimbox___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_6artbox___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_5index___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self); /* proto */
static int __pyx_pf_6pyxpdf_4xpdf_5XPage_5index_2__set__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_3doc___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6pyxpdf_4xpdf_2__pyx_unpickle_PDFError(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_PDFError(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_GlobalParamsConfig(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_TextControl(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_XPDFDoc(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_XPage(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_222419149;
static PyObject *__pyx_k__2;
static TextOutputMode __pyx_k__17;
static GBool __pyx_k__33;
static GBool __pyx_k__34;
static GBool __pyx_k__35;
static GBool __pyx_k__36;
static GBool __pyx_k__37;
static GBool __pyx_k__38;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_codeobj__3;
static PyObject *__pyx_codeobj__4;
static PyObject *__pyx_codeobj__5;
static PyObject *__pyx_codeobj__8;
static PyObject *__pyx_codeobj__10;
static PyObject *__pyx_codeobj__11;
static PyObject *__pyx_codeobj__13;
static PyObject *__pyx_codeobj__15;
static PyObject *__pyx_codeobj__18;
static PyObject *__pyx_codeobj__20;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__26;
static PyObject *__pyx_codeobj__27;
static PyObject *__pyx_codeobj__28;
static PyObject *__pyx_codeobj__29;
static PyObject *__pyx_codeobj__31;
static PyObject *__pyx_codeobj__40;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__42;
static PyObject *__pyx_codeobj__44;
static PyObject *__pyx_codeobj__46;
/* Late includes */

/* "src/pyxpdf/helper.pxi":12
 * from pyxpdf.includes.TextString cimport TextString
 * 
 * cdef inline char* _chars(object s):             # <<<<<<<<<<<<<<
 *     if isinstance(s, unicode):
 *         # encode to the specific encoding used inside of the module
 */

static CYTHON_INLINE char *__pyx_f_6pyxpdf_4xpdf__chars(PyObject *__pyx_v_s) {
  char *__pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("_chars", 0);
  __Pyx_TraceCall("_chars", __pyx_f[0], 12, 0, __PYX_ERR(0, 12, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_s);

  /* "src/pyxpdf/helper.pxi":13
 * 
 * cdef inline char* _chars(object s):
 *     if isinstance(s, unicode):             # <<<<<<<<<<<<<<
 *         # encode to the specific encoding used inside of the module
 *         s = (<unicode>s).encode('UTF-8')
 */
  __Pyx_TraceLine(13,0,__PYX_ERR(0, 13, __pyx_L1_error))
  __pyx_t_1 = PyUnicode_Check(__pyx_v_s); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "src/pyxpdf/helper.pxi":15
 *     if isinstance(s, unicode):
 *         # encode to the specific encoding used inside of the module
 *         s = (<unicode>s).encode('UTF-8')             # <<<<<<<<<<<<<<
 *     return s
 * 
 */
    __Pyx_TraceLine(15,0,__PYX_ERR(0, 15, __pyx_L1_error))
    if (unlikely(__pyx_v_s == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 15, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_s)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_s, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "src/pyxpdf/helper.pxi":13
 * 
 * cdef inline char* _chars(object s):
 *     if isinstance(s, unicode):             # <<<<<<<<<<<<<<
 *         # encode to the specific encoding used inside of the module
 *         s = (<unicode>s).encode('UTF-8')
 */
  }

  /* "src/pyxpdf/helper.pxi":16
 *         # encode to the specific encoding used inside of the module
 *         s = (<unicode>s).encode('UTF-8')
 *     return s             # <<<<<<<<<<<<<<
 * 
 * cdef inline bytes _utf8_bytes(object s):
 */
  __Pyx_TraceLine(16,0,__PYX_ERR(0, 16, __pyx_L1_error))
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_s); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 16, __pyx_L1_error)
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "src/pyxpdf/helper.pxi":12
 * from pyxpdf.includes.TextString cimport TextString
 * 
 * cdef inline char* _chars(object s):             # <<<<<<<<<<<<<<
 *     if isinstance(s, unicode):
 *         # encode to the specific encoding used inside of the module
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("pyxpdf.xpdf._chars", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/helper.pxi":18
 *     return s
 * 
 * cdef inline bytes _utf8_bytes(object s):             # <<<<<<<<<<<<<<
 *     if isinstance(s, unicode):
 *         # encode to the specific encoding used inside of the module
 */

static CYTHON_INLINE PyObject *__pyx_f_6pyxpdf_4xpdf__utf8_bytes(PyObject *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("_utf8_bytes", 0);
  __Pyx_TraceCall("_utf8_bytes", __pyx_f[0], 18, 0, __PYX_ERR(0, 18, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_s);

  /* "src/pyxpdf/helper.pxi":19
 * 
 * cdef inline bytes _utf8_bytes(object s):
 *     if isinstance(s, unicode):             # <<<<<<<<<<<<<<
 *         # encode to the specific encoding used inside of the module
 *         s = (<unicode>s).encode('UTF-8')
 */
  __Pyx_TraceLine(19,0,__PYX_ERR(0, 19, __pyx_L1_error))
  __pyx_t_1 = PyUnicode_Check(__pyx_v_s); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "src/pyxpdf/helper.pxi":21
 *     if isinstance(s, unicode):
 *         # encode to the specific encoding used inside of the module
 *         s = (<unicode>s).encode('UTF-8')             # <<<<<<<<<<<<<<
 *     return s
 * 
 */
    __Pyx_TraceLine(21,0,__PYX_ERR(0, 21, __pyx_L1_error))
    if (unlikely(__pyx_v_s == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 21, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_s)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 21, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_s, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "src/pyxpdf/helper.pxi":19
 * 
 * cdef inline bytes _utf8_bytes(object s):
 *     if isinstance(s, unicode):             # <<<<<<<<<<<<<<
 *         # encode to the specific encoding used inside of the module
 *         s = (<unicode>s).encode('UTF-8')
 */
  }

  /* "src/pyxpdf/helper.pxi":22
 *         # encode to the specific encoding used inside of the module
 *         s = (<unicode>s).encode('UTF-8')
 *     return s             # <<<<<<<<<<<<<<
 * 
 * cdef inline bytes _utf32_bytes(object s):
 */
  __Pyx_TraceLine(22,0,__PYX_ERR(0, 22, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(PyBytes_CheckExact(__pyx_v_s))||((__pyx_v_s) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_s)->tp_name), 0))) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_INCREF(__pyx_v_s);
  __pyx_r = ((PyObject*)__pyx_v_s);
  goto __pyx_L0;

  /* "src/pyxpdf/helper.pxi":18
 *     return s
 * 
 * cdef inline bytes _utf8_bytes(object s):             # <<<<<<<<<<<<<<
 *     if isinstance(s, unicode):
 *         # encode to the specific encoding used inside of the module
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyxpdf.xpdf._utf8_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/helper.pxi":24
 *     return s
 * 
 * cdef inline bytes _utf32_bytes(object s):             # <<<<<<<<<<<<<<
 *     if isinstance(s, unicode):
 *         # encode to the specific encoding used inside of the module
 */

static CYTHON_INLINE PyObject *__pyx_f_6pyxpdf_4xpdf__utf32_bytes(PyObject *__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("_utf32_bytes", 0);
  __Pyx_TraceCall("_utf32_bytes", __pyx_f[0], 24, 0, __PYX_ERR(0, 24, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_s);

  /* "src/pyxpdf/helper.pxi":25
 * 
 * cdef inline bytes _utf32_bytes(object s):
 *     if isinstance(s, unicode):             # <<<<<<<<<<<<<<
 *         # encode to the specific encoding used inside of the module
 *         s = (<unicode>s).encode('UTF-32')
 */
  __Pyx_TraceLine(25,0,__PYX_ERR(0, 25, __pyx_L1_error))
  __pyx_t_1 = PyUnicode_Check(__pyx_v_s); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "src/pyxpdf/helper.pxi":27
 *     if isinstance(s, unicode):
 *         # encode to the specific encoding used inside of the module
 *         s = (<unicode>s).encode('UTF-32')             # <<<<<<<<<<<<<<
 *     return s
 * 
 */
    __Pyx_TraceLine(27,0,__PYX_ERR(0, 27, __pyx_L1_error))
    if (unlikely(__pyx_v_s == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 27, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsEncodedString(((PyObject*)__pyx_v_s), ((char const *)"UTF-32"), NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 27, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_s, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "src/pyxpdf/helper.pxi":25
 * 
 * cdef inline bytes _utf32_bytes(object s):
 *     if isinstance(s, unicode):             # <<<<<<<<<<<<<<
 *         # encode to the specific encoding used inside of the module
 *         s = (<unicode>s).encode('UTF-32')
 */
  }

  /* "src/pyxpdf/helper.pxi":28
 *         # encode to the specific encoding used inside of the module
 *         s = (<unicode>s).encode('UTF-32')
 *     return s             # <<<<<<<<<<<<<<
 * 
 * cdef inline GString* to_GString(object s):
 */
  __Pyx_TraceLine(28,0,__PYX_ERR(0, 28, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(PyBytes_CheckExact(__pyx_v_s))||((__pyx_v_s) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_s)->tp_name), 0))) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_INCREF(__pyx_v_s);
  __pyx_r = ((PyObject*)__pyx_v_s);
  goto __pyx_L0;

  /* "src/pyxpdf/helper.pxi":24
 *     return s
 * 
 * cdef inline bytes _utf32_bytes(object s):             # <<<<<<<<<<<<<<
 *     if isinstance(s, unicode):
 *         # encode to the specific encoding used inside of the module
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyxpdf.xpdf._utf32_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/helper.pxi":30
 *     return s
 * 
 * cdef inline GString* to_GString(object s):             # <<<<<<<<<<<<<<
 *     return new GString(_chars(s))
 * 
 */

static CYTHON_INLINE GString *__pyx_f_6pyxpdf_4xpdf_to_GString(PyObject *__pyx_v_s) {
  GString *__pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_GString", 0);
  __Pyx_TraceCall("to_GString", __pyx_f[0], 30, 0, __PYX_ERR(0, 30, __pyx_L1_error));

  /* "src/pyxpdf/helper.pxi":31
 * 
 * cdef inline GString* to_GString(object s):
 *     return new GString(_chars(s))             # <<<<<<<<<<<<<<
 * 
 * cdef inline object GString_to_unicode(GString *gstr):
 */
  __Pyx_TraceLine(31,0,__PYX_ERR(0, 31, __pyx_L1_error))
  __pyx_r = new GString(__pyx_f_6pyxpdf_4xpdf__chars(__pyx_v_s));
  goto __pyx_L0;

  /* "src/pyxpdf/helper.pxi":30
 *     return s
 * 
 * cdef inline GString* to_GString(object s):             # <<<<<<<<<<<<<<
 *     return new GString(_chars(s))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("pyxpdf.xpdf.to_GString", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/helper.pxi":33
 *     return new GString(_chars(s))
 * 
 * cdef inline object GString_to_unicode(GString *gstr):             # <<<<<<<<<<<<<<
 *     if gstr is not NULL:
 *         return gstr.getCString()[:gstr.getLength()].decode("UTF-8")
 */

static CYTHON_INLINE PyObject *__pyx_f_6pyxpdf_4xpdf_GString_to_unicode(GString *__pyx_v_gstr) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("GString_to_unicode", 0);
  __Pyx_TraceCall("GString_to_unicode", __pyx_f[0], 33, 0, __PYX_ERR(0, 33, __pyx_L1_error));

  /* "src/pyxpdf/helper.pxi":34
 * 
 * cdef inline object GString_to_unicode(GString *gstr):
 *     if gstr is not NULL:             # <<<<<<<<<<<<<<
 *         return gstr.getCString()[:gstr.getLength()].decode("UTF-8")
 *     else:
 */
  __Pyx_TraceLine(34,0,__PYX_ERR(0, 34, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v_gstr != NULL) != 0);
  if (__pyx_t_1) {

    /* "src/pyxpdf/helper.pxi":35
 * cdef inline object GString_to_unicode(GString *gstr):
 *     if gstr is not NULL:
 *         return gstr.getCString()[:gstr.getLength()].decode("UTF-8")             # <<<<<<<<<<<<<<
 *     else:
 *         return ""
 */
    __Pyx_TraceLine(35,0,__PYX_ERR(0, 35, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_gstr->getCString(), 0, __pyx_v_gstr->getLength(), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "src/pyxpdf/helper.pxi":34
 * 
 * cdef inline object GString_to_unicode(GString *gstr):
 *     if gstr is not NULL:             # <<<<<<<<<<<<<<
 *         return gstr.getCString()[:gstr.getLength()].decode("UTF-8")
 *     else:
 */
  }

  /* "src/pyxpdf/helper.pxi":37
 *         return gstr.getCString()[:gstr.getLength()].decode("UTF-8")
 *     else:
 *         return ""             # <<<<<<<<<<<<<<
 * 
 * cdef inline GBool_to_bool(GBool b):
 */
  __Pyx_TraceLine(37,0,__PYX_ERR(0, 37, __pyx_L1_error))
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_s_);
    __pyx_r = __pyx_kp_s_;
    goto __pyx_L0;
  }

  /* "src/pyxpdf/helper.pxi":33
 *     return new GString(_chars(s))
 * 
 * cdef inline object GString_to_unicode(GString *gstr):             # <<<<<<<<<<<<<<
 *     if gstr is not NULL:
 *         return gstr.getCString()[:gstr.getLength()].decode("UTF-8")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyxpdf.xpdf.GString_to_unicode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/helper.pxi":39
 *         return ""
 * 
 * cdef inline GBool_to_bool(GBool b):             # <<<<<<<<<<<<<<
 *     return True if b == gTrue else False
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_6pyxpdf_4xpdf_GBool_to_bool(GBool __pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("GBool_to_bool", 0);
  __Pyx_TraceCall("GBool_to_bool", __pyx_f[0], 39, 0, __PYX_ERR(0, 39, __pyx_L1_error));

  /* "src/pyxpdf/helper.pxi":40
 * 
 * cdef inline GBool_to_bool(GBool b):
 *     return True if b == gTrue else False             # <<<<<<<<<<<<<<
 * 
 * cdef inline GBool to_GBool(pyb):
 */
  __Pyx_TraceLine(40,0,__PYX_ERR(0, 40, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  if (((__pyx_v_b == gTrue) != 0)) {
    __Pyx_INCREF(Py_True);
    __pyx_t_1 = Py_True;
  } else {
    __Pyx_INCREF(Py_False);
    __pyx_t_1 = Py_False;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/helper.pxi":39
 *         return ""
 * 
 * cdef inline GBool_to_bool(GBool b):             # <<<<<<<<<<<<<<
 *     return True if b == gTrue else False
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.GBool_to_bool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/helper.pxi":42
 *     return True if b == gTrue else False
 * 
 * cdef inline GBool to_GBool(pyb):             # <<<<<<<<<<<<<<
 *     return gTrue if pyb else gFalse
 * 
 */

static CYTHON_INLINE GBool __pyx_f_6pyxpdf_4xpdf_to_GBool(PyObject *__pyx_v_pyb) {
  GBool __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("to_GBool", 0);
  __Pyx_TraceCall("to_GBool", __pyx_f[0], 42, 0, __PYX_ERR(0, 42, __pyx_L1_error));

  /* "src/pyxpdf/helper.pxi":43
 * 
 * cdef inline GBool to_GBool(pyb):
 *     return gTrue if pyb else gFalse             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(43,0,__PYX_ERR(0, 43, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_pyb); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 43, __pyx_L1_error)
  if (__pyx_t_2) {
    __pyx_t_1 = gTrue;
  } else {
    __pyx_t_1 = gFalse;
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "src/pyxpdf/helper.pxi":42
 *     return True if b == gTrue else False
 * 
 * cdef inline GBool to_GBool(pyb):             # <<<<<<<<<<<<<<
 *     return gTrue if pyb else gFalse
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("pyxpdf.xpdf.to_GBool", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/helper.pxi":46
 * 
 * 
 * cdef inline PDFRectangle_to_tuple(PDFRectangle *rect):             # <<<<<<<<<<<<<<
 *     cdef tuple rect_tp
 *     rect_tp = (rect.x1, rect.y1, rect.x2, rect.y2)
 */

static CYTHON_INLINE PyObject *__pyx_f_6pyxpdf_4xpdf_PDFRectangle_to_tuple(PDFRectangle *__pyx_v_rect) {
  PyObject *__pyx_v_rect_tp = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("PDFRectangle_to_tuple", 0);
  __Pyx_TraceCall("PDFRectangle_to_tuple", __pyx_f[0], 46, 0, __PYX_ERR(0, 46, __pyx_L1_error));

  /* "src/pyxpdf/helper.pxi":48
 * cdef inline PDFRectangle_to_tuple(PDFRectangle *rect):
 *     cdef tuple rect_tp
 *     rect_tp = (rect.x1, rect.y1, rect.x2, rect.y2)             # <<<<<<<<<<<<<<
 *     return rect_tp
 * 
 */
  __Pyx_TraceLine(48,0,__PYX_ERR(0, 48, __pyx_L1_error))
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_rect->x1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_rect->y1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_rect->x2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_rect->y2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_v_rect_tp = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "src/pyxpdf/helper.pxi":49
 *     cdef tuple rect_tp
 *     rect_tp = (rect.x1, rect.y1, rect.x2, rect.y2)
 *     return rect_tp             # <<<<<<<<<<<<<<
 * 
 * cdef void utf32_to_Unicode_vector(text, vector[Unicode]& vec):
 */
  __Pyx_TraceLine(49,0,__PYX_ERR(0, 49, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_rect_tp);
  __pyx_r = __pyx_v_rect_tp;
  goto __pyx_L0;

  /* "src/pyxpdf/helper.pxi":46
 * 
 * 
 * cdef inline PDFRectangle_to_tuple(PDFRectangle *rect):             # <<<<<<<<<<<<<<
 *     cdef tuple rect_tp
 *     rect_tp = (rect.x1, rect.y1, rect.x2, rect.y2)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFRectangle_to_tuple", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_rect_tp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/helper.pxi":51
 *     return rect_tp
 * 
 * cdef void utf32_to_Unicode_vector(text, vector[Unicode]& vec):             # <<<<<<<<<<<<<<
 *     cdef bytes by = _utf32_bytes(text)
 *     cdef char* ch = by
 */

static void __pyx_f_6pyxpdf_4xpdf_utf32_to_Unicode_vector(PyObject *__pyx_v_text, std::vector<Unicode>  &__pyx_v_vec) {
  PyObject *__pyx_v_by = 0;
  char *__pyx_v_ch;
  size_t __pyx_v_l_bytes;
  size_t __pyx_v_l_utf32;
  int __pyx_v_i;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  Py_ssize_t __pyx_t_3;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("utf32_to_Unicode_vector", 0);
  __Pyx_TraceCall("utf32_to_Unicode_vector", __pyx_f[0], 51, 0, __PYX_ERR(0, 51, __pyx_L1_error));

  /* "src/pyxpdf/helper.pxi":52
 * 
 * cdef void utf32_to_Unicode_vector(text, vector[Unicode]& vec):
 *     cdef bytes by = _utf32_bytes(text)             # <<<<<<<<<<<<<<
 *     cdef char* ch = by
 * 
 */
  __Pyx_TraceLine(52,0,__PYX_ERR(0, 52, __pyx_L1_error))
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf__utf32_bytes(__pyx_v_text); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_by = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pyxpdf/helper.pxi":53
 * cdef void utf32_to_Unicode_vector(text, vector[Unicode]& vec):
 *     cdef bytes by = _utf32_bytes(text)
 *     cdef char* ch = by             # <<<<<<<<<<<<<<
 * 
 *     cdef size_t l_bytes = len(by)
 */
  __Pyx_TraceLine(53,0,__PYX_ERR(0, 53, __pyx_L1_error))
  if (unlikely(__pyx_v_by == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(0, 53, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_AsWritableString(__pyx_v_by); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 53, __pyx_L1_error)
  __pyx_v_ch = __pyx_t_2;

  /* "src/pyxpdf/helper.pxi":55
 *     cdef char* ch = by
 * 
 *     cdef size_t l_bytes = len(by)             # <<<<<<<<<<<<<<
 *     cdef size_t l_utf32 = (l_bytes/4) - 1
 * 
 */
  __Pyx_TraceLine(55,0,__PYX_ERR(0, 55, __pyx_L1_error))
  if (unlikely(__pyx_v_by == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 55, __pyx_L1_error)
  }
  __pyx_t_3 = PyBytes_GET_SIZE(__pyx_v_by); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 55, __pyx_L1_error)
  __pyx_v_l_bytes = __pyx_t_3;

  /* "src/pyxpdf/helper.pxi":56
 * 
 *     cdef size_t l_bytes = len(by)
 *     cdef size_t l_utf32 = (l_bytes/4) - 1             # <<<<<<<<<<<<<<
 * 
 *     vec.resize(l_utf32)  # Not including BOM
 */
  __Pyx_TraceLine(56,0,__PYX_ERR(0, 56, __pyx_L1_error))
  __pyx_v_l_utf32 = ((__pyx_v_l_bytes / 4) - 1);

  /* "src/pyxpdf/helper.pxi":58
 *     cdef size_t l_utf32 = (l_bytes/4) - 1
 * 
 *     vec.resize(l_utf32)  # Not including BOM             # <<<<<<<<<<<<<<
 * 
 *     # print(f"{l_bytes}")
 */
  __Pyx_TraceLine(58,0,__PYX_ERR(0, 58, __pyx_L1_error))
  try {
    __pyx_v_vec.resize(__pyx_v_l_utf32);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 58, __pyx_L1_error)
  }

  /* "src/pyxpdf/helper.pxi":63
 *     # print(f"Loop - {list(range(4, l_bytes, 4))}")
 *     cdef int i
 *     for i in range(4, l_bytes, 4):             # <<<<<<<<<<<<<<
 *         vec[(i/4) - 1] = deref(<Unicode*>(&ch[i]))
 *         # print(f"{(i/4) - 1} - {vec[(i/4) - 1]}")
 */
  __Pyx_TraceLine(63,0,__PYX_ERR(0, 63, __pyx_L1_error))
  __pyx_t_4 = __pyx_v_l_bytes;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 4; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=4) {
    __pyx_v_i = __pyx_t_6;

    /* "src/pyxpdf/helper.pxi":64
 *     cdef int i
 *     for i in range(4, l_bytes, 4):
 *         vec[(i/4) - 1] = deref(<Unicode*>(&ch[i]))             # <<<<<<<<<<<<<<
 *         # print(f"{(i/4) - 1} - {vec[(i/4) - 1]}")
 * 
 */
    __Pyx_TraceLine(64,0,__PYX_ERR(0, 64, __pyx_L1_error))
    (__pyx_v_vec[(__Pyx_div_long(__pyx_v_i, 4) - 1)]) = (*((Unicode *)(&(__pyx_v_ch[__pyx_v_i]))));
  }

  /* "src/pyxpdf/helper.pxi":51
 *     return rect_tp
 * 
 * cdef void utf32_to_Unicode_vector(text, vector[Unicode]& vec):             # <<<<<<<<<<<<<<
 *     cdef bytes by = _utf32_bytes(text)
 *     cdef char* ch = by
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("pyxpdf.xpdf.utf32_to_Unicode_vector", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_by);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "src/pyxpdf/helper.pxi":68
 * 
 * 
 * cdef dict Dict_to_pydict(Dict* xdict, dict pydict = {}):             # <<<<<<<<<<<<<<
 *     cdef Object obj
 *     cdef const char* key
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_Dict_to_pydict(Dict *__pyx_v_xdict, struct __pyx_opt_args_6pyxpdf_4xpdf_Dict_to_pydict *__pyx_optional_args) {
  PyObject *__pyx_v_pydict = __pyx_k__2;
  Object __pyx_v_obj;
  char const *__pyx_v_key;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("Dict_to_pydict", 0);
  __Pyx_TraceCall("Dict_to_pydict", __pyx_f[0], 68, 0, __PYX_ERR(0, 68, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_pydict = __pyx_optional_args->pydict;
    }
  }

  /* "src/pyxpdf/helper.pxi":71
 *     cdef Object obj
 *     cdef const char* key
 *     if xdict != NULL:             # <<<<<<<<<<<<<<
 *         for i in range(xdict.getLength()):
 *             key = xdict.getKey(i)
 */
  __Pyx_TraceLine(71,0,__PYX_ERR(0, 71, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v_xdict != NULL) != 0);
  if (__pyx_t_1) {

    /* "src/pyxpdf/helper.pxi":72
 *     cdef const char* key
 *     if xdict != NULL:
 *         for i in range(xdict.getLength()):             # <<<<<<<<<<<<<<
 *             key = xdict.getKey(i)
 *             if xdict.lookup(key, &obj).isString() == gTrue:
 */
    __Pyx_TraceLine(72,0,__PYX_ERR(0, 72, __pyx_L1_error))
    __pyx_t_2 = __pyx_v_xdict->getLength();
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "src/pyxpdf/helper.pxi":73
 *     if xdict != NULL:
 *         for i in range(xdict.getLength()):
 *             key = xdict.getKey(i)             # <<<<<<<<<<<<<<
 *             if xdict.lookup(key, &obj).isString() == gTrue:
 *                 pydict[key.decode('UTF-8')] = GString_to_unicode(obj.getString())
 */
      __Pyx_TraceLine(73,0,__PYX_ERR(0, 73, __pyx_L1_error))
      __pyx_v_key = __pyx_v_xdict->getKey(__pyx_v_i);

      /* "src/pyxpdf/helper.pxi":74
 *         for i in range(xdict.getLength()):
 *             key = xdict.getKey(i)
 *             if xdict.lookup(key, &obj).isString() == gTrue:             # <<<<<<<<<<<<<<
 *                 pydict[key.decode('UTF-8')] = GString_to_unicode(obj.getString())
 *             elif xdict.lookup(key, &obj).isNum() == gTrue:
 */
      __Pyx_TraceLine(74,0,__PYX_ERR(0, 74, __pyx_L1_error))
      __pyx_t_1 = ((__pyx_v_xdict->lookup(__pyx_v_key, (&__pyx_v_obj), NULL)->isString() == gTrue) != 0);
      if (__pyx_t_1) {

        /* "src/pyxpdf/helper.pxi":75
 *             key = xdict.getKey(i)
 *             if xdict.lookup(key, &obj).isString() == gTrue:
 *                 pydict[key.decode('UTF-8')] = GString_to_unicode(obj.getString())             # <<<<<<<<<<<<<<
 *             elif xdict.lookup(key, &obj).isNum() == gTrue:
 *                 pydict[key.decode('UTF-8')] = obj.getNum()
 */
        __Pyx_TraceLine(75,0,__PYX_ERR(0, 75, __pyx_L1_error))
        __pyx_t_5 = __pyx_f_6pyxpdf_4xpdf_GString_to_unicode(__pyx_v_obj.getString()); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 75, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (unlikely(__pyx_v_pydict == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 75, __pyx_L1_error)
        }
        __pyx_t_6 = __Pyx_decode_c_string(__pyx_v_key, 0, strlen(__pyx_v_key), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 75, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (unlikely(PyDict_SetItem(__pyx_v_pydict, __pyx_t_6, __pyx_t_5) < 0)) __PYX_ERR(0, 75, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "src/pyxpdf/helper.pxi":74
 *         for i in range(xdict.getLength()):
 *             key = xdict.getKey(i)
 *             if xdict.lookup(key, &obj).isString() == gTrue:             # <<<<<<<<<<<<<<
 *                 pydict[key.decode('UTF-8')] = GString_to_unicode(obj.getString())
 *             elif xdict.lookup(key, &obj).isNum() == gTrue:
 */
        goto __pyx_L6;
      }

      /* "src/pyxpdf/helper.pxi":76
 *             if xdict.lookup(key, &obj).isString() == gTrue:
 *                 pydict[key.decode('UTF-8')] = GString_to_unicode(obj.getString())
 *             elif xdict.lookup(key, &obj).isNum() == gTrue:             # <<<<<<<<<<<<<<
 *                 pydict[key.decode('UTF-8')] = obj.getNum()
 *         obj.free()
 */
      __Pyx_TraceLine(76,0,__PYX_ERR(0, 76, __pyx_L1_error))
      __pyx_t_1 = ((__pyx_v_xdict->lookup(__pyx_v_key, (&__pyx_v_obj), NULL)->isNum() == gTrue) != 0);
      if (__pyx_t_1) {

        /* "src/pyxpdf/helper.pxi":77
 *                 pydict[key.decode('UTF-8')] = GString_to_unicode(obj.getString())
 *             elif xdict.lookup(key, &obj).isNum() == gTrue:
 *                 pydict[key.decode('UTF-8')] = obj.getNum()             # <<<<<<<<<<<<<<
 *         obj.free()
 *     return pydict
 */
        __Pyx_TraceLine(77,0,__PYX_ERR(0, 77, __pyx_L1_error))
        __pyx_t_5 = PyFloat_FromDouble(__pyx_v_obj.getNum()); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 77, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (unlikely(__pyx_v_pydict == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 77, __pyx_L1_error)
        }
        __pyx_t_6 = __Pyx_decode_c_string(__pyx_v_key, 0, strlen(__pyx_v_key), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 77, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (unlikely(PyDict_SetItem(__pyx_v_pydict, __pyx_t_6, __pyx_t_5) < 0)) __PYX_ERR(0, 77, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "src/pyxpdf/helper.pxi":76
 *             if xdict.lookup(key, &obj).isString() == gTrue:
 *                 pydict[key.decode('UTF-8')] = GString_to_unicode(obj.getString())
 *             elif xdict.lookup(key, &obj).isNum() == gTrue:             # <<<<<<<<<<<<<<
 *                 pydict[key.decode('UTF-8')] = obj.getNum()
 *         obj.free()
 */
      }
      __pyx_L6:;
    }

    /* "src/pyxpdf/helper.pxi":78
 *             elif xdict.lookup(key, &obj).isNum() == gTrue:
 *                 pydict[key.decode('UTF-8')] = obj.getNum()
 *         obj.free()             # <<<<<<<<<<<<<<
 *     return pydict
 * 
 */
    __Pyx_TraceLine(78,0,__PYX_ERR(0, 78, __pyx_L1_error))
    __pyx_v_obj.free();

    /* "src/pyxpdf/helper.pxi":71
 *     cdef Object obj
 *     cdef const char* key
 *     if xdict != NULL:             # <<<<<<<<<<<<<<
 *         for i in range(xdict.getLength()):
 *             key = xdict.getKey(i)
 */
  }

  /* "src/pyxpdf/helper.pxi":79
 *                 pydict[key.decode('UTF-8')] = obj.getNum()
 *         obj.free()
 *     return pydict             # <<<<<<<<<<<<<<
 * 
 * cdef object TextString_to_unicode(TextString* text_str):
 */
  __Pyx_TraceLine(79,0,__PYX_ERR(0, 79, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pydict);
  __pyx_r = __pyx_v_pydict;
  goto __pyx_L0;

  /* "src/pyxpdf/helper.pxi":68
 * 
 * 
 * cdef dict Dict_to_pydict(Dict* xdict, dict pydict = {}):             # <<<<<<<<<<<<<<
 *     cdef Object obj
 *     cdef const char* key
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyxpdf.xpdf.Dict_to_pydict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/helper.pxi":81
 *     return pydict
 * 
 * cdef object TextString_to_unicode(TextString* text_str):             # <<<<<<<<<<<<<<
 *     return GString_to_unicode(text_str.toPDFTextString())
 * 
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_TextString_to_unicode(TextString *__pyx_v_text_str) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("TextString_to_unicode", 0);
  __Pyx_TraceCall("TextString_to_unicode", __pyx_f[0], 81, 0, __PYX_ERR(0, 81, __pyx_L1_error));

  /* "src/pyxpdf/helper.pxi":82
 * 
 * cdef object TextString_to_unicode(TextString* text_str):
 *     return GString_to_unicode(text_str.toPDFTextString())             # <<<<<<<<<<<<<<
 * 
 * cdef TextString* to_TextString(tstr):
 */
  __Pyx_TraceLine(82,0,__PYX_ERR(0, 82, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GString_to_unicode(__pyx_v_text_str->toPDFTextString()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/helper.pxi":81
 *     return pydict
 * 
 * cdef object TextString_to_unicode(TextString* text_str):             # <<<<<<<<<<<<<<
 *     return GString_to_unicode(text_str.toPDFTextString())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.TextString_to_unicode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/helper.pxi":84
 *     return GString_to_unicode(text_str.toPDFTextString())
 * 
 * cdef TextString* to_TextString(tstr):             # <<<<<<<<<<<<<<
 *     cdef TextString* text_string
 *     text_string = new TextString(to_GString(tstr))
 */

static TextString *__pyx_f_6pyxpdf_4xpdf_to_TextString(PyObject *__pyx_v_tstr) {
  TextString *__pyx_v_text_string;
  TextString *__pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_TextString", 0);
  __Pyx_TraceCall("to_TextString", __pyx_f[0], 84, 0, __PYX_ERR(0, 84, __pyx_L1_error));

  /* "src/pyxpdf/helper.pxi":86
 * cdef TextString* to_TextString(tstr):
 *     cdef TextString* text_string
 *     text_string = new TextString(to_GString(tstr))             # <<<<<<<<<<<<<<
 *     return text_string
 * 
 */
  __Pyx_TraceLine(86,0,__PYX_ERR(0, 86, __pyx_L1_error))
  __pyx_v_text_string = new TextString(__pyx_f_6pyxpdf_4xpdf_to_GString(__pyx_v_tstr));

  /* "src/pyxpdf/helper.pxi":87
 *     cdef TextString* text_string
 *     text_string = new TextString(to_GString(tstr))
 *     return text_string             # <<<<<<<<<<<<<<
 * 
 * cdef void append_to_cpp_string(void *stream, const char *text, int length):
 */
  __Pyx_TraceLine(87,0,__PYX_ERR(0, 87, __pyx_L1_error))
  __pyx_r = __pyx_v_text_string;
  goto __pyx_L0;

  /* "src/pyxpdf/helper.pxi":84
 *     return GString_to_unicode(text_str.toPDFTextString())
 * 
 * cdef TextString* to_TextString(tstr):             # <<<<<<<<<<<<<<
 *     cdef TextString* text_string
 *     text_string = new TextString(to_GString(tstr))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("pyxpdf.xpdf.to_TextString", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/helper.pxi":89
 *     return text_string
 * 
 * cdef void append_to_cpp_string(void *stream, const char *text, int length):             # <<<<<<<<<<<<<<
 *     (<string*>stream)[0] += string(text, length)
 */

static void __pyx_f_6pyxpdf_4xpdf_append_to_cpp_string(void *__pyx_v_stream, char const *__pyx_v_text, int __pyx_v_length) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __Pyx_RefNannySetupContext("append_to_cpp_string", 0);
  __Pyx_TraceCall("append_to_cpp_string", __pyx_f[0], 89, 0, __PYX_ERR(0, 89, __pyx_L1_error));

  /* "src/pyxpdf/helper.pxi":90
 * 
 * cdef void append_to_cpp_string(void *stream, const char *text, int length):
 *     (<string*>stream)[0] += string(text, length)             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(90,0,__PYX_ERR(0, 90, __pyx_L1_error))
  try {
    __pyx_t_1 = std::string(__pyx_v_text, __pyx_v_length);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 90, __pyx_L1_error)
  }
  (((std::string *)__pyx_v_stream)[0]) += __pyx_t_1;

  /* "src/pyxpdf/helper.pxi":89
 *     return text_string
 * 
 * cdef void append_to_cpp_string(void *stream, const char *text, int length):             # <<<<<<<<<<<<<<
 *     (<string*>stream)[0] += string(text, length)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("pyxpdf.xpdf.append_to_cpp_string", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "pyxpdf/xpdf.pyx":16
 * from pyxpdf.includes.xpdf_error cimport ErrorCategory, setErrorCallback
 * # Dummy callback to silence errors for now.
 * cdef void dummpy_error_callback(void *data, ErrorCategory category, int pos, char *msg):             # <<<<<<<<<<<<<<
 *     return
 * 
 */

static void __pyx_f_6pyxpdf_4xpdf_dummpy_error_callback(CYTHON_UNUSED void *__pyx_v_data, CYTHON_UNUSED ErrorCategory __pyx_v_category, CYTHON_UNUSED int __pyx_v_pos, CYTHON_UNUSED char *__pyx_v_msg) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dummpy_error_callback", 0);
  __Pyx_TraceCall("dummpy_error_callback", __pyx_f[2], 16, 0, __PYX_ERR(2, 16, __pyx_L1_error));

  /* "pyxpdf/xpdf.pyx":17
 * # Dummy callback to silence errors for now.
 * cdef void dummpy_error_callback(void *data, ErrorCategory category, int pos, char *msg):
 *     return             # <<<<<<<<<<<<<<
 * 
 * #setErrorCallback(&dummpy_error_callback, NULL)
 */
  __Pyx_TraceLine(17,0,__PYX_ERR(2, 17, __pyx_L1_error))
  goto __pyx_L0;

  /* "pyxpdf/xpdf.pyx":16
 * from pyxpdf.includes.xpdf_error cimport ErrorCategory, setErrorCallback
 * # Dummy callback to silence errors for now.
 * cdef void dummpy_error_callback(void *data, ErrorCategory category, int pos, char *msg):             # <<<<<<<<<<<<<<
 *     return
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("pyxpdf.xpdf.dummpy_error_callback", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "src/pyxpdf/pdferror.pxi":6
 *     this one.
 *     """
 *     def __init__(self, message):             # <<<<<<<<<<<<<<
 *         super().__init__(message)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_8PDFError_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_8PDFError_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_message = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_message,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_message)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 6, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_message = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 6, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFError.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8PDFError___init__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFError *)__pyx_v_self), __pyx_v_message);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_8PDFError___init__(struct __pyx_obj_6pyxpdf_4xpdf_PDFError *__pyx_v_self, PyObject *__pyx_v_message) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[1], 6, 0, __PYX_ERR(1, 6, __pyx_L1_error));

  /* "src/pyxpdf/pdferror.pxi":7
 *     """
 *     def __init__(self, message):
 *         super().__init__(message)             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(1, 7, __pyx_L1_error))
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFError));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFError));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFError));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_message) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_message);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pyxpdf/pdferror.pxi":6
 *     this one.
 *     """
 *     def __init__(self, message):             # <<<<<<<<<<<<<<
 *         super().__init__(message)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFError.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFError_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_8PDFError_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_8PDFError_3__reduce_cython__, METH_NOARGS, 0};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFError_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8PDFError_2__reduce_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFError *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFError_2__reduce_cython__(struct __pyx_obj_6pyxpdf_4xpdf_PDFError *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__3)
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[4], 1, 0, __PYX_ERR(4, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_TraceLine(5,0,__PYX_ERR(4, 5, __pyx_L1_error))
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __Pyx_TraceLine(6,0,__PYX_ERR(4, 6, __pyx_L1_error))
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(4, 7, __pyx_L1_error))
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __Pyx_TraceLine(8,0,__PYX_ERR(4, 8, __pyx_L1_error))
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(4, 9, __pyx_L1_error))
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_PDFError, (type(self), 0xd41d8cd, None), state
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(4, 11, __pyx_L1_error))
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PDFError, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(4, 12, __pyx_L1_error))
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_PDFError, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_PDFError, (type(self), 0xd41d8cd, state)
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(4, 13, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_PDFError); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_PDFError, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_PDFError, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle_PDFError, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PDFError__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(15,0,__PYX_ERR(4, 15, __pyx_L1_error))
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_PDFError); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFError.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PDFError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PDFError__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFError_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_8PDFError_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_8PDFError_5__setstate_cython__, METH_O, 0};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_8PDFError_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_8PDFError_4__setstate_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_PDFError *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_8PDFError_4__setstate_cython__(struct __pyx_obj_6pyxpdf_4xpdf_PDFError *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__4)
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[4], 16, 0, __PYX_ERR(4, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_PDFError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_PDFError__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(17,0,__PYX_ERR(4, 17, __pyx_L1_error))
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(4, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf___pyx_unpickle_PDFError__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PDFError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PDFError__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.PDFError.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyxpdf/xpdf.pyx":36
 * 
 * 
 * cdef void _text_out_func(void *stream, const char *text, int length):             # <<<<<<<<<<<<<<
 *     (<string*>stream)[0] += string(text, length)
 * 
 */

static void __pyx_f_6pyxpdf_4xpdf__text_out_func(void *__pyx_v_stream, char const *__pyx_v_text, int __pyx_v_length) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __Pyx_RefNannySetupContext("_text_out_func", 0);
  __Pyx_TraceCall("_text_out_func", __pyx_f[2], 36, 0, __PYX_ERR(2, 36, __pyx_L1_error));

  /* "pyxpdf/xpdf.pyx":37
 * 
 * cdef void _text_out_func(void *stream, const char *text, int length):
 *     (<string*>stream)[0] += string(text, length)             # <<<<<<<<<<<<<<
 * 
 * cpdef pdftotext_raw(pdf_file, int start = 0, int end = 0, layout="reading", ownerpass=None, userpass=None, cfg_file=""):
 */
  __Pyx_TraceLine(37,0,__PYX_ERR(2, 37, __pyx_L1_error))
  try {
    __pyx_t_1 = std::string(__pyx_v_text, __pyx_v_length);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 37, __pyx_L1_error)
  }
  (((std::string *)__pyx_v_stream)[0]) += __pyx_t_1;

  /* "pyxpdf/xpdf.pyx":36
 * 
 * 
 * cdef void _text_out_func(void *stream, const char *text, int length):             # <<<<<<<<<<<<<<
 *     (<string*>stream)[0] += string(text, length)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("pyxpdf.xpdf._text_out_func", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "pyxpdf/xpdf.pyx":39
 *     (<string*>stream)[0] += string(text, length)
 * 
 * cpdef pdftotext_raw(pdf_file, int start = 0, int end = 0, layout="reading", ownerpass=None, userpass=None, cfg_file=""):             # <<<<<<<<<<<<<<
 *     cdef string ext_text
 *     cdef int err_code
 */

static PyObject *__pyx_pw_6pyxpdf_4xpdf_1pdftotext_raw(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_pdftotext_raw(PyObject *__pyx_v_pdf_file, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_6pyxpdf_4xpdf_pdftotext_raw *__pyx_optional_args) {
  int __pyx_v_start = ((int)0);
  int __pyx_v_end = ((int)0);
  PyObject *__pyx_v_layout = ((PyObject *)__pyx_n_s_reading);
  PyObject *__pyx_v_ownerpass = ((PyObject *)Py_None);
  PyObject *__pyx_v_userpass = ((PyObject *)Py_None);
  PyObject *__pyx_v_cfg_file = ((PyObject *)__pyx_kp_s_);
  std::string __pyx_v_ext_text;
  int __pyx_v_err_code;
  std::unique_ptr<GString>  __pyx_v_ownerpassG;
  std::unique_ptr<GString>  __pyx_v_userpassG;
  std::unique_ptr<PDFDoc>  __pyx_v_doc;
  std::unique_ptr<TextOutputDev>  __pyx_v_text_dev;
  std::unique_ptr<TextOutputControl>  __pyx_v_control;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_TraceFrameInit(__pyx_codeobj__5)
  __Pyx_RefNannySetupContext("pdftotext_raw", 0);
  __Pyx_TraceCall("pdftotext_raw", __pyx_f[2], 39, 0, __PYX_ERR(2, 39, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_start = __pyx_optional_args->start;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_end = __pyx_optional_args->end;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_layout = __pyx_optional_args->layout;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_ownerpass = __pyx_optional_args->ownerpass;
            if (__pyx_optional_args->__pyx_n > 4) {
              __pyx_v_userpass = __pyx_optional_args->userpass;
              if (__pyx_optional_args->__pyx_n > 5) {
                __pyx_v_cfg_file = __pyx_optional_args->cfg_file;
              }
            }
          }
        }
      }
    }
  }

  /* "pyxpdf/xpdf.pyx":48
 *     cdef unique_ptr[TextOutputControl] control
 * 
 *     if cfg_file:             # <<<<<<<<<<<<<<
 *         Config.load_file(cfg_file)
 *     Config.text_encoding = "UTF-8"
 */
  __Pyx_TraceLine(48,0,__PYX_ERR(2, 48, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_cfg_file); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 48, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pyxpdf/xpdf.pyx":49
 * 
 *     if cfg_file:
 *         Config.load_file(cfg_file)             # <<<<<<<<<<<<<<
 *     Config.text_encoding = "UTF-8"
 * 
 */
    __Pyx_TraceLine(49,0,__PYX_ERR(2, 49, __pyx_L1_error))
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Config); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_load_file); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_cfg_file) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_cfg_file);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyxpdf/xpdf.pyx":48
 *     cdef unique_ptr[TextOutputControl] control
 * 
 *     if cfg_file:             # <<<<<<<<<<<<<<
 *         Config.load_file(cfg_file)
 *     Config.text_encoding = "UTF-8"
 */
  }

  /* "pyxpdf/xpdf.pyx":50
 *     if cfg_file:
 *         Config.load_file(cfg_file)
 *     Config.text_encoding = "UTF-8"             # <<<<<<<<<<<<<<
 * 
 *     if ownerpass:
 */
  __Pyx_TraceLine(50,0,__PYX_ERR(2, 50, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Config); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PyObject_SetAttrStr(__pyx_t_2, __pyx_n_s_text_encoding, __pyx_kp_s_UTF_8) < 0) __PYX_ERR(2, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyxpdf/xpdf.pyx":52
 *     Config.text_encoding = "UTF-8"
 * 
 *     if ownerpass:             # <<<<<<<<<<<<<<
 *         ownerpassG = make_unique[GString](_chars(ownerpass))
 *     if userpass:
 */
  __Pyx_TraceLine(52,0,__PYX_ERR(2, 52, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_ownerpass); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 52, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pyxpdf/xpdf.pyx":53
 * 
 *     if ownerpass:
 *         ownerpassG = make_unique[GString](_chars(ownerpass))             # <<<<<<<<<<<<<<
 *     if userpass:
 *         userpassG = make_unique[GString](_chars(userpass))
 */
    __Pyx_TraceLine(53,0,__PYX_ERR(2, 53, __pyx_L1_error))
    __pyx_v_ownerpassG = std::make_unique<GString>(__pyx_f_6pyxpdf_4xpdf__chars(__pyx_v_ownerpass));

    /* "pyxpdf/xpdf.pyx":52
 *     Config.text_encoding = "UTF-8"
 * 
 *     if ownerpass:             # <<<<<<<<<<<<<<
 *         ownerpassG = make_unique[GString](_chars(ownerpass))
 *     if userpass:
 */
  }

  /* "pyxpdf/xpdf.pyx":54
 *     if ownerpass:
 *         ownerpassG = make_unique[GString](_chars(ownerpass))
 *     if userpass:             # <<<<<<<<<<<<<<
 *         userpassG = make_unique[GString](_chars(userpass))
 * 
 */
  __Pyx_TraceLine(54,0,__PYX_ERR(2, 54, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_userpass); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 54, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pyxpdf/xpdf.pyx":55
 *         ownerpassG = make_unique[GString](_chars(ownerpass))
 *     if userpass:
 *         userpassG = make_unique[GString](_chars(userpass))             # <<<<<<<<<<<<<<
 * 
 *     doc = make_unique[PDFDoc](_chars(pdf_file), ownerpassG.get(), userpassG.get())
 */
    __Pyx_TraceLine(55,0,__PYX_ERR(2, 55, __pyx_L1_error))
    __pyx_v_userpassG = std::make_unique<GString>(__pyx_f_6pyxpdf_4xpdf__chars(__pyx_v_userpass));

    /* "pyxpdf/xpdf.pyx":54
 *     if ownerpass:
 *         ownerpassG = make_unique[GString](_chars(ownerpass))
 *     if userpass:             # <<<<<<<<<<<<<<
 *         userpassG = make_unique[GString](_chars(userpass))
 * 
 */
  }

  /* "pyxpdf/xpdf.pyx":57
 *         userpassG = make_unique[GString](_chars(userpass))
 * 
 *     doc = make_unique[PDFDoc](_chars(pdf_file), ownerpassG.get(), userpassG.get())             # <<<<<<<<<<<<<<
 *     if deref(doc).isOk() == gFalse:
 *         err_code = deref(doc).getErrorCode()
 */
  __Pyx_TraceLine(57,0,__PYX_ERR(2, 57, __pyx_L1_error))
  __pyx_v_doc = std::make_unique<PDFDoc>(__pyx_f_6pyxpdf_4xpdf__chars(__pyx_v_pdf_file), __pyx_v_ownerpassG.get(), __pyx_v_userpassG.get());

  /* "pyxpdf/xpdf.pyx":58
 * 
 *     doc = make_unique[PDFDoc](_chars(pdf_file), ownerpassG.get(), userpassG.get())
 *     if deref(doc).isOk() == gFalse:             # <<<<<<<<<<<<<<
 *         err_code = deref(doc).getErrorCode()
 *         raise PDFError(f"Cannot open pdf file. ErrorCode-{err_code}")
 */
  __Pyx_TraceLine(58,0,__PYX_ERR(2, 58, __pyx_L1_error))
  __pyx_t_1 = (((*__pyx_v_doc).isOk() == gFalse) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pyxpdf/xpdf.pyx":59
 *     doc = make_unique[PDFDoc](_chars(pdf_file), ownerpassG.get(), userpassG.get())
 *     if deref(doc).isOk() == gFalse:
 *         err_code = deref(doc).getErrorCode()             # <<<<<<<<<<<<<<
 *         raise PDFError(f"Cannot open pdf file. ErrorCode-{err_code}")
 * 
 */
    __Pyx_TraceLine(59,0,__PYX_ERR(2, 59, __pyx_L1_error))
    __pyx_v_err_code = (*__pyx_v_doc).getErrorCode();

    /* "pyxpdf/xpdf.pyx":60
 *     if deref(doc).isOk() == gFalse:
 *         err_code = deref(doc).getErrorCode()
 *         raise PDFError(f"Cannot open pdf file. ErrorCode-{err_code}")             # <<<<<<<<<<<<<<
 * 
 *     if deref(doc).okToCopy(ignoreOwnerPW=gFalse) == gFalse:
 */
    __Pyx_TraceLine(60,0,__PYX_ERR(2, 60, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyUnicode_From_int(__pyx_v_err_code, 0, ' ', 'd'); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Cannot_open_pdf_file_ErrorCode, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFError), __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(2, 60, __pyx_L1_error)

    /* "pyxpdf/xpdf.pyx":58
 * 
 *     doc = make_unique[PDFDoc](_chars(pdf_file), ownerpassG.get(), userpassG.get())
 *     if deref(doc).isOk() == gFalse:             # <<<<<<<<<<<<<<
 *         err_code = deref(doc).getErrorCode()
 *         raise PDFError(f"Cannot open pdf file. ErrorCode-{err_code}")
 */
  }

  /* "pyxpdf/xpdf.pyx":62
 *         raise PDFError(f"Cannot open pdf file. ErrorCode-{err_code}")
 * 
 *     if deref(doc).okToCopy(ignoreOwnerPW=gFalse) == gFalse:             # <<<<<<<<<<<<<<
 *         raise PDFError("Copying of text from this document is not allowed.")
 * 
 */
  __Pyx_TraceLine(62,0,__PYX_ERR(2, 62, __pyx_L1_error))
  __pyx_t_1 = (((*__pyx_v_doc).okToCopy(gFalse) == gFalse) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pyxpdf/xpdf.pyx":63
 * 
 *     if deref(doc).okToCopy(ignoreOwnerPW=gFalse) == gFalse:
 *         raise PDFError("Copying of text from this document is not allowed.")             # <<<<<<<<<<<<<<
 * 
 *     if start < 1:
 */
    __Pyx_TraceLine(63,0,__PYX_ERR(2, 63, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFError), __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(2, 63, __pyx_L1_error)

    /* "pyxpdf/xpdf.pyx":62
 *         raise PDFError(f"Cannot open pdf file. ErrorCode-{err_code}")
 * 
 *     if deref(doc).okToCopy(ignoreOwnerPW=gFalse) == gFalse:             # <<<<<<<<<<<<<<
 *         raise PDFError("Copying of text from this document is not allowed.")
 * 
 */
  }

  /* "pyxpdf/xpdf.pyx":65
 *         raise PDFError("Copying of text from this document is not allowed.")
 * 
 *     if start < 1:             # <<<<<<<<<<<<<<
 *         start = 1
 *     if end < 1 or end > deref(doc).getNumPages():
 */
  __Pyx_TraceLine(65,0,__PYX_ERR(2, 65, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v_start < 1) != 0);
  if (__pyx_t_1) {

    /* "pyxpdf/xpdf.pyx":66
 * 
 *     if start < 1:
 *         start = 1             # <<<<<<<<<<<<<<
 *     if end < 1 or end > deref(doc).getNumPages():
 *         end = deref(doc).getNumPages()
 */
    __Pyx_TraceLine(66,0,__PYX_ERR(2, 66, __pyx_L1_error))
    __pyx_v_start = 1;

    /* "pyxpdf/xpdf.pyx":65
 *         raise PDFError("Copying of text from this document is not allowed.")
 * 
 *     if start < 1:             # <<<<<<<<<<<<<<
 *         start = 1
 *     if end < 1 or end > deref(doc).getNumPages():
 */
  }

  /* "pyxpdf/xpdf.pyx":67
 *     if start < 1:
 *         start = 1
 *     if end < 1 or end > deref(doc).getNumPages():             # <<<<<<<<<<<<<<
 *         end = deref(doc).getNumPages()
 * 
 */
  __Pyx_TraceLine(67,0,__PYX_ERR(2, 67, __pyx_L1_error))
  __pyx_t_5 = ((__pyx_v_end < 1) != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_5 = ((__pyx_v_end > (*__pyx_v_doc).getNumPages()) != 0);
  __pyx_t_1 = __pyx_t_5;
  __pyx_L10_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pyxpdf/xpdf.pyx":68
 *         start = 1
 *     if end < 1 or end > deref(doc).getNumPages():
 *         end = deref(doc).getNumPages()             # <<<<<<<<<<<<<<
 * 
 *     control = make_unique[TextOutputControl]()
 */
    __Pyx_TraceLine(68,0,__PYX_ERR(2, 68, __pyx_L1_error))
    __pyx_v_end = (*__pyx_v_doc).getNumPages();

    /* "pyxpdf/xpdf.pyx":67
 *     if start < 1:
 *         start = 1
 *     if end < 1 or end > deref(doc).getNumPages():             # <<<<<<<<<<<<<<
 *         end = deref(doc).getNumPages()
 * 
 */
  }

  /* "pyxpdf/xpdf.pyx":70
 *         end = deref(doc).getNumPages()
 * 
 *     control = make_unique[TextOutputControl]()             # <<<<<<<<<<<<<<
 *     if layout == "table":
 *         deref(control).mode = TextOutputMode.textOutTableLayout
 */
  __Pyx_TraceLine(70,0,__PYX_ERR(2, 70, __pyx_L1_error))
  __pyx_v_control = std::make_unique<TextOutputControl>();

  /* "pyxpdf/xpdf.pyx":71
 * 
 *     control = make_unique[TextOutputControl]()
 *     if layout == "table":             # <<<<<<<<<<<<<<
 *         deref(control).mode = TextOutputMode.textOutTableLayout
 *     elif layout == "physical":
 */
  __Pyx_TraceLine(71,0,__PYX_ERR(2, 71, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_layout, __pyx_n_s_table, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 71, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pyxpdf/xpdf.pyx":72
 *     control = make_unique[TextOutputControl]()
 *     if layout == "table":
 *         deref(control).mode = TextOutputMode.textOutTableLayout             # <<<<<<<<<<<<<<
 *     elif layout == "physical":
 *         deref(control).mode = TextOutputMode.textOutPhysLayout
 */
    __Pyx_TraceLine(72,0,__PYX_ERR(2, 72, __pyx_L1_error))
    (*__pyx_v_control).mode = textOutTableLayout;

    /* "pyxpdf/xpdf.pyx":71
 * 
 *     control = make_unique[TextOutputControl]()
 *     if layout == "table":             # <<<<<<<<<<<<<<
 *         deref(control).mode = TextOutputMode.textOutTableLayout
 *     elif layout == "physical":
 */
    goto __pyx_L12;
  }

  /* "pyxpdf/xpdf.pyx":73
 *     if layout == "table":
 *         deref(control).mode = TextOutputMode.textOutTableLayout
 *     elif layout == "physical":             # <<<<<<<<<<<<<<
 *         deref(control).mode = TextOutputMode.textOutPhysLayout
 *     elif layout == "simple":
 */
  __Pyx_TraceLine(73,0,__PYX_ERR(2, 73, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_layout, __pyx_n_s_physical, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 73, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pyxpdf/xpdf.pyx":74
 *         deref(control).mode = TextOutputMode.textOutTableLayout
 *     elif layout == "physical":
 *         deref(control).mode = TextOutputMode.textOutPhysLayout             # <<<<<<<<<<<<<<
 *     elif layout == "simple":
 *         deref(control).mode = TextOutputMode.textOutSimpleLayout
 */
    __Pyx_TraceLine(74,0,__PYX_ERR(2, 74, __pyx_L1_error))
    (*__pyx_v_control).mode = textOutPhysLayout;

    /* "pyxpdf/xpdf.pyx":73
 *     if layout == "table":
 *         deref(control).mode = TextOutputMode.textOutTableLayout
 *     elif layout == "physical":             # <<<<<<<<<<<<<<
 *         deref(control).mode = TextOutputMode.textOutPhysLayout
 *     elif layout == "simple":
 */
    goto __pyx_L12;
  }

  /* "pyxpdf/xpdf.pyx":75
 *     elif layout == "physical":
 *         deref(control).mode = TextOutputMode.textOutPhysLayout
 *     elif layout == "simple":             # <<<<<<<<<<<<<<
 *         deref(control).mode = TextOutputMode.textOutSimpleLayout
 *     elif layout == "lineprinter":
 */
  __Pyx_TraceLine(75,0,__PYX_ERR(2, 75, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_layout, __pyx_n_s_simple, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 75, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pyxpdf/xpdf.pyx":76
 *         deref(control).mode = TextOutputMode.textOutPhysLayout
 *     elif layout == "simple":
 *         deref(control).mode = TextOutputMode.textOutSimpleLayout             # <<<<<<<<<<<<<<
 *     elif layout == "lineprinter":
 *         deref(control).mode = TextOutputMode.textOutLinePrinter
 */
    __Pyx_TraceLine(76,0,__PYX_ERR(2, 76, __pyx_L1_error))
    (*__pyx_v_control).mode = textOutSimpleLayout;

    /* "pyxpdf/xpdf.pyx":75
 *     elif layout == "physical":
 *         deref(control).mode = TextOutputMode.textOutPhysLayout
 *     elif layout == "simple":             # <<<<<<<<<<<<<<
 *         deref(control).mode = TextOutputMode.textOutSimpleLayout
 *     elif layout == "lineprinter":
 */
    goto __pyx_L12;
  }

  /* "pyxpdf/xpdf.pyx":77
 *     elif layout == "simple":
 *         deref(control).mode = TextOutputMode.textOutSimpleLayout
 *     elif layout == "lineprinter":             # <<<<<<<<<<<<<<
 *         deref(control).mode = TextOutputMode.textOutLinePrinter
 *     elif layout == "raw":
 */
  __Pyx_TraceLine(77,0,__PYX_ERR(2, 77, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_layout, __pyx_n_s_lineprinter, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 77, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pyxpdf/xpdf.pyx":78
 *         deref(control).mode = TextOutputMode.textOutSimpleLayout
 *     elif layout == "lineprinter":
 *         deref(control).mode = TextOutputMode.textOutLinePrinter             # <<<<<<<<<<<<<<
 *     elif layout == "raw":
 *         deref(control).mode = TextOutputMode.textOutRawOrder
 */
    __Pyx_TraceLine(78,0,__PYX_ERR(2, 78, __pyx_L1_error))
    (*__pyx_v_control).mode = textOutLinePrinter;

    /* "pyxpdf/xpdf.pyx":77
 *     elif layout == "simple":
 *         deref(control).mode = TextOutputMode.textOutSimpleLayout
 *     elif layout == "lineprinter":             # <<<<<<<<<<<<<<
 *         deref(control).mode = TextOutputMode.textOutLinePrinter
 *     elif layout == "raw":
 */
    goto __pyx_L12;
  }

  /* "pyxpdf/xpdf.pyx":79
 *     elif layout == "lineprinter":
 *         deref(control).mode = TextOutputMode.textOutLinePrinter
 *     elif layout == "raw":             # <<<<<<<<<<<<<<
 *         deref(control).mode = TextOutputMode.textOutRawOrder
 *     elif layout == "reading":
 */
  __Pyx_TraceLine(79,0,__PYX_ERR(2, 79, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_layout, __pyx_n_s_raw, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 79, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pyxpdf/xpdf.pyx":80
 *         deref(control).mode = TextOutputMode.textOutLinePrinter
 *     elif layout == "raw":
 *         deref(control).mode = TextOutputMode.textOutRawOrder             # <<<<<<<<<<<<<<
 *     elif layout == "reading":
 *         deref(control).mode = TextOutputMode.textOutReadingOrder
 */
    __Pyx_TraceLine(80,0,__PYX_ERR(2, 80, __pyx_L1_error))
    (*__pyx_v_control).mode = textOutRawOrder;

    /* "pyxpdf/xpdf.pyx":79
 *     elif layout == "lineprinter":
 *         deref(control).mode = TextOutputMode.textOutLinePrinter
 *     elif layout == "raw":             # <<<<<<<<<<<<<<
 *         deref(control).mode = TextOutputMode.textOutRawOrder
 *     elif layout == "reading":
 */
    goto __pyx_L12;
  }

  /* "pyxpdf/xpdf.pyx":81
 *     elif layout == "raw":
 *         deref(control).mode = TextOutputMode.textOutRawOrder
 *     elif layout == "reading":             # <<<<<<<<<<<<<<
 *         deref(control).mode = TextOutputMode.textOutReadingOrder
 *     else:
 */
  __Pyx_TraceLine(81,0,__PYX_ERR(2, 81, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_layout, __pyx_n_s_reading, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 81, __pyx_L1_error)
  if (likely(__pyx_t_1)) {

    /* "pyxpdf/xpdf.pyx":82
 *         deref(control).mode = TextOutputMode.textOutRawOrder
 *     elif layout == "reading":
 *         deref(control).mode = TextOutputMode.textOutReadingOrder             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError(f"Unknown layout - {layout}")
 */
    __Pyx_TraceLine(82,0,__PYX_ERR(2, 82, __pyx_L1_error))
    (*__pyx_v_control).mode = textOutReadingOrder;

    /* "pyxpdf/xpdf.pyx":81
 *     elif layout == "raw":
 *         deref(control).mode = TextOutputMode.textOutRawOrder
 *     elif layout == "reading":             # <<<<<<<<<<<<<<
 *         deref(control).mode = TextOutputMode.textOutReadingOrder
 *     else:
 */
    goto __pyx_L12;
  }

  /* "pyxpdf/xpdf.pyx":84
 *         deref(control).mode = TextOutputMode.textOutReadingOrder
 *     else:
 *         raise ValueError(f"Unknown layout - {layout}")             # <<<<<<<<<<<<<<
 * 
 *     text_dev = make_unique[TextOutputDev](&_text_out_func, &ext_text, control.get())
 */
  __Pyx_TraceLine(84,0,__PYX_ERR(2, 84, __pyx_L1_error))
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_layout, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Unknown_layout, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(2, 84, __pyx_L1_error)
  }
  __pyx_L12:;

  /* "pyxpdf/xpdf.pyx":86
 *         raise ValueError(f"Unknown layout - {layout}")
 * 
 *     text_dev = make_unique[TextOutputDev](&_text_out_func, &ext_text, control.get())             # <<<<<<<<<<<<<<
 *     if deref(text_dev).isOk() == gFalse:
 *         raise PDFError("Error in pdf options")
 */
  __Pyx_TraceLine(86,0,__PYX_ERR(2, 86, __pyx_L1_error))
  __pyx_v_text_dev = std::make_unique<TextOutputDev>((&__pyx_f_6pyxpdf_4xpdf__text_out_func), (&__pyx_v_ext_text), __pyx_v_control.get());

  /* "pyxpdf/xpdf.pyx":87
 * 
 *     text_dev = make_unique[TextOutputDev](&_text_out_func, &ext_text, control.get())
 *     if deref(text_dev).isOk() == gFalse:             # <<<<<<<<<<<<<<
 *         raise PDFError("Error in pdf options")
 * 
 */
  __Pyx_TraceLine(87,0,__PYX_ERR(2, 87, __pyx_L1_error))
  __pyx_t_1 = (((*__pyx_v_text_dev).isOk() == gFalse) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pyxpdf/xpdf.pyx":88
 *     text_dev = make_unique[TextOutputDev](&_text_out_func, &ext_text, control.get())
 *     if deref(text_dev).isOk() == gFalse:
 *         raise PDFError("Error in pdf options")             # <<<<<<<<<<<<<<
 * 
 *     deref(doc).displayPages(text_dev.get(), start, end, 72, 72, 0, gFalse, gTrue, gFalse)
 */
    __Pyx_TraceLine(88,0,__PYX_ERR(2, 88, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFError), __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(2, 88, __pyx_L1_error)

    /* "pyxpdf/xpdf.pyx":87
 * 
 *     text_dev = make_unique[TextOutputDev](&_text_out_func, &ext_text, control.get())
 *     if deref(text_dev).isOk() == gFalse:             # <<<<<<<<<<<<<<
 *         raise PDFError("Error in pdf options")
 * 
 */
  }

  /* "pyxpdf/xpdf.pyx":90
 *         raise PDFError("Error in pdf options")
 * 
 *     deref(doc).displayPages(text_dev.get(), start, end, 72, 72, 0, gFalse, gTrue, gFalse)             # <<<<<<<<<<<<<<
 *     return ext_text
 * 
 */
  __Pyx_TraceLine(90,0,__PYX_ERR(2, 90, __pyx_L1_error))
  (*__pyx_v_doc).displayPages(__pyx_v_text_dev.get(), __pyx_v_start, __pyx_v_end, 72.0, 72.0, 0, gFalse, gTrue, gFalse, NULL);

  /* "pyxpdf/xpdf.pyx":91
 * 
 *     deref(doc).displayPages(text_dev.get(), start, end, 72, 72, 0, gFalse, gTrue, gFalse)
 *     return ext_text             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(91,0,__PYX_ERR(2, 91, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_ext_text); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyxpdf/xpdf.pyx":39
 *     (<string*>stream)[0] += string(text, length)
 * 
 * cpdef pdftotext_raw(pdf_file, int start = 0, int end = 0, layout="reading", ownerpass=None, userpass=None, cfg_file=""):             # <<<<<<<<<<<<<<
 *     cdef string ext_text
 *     cdef int err_code
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyxpdf.xpdf.pdftotext_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_1pdftotext_raw(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_1pdftotext_raw = {"pdftotext_raw", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_1pdftotext_raw, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_1pdftotext_raw(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pdf_file = 0;
  int __pyx_v_start;
  int __pyx_v_end;
  PyObject *__pyx_v_layout = 0;
  PyObject *__pyx_v_ownerpass = 0;
  PyObject *__pyx_v_userpass = 0;
  PyObject *__pyx_v_cfg_file = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pdftotext_raw (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pdf_file,&__pyx_n_s_start,&__pyx_n_s_end,&__pyx_n_s_layout,&__pyx_n_s_ownerpass,&__pyx_n_s_userpass,&__pyx_n_s_cfg_file,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_s_reading);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    values[6] = ((PyObject *)__pyx_kp_s_);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pdf_file)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_start);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_end);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_layout);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ownerpass);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_userpass);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cfg_file);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pdftotext_raw") < 0)) __PYX_ERR(2, 39, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pdf_file = values[0];
    if (values[1]) {
      __pyx_v_start = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_start == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 39, __pyx_L3_error)
    } else {
      __pyx_v_start = ((int)0);
    }
    if (values[2]) {
      __pyx_v_end = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_end == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 39, __pyx_L3_error)
    } else {
      __pyx_v_end = ((int)0);
    }
    __pyx_v_layout = values[3];
    __pyx_v_ownerpass = values[4];
    __pyx_v_userpass = values[5];
    __pyx_v_cfg_file = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pdftotext_raw", 0, 1, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 39, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.pdftotext_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_pdftotext_raw(__pyx_self, __pyx_v_pdf_file, __pyx_v_start, __pyx_v_end, __pyx_v_layout, __pyx_v_ownerpass, __pyx_v_userpass, __pyx_v_cfg_file);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_pdftotext_raw(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pdf_file, int __pyx_v_start, int __pyx_v_end, PyObject *__pyx_v_layout, PyObject *__pyx_v_ownerpass, PyObject *__pyx_v_userpass, PyObject *__pyx_v_cfg_file) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6pyxpdf_4xpdf_pdftotext_raw __pyx_t_2;
  __Pyx_TraceFrameInit(__pyx_codeobj__5)
  __Pyx_RefNannySetupContext("pdftotext_raw", 0);
  __Pyx_TraceCall("pdftotext_raw (wrapper)", __pyx_f[2], 39, 0, __PYX_ERR(2, 39, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 6;
  __pyx_t_2.start = __pyx_v_start;
  __pyx_t_2.end = __pyx_v_end;
  __pyx_t_2.layout = __pyx_v_layout;
  __pyx_t_2.ownerpass = __pyx_v_ownerpass;
  __pyx_t_2.userpass = __pyx_v_userpass;
  __pyx_t_2.cfg_file = __pyx_v_cfg_file;
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_pdftotext_raw(__pyx_v_pdf_file, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.pdftotext_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":11
 *     cdef GlobalParams* _global
 * 
 *     def load_file(self, cfg_path):             # <<<<<<<<<<<<<<
 *         global globalParams
 *         # delete if already init
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_1load_file(PyObject *__pyx_v_self, PyObject *__pyx_v_cfg_path); /*proto*/
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_18GlobalParamsConfig_1load_file = {"load_file", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_1load_file, METH_O, 0};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_1load_file(PyObject *__pyx_v_self, PyObject *__pyx_v_cfg_path) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load_file (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_load_file(((struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *)__pyx_v_self), ((PyObject *)__pyx_v_cfg_path));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_load_file(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_cfg_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  GlobalParams *__pyx_t_3;
  __Pyx_TraceFrameInit(__pyx_codeobj__8)
  __Pyx_RefNannySetupContext("load_file", 0);
  __Pyx_TraceCall("load_file", __pyx_f[3], 11, 0, __PYX_ERR(3, 11, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":14
 *         global globalParams
 *         # delete if already init
 *         if globalParams is not NULL:             # <<<<<<<<<<<<<<
 *             del globalParams
 * 
 */
  __Pyx_TraceLine(14,0,__PYX_ERR(3, 14, __pyx_L1_error))
  __pyx_t_1 = ((globalParams != NULL) != 0);
  if (__pyx_t_1) {

    /* "src/pyxpdf/globalconfig.pxi":15
 *         # delete if already init
 *         if globalParams is not NULL:
 *             del globalParams             # <<<<<<<<<<<<<<
 * 
 *         if cfg_path == None:
 */
    __Pyx_TraceLine(15,0,__PYX_ERR(3, 15, __pyx_L1_error))
    delete globalParams;

    /* "src/pyxpdf/globalconfig.pxi":14
 *         global globalParams
 *         # delete if already init
 *         if globalParams is not NULL:             # <<<<<<<<<<<<<<
 *             del globalParams
 * 
 */
  }

  /* "src/pyxpdf/globalconfig.pxi":17
 *             del globalParams
 * 
 *         if cfg_path == None:             # <<<<<<<<<<<<<<
 *             self._global = new GlobalParams(<const char*>NULL)
 *         else:
 */
  __Pyx_TraceLine(17,0,__PYX_ERR(3, 17, __pyx_L1_error))
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_cfg_path, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 17, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(3, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_1) {

    /* "src/pyxpdf/globalconfig.pxi":18
 * 
 *         if cfg_path == None:
 *             self._global = new GlobalParams(<const char*>NULL)             # <<<<<<<<<<<<<<
 *         else:
 *             self._global = new GlobalParams(_chars(cfg_path))
 */
    __Pyx_TraceLine(18,0,__PYX_ERR(3, 18, __pyx_L1_error))
    __pyx_v_self->_global = new GlobalParams(((char const *)NULL));

    /* "src/pyxpdf/globalconfig.pxi":17
 *             del globalParams
 * 
 *         if cfg_path == None:             # <<<<<<<<<<<<<<
 *             self._global = new GlobalParams(<const char*>NULL)
 *         else:
 */
    goto __pyx_L4;
  }

  /* "src/pyxpdf/globalconfig.pxi":20
 *             self._global = new GlobalParams(<const char*>NULL)
 *         else:
 *             self._global = new GlobalParams(_chars(cfg_path))             # <<<<<<<<<<<<<<
 * 
 *         if self._global == NULL:
 */
  __Pyx_TraceLine(20,0,__PYX_ERR(3, 20, __pyx_L1_error))
  /*else*/ {
    __pyx_v_self->_global = new GlobalParams(__pyx_f_6pyxpdf_4xpdf__chars(__pyx_v_cfg_path));
  }
  __pyx_L4:;

  /* "src/pyxpdf/globalconfig.pxi":22
 *             self._global = new GlobalParams(_chars(cfg_path))
 * 
 *         if self._global == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError("Cannot create GlobalParamsConfig object.")
 * 
 */
  __Pyx_TraceLine(22,0,__PYX_ERR(3, 22, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v_self->_global == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "src/pyxpdf/globalconfig.pxi":23
 * 
 *         if self._global == NULL:
 *             raise MemoryError("Cannot create GlobalParamsConfig object.")             # <<<<<<<<<<<<<<
 * 
 *         globalParams = self._global
 */
    __Pyx_TraceLine(23,0,__PYX_ERR(3, 23, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 23, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(3, 23, __pyx_L1_error)

    /* "src/pyxpdf/globalconfig.pxi":22
 *             self._global = new GlobalParams(_chars(cfg_path))
 * 
 *         if self._global == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError("Cannot create GlobalParamsConfig object.")
 * 
 */
  }

  /* "src/pyxpdf/globalconfig.pxi":25
 *             raise MemoryError("Cannot create GlobalParamsConfig object.")
 * 
 *         globalParams = self._global             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(25,0,__PYX_ERR(3, 25, __pyx_L1_error))
  __pyx_t_3 = __pyx_v_self->_global;
  globalParams = __pyx_t_3;

  /* "src/pyxpdf/globalconfig.pxi":11
 *     cdef GlobalParams* _global
 * 
 *     def load_file(self, cfg_path):             # <<<<<<<<<<<<<<
 *         global globalParams
 *         # delete if already init
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyxpdf.xpdf.GlobalParamsConfig.load_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":28
 * 
 * 
 *     def __cinit__(self, cfg_path=None):             # <<<<<<<<<<<<<<
 *         self.load_file(cfg_path)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_cfg_path = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cfg_path,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cfg_path);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(3, 28, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_cfg_path = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 28, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.GlobalParamsConfig.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_2__cinit__(((struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *)__pyx_v_self), __pyx_v_cfg_path);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_2__cinit__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_cfg_path) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[3], 28, 0, __PYX_ERR(3, 28, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":29
 * 
 *     def __cinit__(self, cfg_path=None):
 *         self.load_file(cfg_path)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_TraceLine(29,0,__PYX_ERR(3, 29, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_load_file); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_cfg_path) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_cfg_path);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pyxpdf/globalconfig.pxi":28
 * 
 * 
 *     def __cinit__(self, cfg_path=None):             # <<<<<<<<<<<<<<
 *         self.load_file(cfg_path)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyxpdf.xpdf.GlobalParamsConfig.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":31
 *         self.load_file(cfg_path)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         global globalParams
 *         globalParams = NULL
 */

/* Python wrapper */
static void __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_4__dealloc__(((struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_4__dealloc__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);
  __Pyx_TraceCall("__dealloc__", __pyx_f[3], 31, 0, __PYX_ERR(3, 31, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":33
 *     def __dealloc__(self):
 *         global globalParams
 *         globalParams = NULL             # <<<<<<<<<<<<<<
 *         del self._global
 * 
 */
  __Pyx_TraceLine(33,0,__PYX_ERR(3, 33, __pyx_L1_error))
  globalParams = NULL;

  /* "src/pyxpdf/globalconfig.pxi":34
 *         global globalParams
 *         globalParams = NULL
 *         del self._global             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(34,0,__PYX_ERR(3, 34, __pyx_L1_error))
  delete __pyx_v_self->_global;

  /* "src/pyxpdf/globalconfig.pxi":31
 *         self.load_file(cfg_path)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         global globalParams
 *         globalParams = NULL
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("pyxpdf.xpdf.GlobalParamsConfig.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "src/pyxpdf/globalconfig.pxi":37
 * 
 * 
 *     def setup_base_fonts(self, dir):             # <<<<<<<<<<<<<<
 *         self._global.setupBaseFonts(_chars(dir))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_7setup_base_fonts(PyObject *__pyx_v_self, PyObject *__pyx_v_dir); /*proto*/
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_18GlobalParamsConfig_7setup_base_fonts = {"setup_base_fonts", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_7setup_base_fonts, METH_O, 0};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_7setup_base_fonts(PyObject *__pyx_v_self, PyObject *__pyx_v_dir) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setup_base_fonts (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_6setup_base_fonts(((struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *)__pyx_v_self), ((PyObject *)__pyx_v_dir));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_6setup_base_fonts(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_dir) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_TraceFrameInit(__pyx_codeobj__10)
  __Pyx_RefNannySetupContext("setup_base_fonts", 0);
  __Pyx_TraceCall("setup_base_fonts", __pyx_f[3], 37, 0, __PYX_ERR(3, 37, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":38
 * 
 *     def setup_base_fonts(self, dir):
 *         self._global.setupBaseFonts(_chars(dir))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(38,0,__PYX_ERR(3, 38, __pyx_L1_error))
  __pyx_v_self->_global->setupBaseFonts(__pyx_f_6pyxpdf_4xpdf__chars(__pyx_v_dir));

  /* "src/pyxpdf/globalconfig.pxi":37
 * 
 * 
 *     def setup_base_fonts(self, dir):             # <<<<<<<<<<<<<<
 *         self._global.setupBaseFonts(_chars(dir))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.GlobalParamsConfig.setup_base_fonts", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":41
 * 
 *     @property
 *     def base_dir(self):             # <<<<<<<<<<<<<<
 *         return GString_to_unicode(self._global.getBaseDir())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_8base_dir_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_8base_dir_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_8base_dir___get__(((struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_8base_dir___get__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[3], 41, 0, __PYX_ERR(3, 41, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":42
 *     @property
 *     def base_dir(self):
 *         return GString_to_unicode(self._global.getBaseDir())             # <<<<<<<<<<<<<<
 * 
 *     @base_dir.setter
 */
  __Pyx_TraceLine(42,0,__PYX_ERR(3, 42, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GString_to_unicode(__pyx_v_self->_global->getBaseDir()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/globalconfig.pxi":41
 * 
 *     @property
 *     def base_dir(self):             # <<<<<<<<<<<<<<
 *         return GString_to_unicode(self._global.getBaseDir())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.GlobalParamsConfig.base_dir.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":45
 * 
 *     @base_dir.setter
 *     def base_dir(self, dir):             # <<<<<<<<<<<<<<
 *         self._global.setBaseDir(_chars(dir))
 * 
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_8base_dir_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_dir); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_8base_dir_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_dir) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_8base_dir_2__set__(((struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *)__pyx_v_self), ((PyObject *)__pyx_v_dir));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_8base_dir_2__set__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_dir) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[3], 45, 0, __PYX_ERR(3, 45, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":46
 *     @base_dir.setter
 *     def base_dir(self, dir):
 *         self._global.setBaseDir(_chars(dir))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(46,0,__PYX_ERR(3, 46, __pyx_L1_error))
  __pyx_v_self->_global->setBaseDir(__pyx_f_6pyxpdf_4xpdf__chars(__pyx_v_dir));

  /* "src/pyxpdf/globalconfig.pxi":45
 * 
 *     @base_dir.setter
 *     def base_dir(self, dir):             # <<<<<<<<<<<<<<
 *         self._global.setBaseDir(_chars(dir))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.GlobalParamsConfig.base_dir.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":49
 * 
 * 
 *     def map_name_to_unicode(self, char_name):             # <<<<<<<<<<<<<<
 *         return self._global.mapNameToUnicode(_chars(char_name))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_9map_name_to_unicode(PyObject *__pyx_v_self, PyObject *__pyx_v_char_name); /*proto*/
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_18GlobalParamsConfig_9map_name_to_unicode = {"map_name_to_unicode", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_9map_name_to_unicode, METH_O, 0};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_9map_name_to_unicode(PyObject *__pyx_v_self, PyObject *__pyx_v_char_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("map_name_to_unicode (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_8map_name_to_unicode(((struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *)__pyx_v_self), ((PyObject *)__pyx_v_char_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_8map_name_to_unicode(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_char_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__11)
  __Pyx_RefNannySetupContext("map_name_to_unicode", 0);
  __Pyx_TraceCall("map_name_to_unicode", __pyx_f[3], 49, 0, __PYX_ERR(3, 49, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":50
 * 
 *     def map_name_to_unicode(self, char_name):
 *         return self._global.mapNameToUnicode(_chars(char_name))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(50,0,__PYX_ERR(3, 50, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_Unicode(__pyx_v_self->_global->mapNameToUnicode(__pyx_f_6pyxpdf_4xpdf__chars(__pyx_v_char_name))); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/globalconfig.pxi":49
 * 
 * 
 *     def map_name_to_unicode(self, char_name):             # <<<<<<<<<<<<<<
 *         return self._global.mapNameToUnicode(_chars(char_name))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.GlobalParamsConfig.map_name_to_unicode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":54
 * 
 *     @property
 *     def ps_paper_width(self):             # <<<<<<<<<<<<<<
 *         return self._global.getPSPaperWidth()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_14ps_paper_width_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_14ps_paper_width_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_14ps_paper_width___get__(((struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_14ps_paper_width___get__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[3], 54, 0, __PYX_ERR(3, 54, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":55
 *     @property
 *     def ps_paper_width(self):
 *         return self._global.getPSPaperWidth()             # <<<<<<<<<<<<<<
 * 
 *     @ps_paper_width.setter
 */
  __Pyx_TraceLine(55,0,__PYX_ERR(3, 55, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_global->getPSPaperWidth()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/globalconfig.pxi":54
 * 
 *     @property
 *     def ps_paper_width(self):             # <<<<<<<<<<<<<<
 *         return self._global.getPSPaperWidth()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.GlobalParamsConfig.ps_paper_width.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":58
 * 
 *     @ps_paper_width.setter
 *     def ps_paper_width(self, int width):             # <<<<<<<<<<<<<<
 *         self._global.setPSPaperWidth(width)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_14ps_paper_width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_width); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_14ps_paper_width_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_width) {
  int __pyx_v_width;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_width); {
    __pyx_v_width = __Pyx_PyInt_As_int(__pyx_arg_width); if (unlikely((__pyx_v_width == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 58, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.GlobalParamsConfig.ps_paper_width.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_14ps_paper_width_2__set__(((struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *)__pyx_v_self), ((int)__pyx_v_width));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_14ps_paper_width_2__set__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self, int __pyx_v_width) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[3], 58, 0, __PYX_ERR(3, 58, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":59
 *     @ps_paper_width.setter
 *     def ps_paper_width(self, int width):
 *         self._global.setPSPaperWidth(width)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(59,0,__PYX_ERR(3, 59, __pyx_L1_error))
  __pyx_v_self->_global->setPSPaperWidth(__pyx_v_width);

  /* "src/pyxpdf/globalconfig.pxi":58
 * 
 *     @ps_paper_width.setter
 *     def ps_paper_width(self, int width):             # <<<<<<<<<<<<<<
 *         self._global.setPSPaperWidth(width)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.GlobalParamsConfig.ps_paper_width.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":63
 * 
 *     @property
 *     def ps_paper_height(self):             # <<<<<<<<<<<<<<
 *         return self._global.getPSPaperHeight()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_15ps_paper_height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_15ps_paper_height_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_15ps_paper_height___get__(((struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_15ps_paper_height___get__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[3], 63, 0, __PYX_ERR(3, 63, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":64
 *     @property
 *     def ps_paper_height(self):
 *         return self._global.getPSPaperHeight()             # <<<<<<<<<<<<<<
 * 
 *     @ps_paper_height.setter
 */
  __Pyx_TraceLine(64,0,__PYX_ERR(3, 64, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_global->getPSPaperHeight()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/globalconfig.pxi":63
 * 
 *     @property
 *     def ps_paper_height(self):             # <<<<<<<<<<<<<<
 *         return self._global.getPSPaperHeight()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.GlobalParamsConfig.ps_paper_height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":67
 * 
 *     @ps_paper_height.setter
 *     def ps_paper_height(self, int height):             # <<<<<<<<<<<<<<
 *         self._global.setPSPaperHeight(height)
 * 
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_15ps_paper_height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_height); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_15ps_paper_height_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_height) {
  int __pyx_v_height;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_height); {
    __pyx_v_height = __Pyx_PyInt_As_int(__pyx_arg_height); if (unlikely((__pyx_v_height == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 67, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.GlobalParamsConfig.ps_paper_height.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_15ps_paper_height_2__set__(((struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *)__pyx_v_self), ((int)__pyx_v_height));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_15ps_paper_height_2__set__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self, int __pyx_v_height) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[3], 67, 0, __PYX_ERR(3, 67, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":68
 *     @ps_paper_height.setter
 *     def ps_paper_height(self, int height):
 *         self._global.setPSPaperHeight(height)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(68,0,__PYX_ERR(3, 68, __pyx_L1_error))
  __pyx_v_self->_global->setPSPaperHeight(__pyx_v_height);

  /* "src/pyxpdf/globalconfig.pxi":67
 * 
 *     @ps_paper_height.setter
 *     def ps_paper_height(self, int height):             # <<<<<<<<<<<<<<
 *         self._global.setPSPaperHeight(height)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.GlobalParamsConfig.ps_paper_height.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":72
 * 
 *     @property
 *     def text_encoding(self):             # <<<<<<<<<<<<<<
 *         return GString_to_unicode(self._global.getTextEncodingName())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_13text_encoding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_13text_encoding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_13text_encoding___get__(((struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_13text_encoding___get__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[3], 72, 0, __PYX_ERR(3, 72, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":73
 *     @property
 *     def text_encoding(self):
 *         return GString_to_unicode(self._global.getTextEncodingName())             # <<<<<<<<<<<<<<
 * 
 *     @text_encoding.setter
 */
  __Pyx_TraceLine(73,0,__PYX_ERR(3, 73, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GString_to_unicode(__pyx_v_self->_global->getTextEncodingName()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/globalconfig.pxi":72
 * 
 *     @property
 *     def text_encoding(self):             # <<<<<<<<<<<<<<
 *         return GString_to_unicode(self._global.getTextEncodingName())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.GlobalParamsConfig.text_encoding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":76
 * 
 *     @text_encoding.setter
 *     def text_encoding(self, encoding):             # <<<<<<<<<<<<<<
 *         self._global.setTextEncoding(_chars(encoding))
 * 
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_13text_encoding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_encoding); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_13text_encoding_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_encoding) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_13text_encoding_2__set__(((struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *)__pyx_v_self), ((PyObject *)__pyx_v_encoding));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_13text_encoding_2__set__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_encoding) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[3], 76, 0, __PYX_ERR(3, 76, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":77
 *     @text_encoding.setter
 *     def text_encoding(self, encoding):
 *         self._global.setTextEncoding(_chars(encoding))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(77,0,__PYX_ERR(3, 77, __pyx_L1_error))
  __pyx_v_self->_global->setTextEncoding(__pyx_f_6pyxpdf_4xpdf__chars(__pyx_v_encoding));

  /* "src/pyxpdf/globalconfig.pxi":76
 * 
 *     @text_encoding.setter
 *     def text_encoding(self, encoding):             # <<<<<<<<<<<<<<
 *         self._global.setTextEncoding(_chars(encoding))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.GlobalParamsConfig.text_encoding.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":81
 * 
 *     @property
 *     def text_eol(self):             # <<<<<<<<<<<<<<
 *         cdef EndOfLineKind eol = self._global.getTextEOL()
 *         if eol == EndOfLineKind.eolUnix:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_8text_eol_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_8text_eol_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_8text_eol___get__(((struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_8text_eol___get__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self) {
  EndOfLineKind __pyx_v_eol;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[3], 81, 0, __PYX_ERR(3, 81, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":82
 *     @property
 *     def text_eol(self):
 *         cdef EndOfLineKind eol = self._global.getTextEOL()             # <<<<<<<<<<<<<<
 *         if eol == EndOfLineKind.eolUnix:
 *             return "unix"
 */
  __Pyx_TraceLine(82,0,__PYX_ERR(3, 82, __pyx_L1_error))
  __pyx_v_eol = __pyx_v_self->_global->getTextEOL();

  /* "src/pyxpdf/globalconfig.pxi":83
 *     def text_eol(self):
 *         cdef EndOfLineKind eol = self._global.getTextEOL()
 *         if eol == EndOfLineKind.eolUnix:             # <<<<<<<<<<<<<<
 *             return "unix"
 *         elif eol == EndOfLineKind.eolDOS:
 */
  __Pyx_TraceLine(83,0,__PYX_ERR(3, 83, __pyx_L1_error))
  switch (__pyx_v_eol) {
    case eolUnix:

    /* "src/pyxpdf/globalconfig.pxi":84
 *         cdef EndOfLineKind eol = self._global.getTextEOL()
 *         if eol == EndOfLineKind.eolUnix:
 *             return "unix"             # <<<<<<<<<<<<<<
 *         elif eol == EndOfLineKind.eolDOS:
 *             return "dos"
 */
    __Pyx_TraceLine(84,0,__PYX_ERR(3, 84, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_unix);
    __pyx_r = __pyx_n_s_unix;
    goto __pyx_L0;

    /* "src/pyxpdf/globalconfig.pxi":83
 *     def text_eol(self):
 *         cdef EndOfLineKind eol = self._global.getTextEOL()
 *         if eol == EndOfLineKind.eolUnix:             # <<<<<<<<<<<<<<
 *             return "unix"
 *         elif eol == EndOfLineKind.eolDOS:
 */
    break;
    case eolDOS:

    /* "src/pyxpdf/globalconfig.pxi":86
 *             return "unix"
 *         elif eol == EndOfLineKind.eolDOS:
 *             return "dos"             # <<<<<<<<<<<<<<
 *         else:
 *             return "mac"
 */
    __Pyx_TraceLine(86,0,__PYX_ERR(3, 86, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_dos);
    __pyx_r = __pyx_n_s_dos;
    goto __pyx_L0;

    /* "src/pyxpdf/globalconfig.pxi":85
 *         if eol == EndOfLineKind.eolUnix:
 *             return "unix"
 *         elif eol == EndOfLineKind.eolDOS:             # <<<<<<<<<<<<<<
 *             return "dos"
 *         else:
 */
    break;
    default:

    /* "src/pyxpdf/globalconfig.pxi":88
 *             return "dos"
 *         else:
 *             return "mac"             # <<<<<<<<<<<<<<
 * 
 *     @text_eol.setter
 */
    __Pyx_TraceLine(88,0,__PYX_ERR(3, 88, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_mac);
    __pyx_r = __pyx_n_s_mac;
    goto __pyx_L0;
    break;
  }

  /* "src/pyxpdf/globalconfig.pxi":81
 * 
 *     @property
 *     def text_eol(self):             # <<<<<<<<<<<<<<
 *         cdef EndOfLineKind eol = self._global.getTextEOL()
 *         if eol == EndOfLineKind.eolUnix:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.GlobalParamsConfig.text_eol.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":91
 * 
 *     @text_eol.setter
 *     def text_eol(self, eol):             # <<<<<<<<<<<<<<
 *         cdef EndOfLineKind c_eol
 *         if eol == "unix":
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_8text_eol_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_eol); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_8text_eol_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_eol) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_8text_eol_2__set__(((struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *)__pyx_v_self), ((PyObject *)__pyx_v_eol));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_8text_eol_2__set__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_eol) {
  CYTHON_UNUSED EndOfLineKind __pyx_v_c_eol;
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[3], 91, 0, __PYX_ERR(3, 91, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":93
 *     def text_eol(self, eol):
 *         cdef EndOfLineKind c_eol
 *         if eol == "unix":             # <<<<<<<<<<<<<<
 *             c_eol = EndOfLineKind.eolUnix
 *         elif eol == "dos":
 */
  __Pyx_TraceLine(93,0,__PYX_ERR(3, 93, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_eol, __pyx_n_s_unix, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(3, 93, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/globalconfig.pxi":94
 *         cdef EndOfLineKind c_eol
 *         if eol == "unix":
 *             c_eol = EndOfLineKind.eolUnix             # <<<<<<<<<<<<<<
 *         elif eol == "dos":
 *             c_eol = EndOfLineKind.eolDOS
 */
    __Pyx_TraceLine(94,0,__PYX_ERR(3, 94, __pyx_L1_error))
    __pyx_v_c_eol = eolUnix;

    /* "src/pyxpdf/globalconfig.pxi":93
 *     def text_eol(self, eol):
 *         cdef EndOfLineKind c_eol
 *         if eol == "unix":             # <<<<<<<<<<<<<<
 *             c_eol = EndOfLineKind.eolUnix
 *         elif eol == "dos":
 */
    goto __pyx_L3;
  }

  /* "src/pyxpdf/globalconfig.pxi":95
 *         if eol == "unix":
 *             c_eol = EndOfLineKind.eolUnix
 *         elif eol == "dos":             # <<<<<<<<<<<<<<
 *             c_eol = EndOfLineKind.eolDOS
 *         elif eol == 'mac':
 */
  __Pyx_TraceLine(95,0,__PYX_ERR(3, 95, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_eol, __pyx_n_s_dos, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(3, 95, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/globalconfig.pxi":96
 *             c_eol = EndOfLineKind.eolUnix
 *         elif eol == "dos":
 *             c_eol = EndOfLineKind.eolDOS             # <<<<<<<<<<<<<<
 *         elif eol == 'mac':
 *             c_eol = EndOfLineKind.eolMac
 */
    __Pyx_TraceLine(96,0,__PYX_ERR(3, 96, __pyx_L1_error))
    __pyx_v_c_eol = eolDOS;

    /* "src/pyxpdf/globalconfig.pxi":95
 *         if eol == "unix":
 *             c_eol = EndOfLineKind.eolUnix
 *         elif eol == "dos":             # <<<<<<<<<<<<<<
 *             c_eol = EndOfLineKind.eolDOS
 *         elif eol == 'mac':
 */
    goto __pyx_L3;
  }

  /* "src/pyxpdf/globalconfig.pxi":97
 *         elif eol == "dos":
 *             c_eol = EndOfLineKind.eolDOS
 *         elif eol == 'mac':             # <<<<<<<<<<<<<<
 *             c_eol = EndOfLineKind.eolMac
 *         else:
 */
  __Pyx_TraceLine(97,0,__PYX_ERR(3, 97, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_eol, __pyx_n_s_mac, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(3, 97, __pyx_L1_error)
  if (likely(__pyx_t_1)) {

    /* "src/pyxpdf/globalconfig.pxi":98
 *             c_eol = EndOfLineKind.eolDOS
 *         elif eol == 'mac':
 *             c_eol = EndOfLineKind.eolMac             # <<<<<<<<<<<<<<
 *         else:
 *             raise PDFError("Invalid EOL type.")
 */
    __Pyx_TraceLine(98,0,__PYX_ERR(3, 98, __pyx_L1_error))
    __pyx_v_c_eol = eolMac;

    /* "src/pyxpdf/globalconfig.pxi":97
 *         elif eol == "dos":
 *             c_eol = EndOfLineKind.eolDOS
 *         elif eol == 'mac':             # <<<<<<<<<<<<<<
 *             c_eol = EndOfLineKind.eolMac
 *         else:
 */
    goto __pyx_L3;
  }

  /* "src/pyxpdf/globalconfig.pxi":100
 *             c_eol = EndOfLineKind.eolMac
 *         else:
 *             raise PDFError("Invalid EOL type.")             # <<<<<<<<<<<<<<
 *         self._global.setTextEOL(_chars(eol))
 * 
 */
  __Pyx_TraceLine(100,0,__PYX_ERR(3, 100, __pyx_L1_error))
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFError), __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(3, 100, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "src/pyxpdf/globalconfig.pxi":101
 *         else:
 *             raise PDFError("Invalid EOL type.")
 *         self._global.setTextEOL(_chars(eol))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(101,0,__PYX_ERR(3, 101, __pyx_L1_error))
  (void)(__pyx_v_self->_global->setTextEOL(__pyx_f_6pyxpdf_4xpdf__chars(__pyx_v_eol)));

  /* "src/pyxpdf/globalconfig.pxi":91
 * 
 *     @text_eol.setter
 *     def text_eol(self, eol):             # <<<<<<<<<<<<<<
 *         cdef EndOfLineKind c_eol
 *         if eol == "unix":
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyxpdf.xpdf.GlobalParamsConfig.text_eol.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":105
 * 
 *     @property
 *     def text_page_breaks(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self._global.getTextPageBreaks())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_16text_page_breaks_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_16text_page_breaks_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_16text_page_breaks___get__(((struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_16text_page_breaks___get__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[3], 105, 0, __PYX_ERR(3, 105, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":106
 *     @property
 *     def text_page_breaks(self):
 *         return GBool_to_bool(self._global.getTextPageBreaks())             # <<<<<<<<<<<<<<
 * 
 *     @text_page_breaks.setter
 */
  __Pyx_TraceLine(106,0,__PYX_ERR(3, 106, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GBool_to_bool(__pyx_v_self->_global->getTextPageBreaks()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/globalconfig.pxi":105
 * 
 *     @property
 *     def text_page_breaks(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self._global.getTextPageBreaks())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.GlobalParamsConfig.text_page_breaks.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":109
 * 
 *     @text_page_breaks.setter
 *     def text_page_breaks(self, breaks):             # <<<<<<<<<<<<<<
 *         self._global.setTextPageBreaks(to_GBool(breaks))
 * 
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_16text_page_breaks_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_breaks); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_16text_page_breaks_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_breaks) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_16text_page_breaks_2__set__(((struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *)__pyx_v_self), ((PyObject *)__pyx_v_breaks));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_16text_page_breaks_2__set__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_breaks) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[3], 109, 0, __PYX_ERR(3, 109, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":110
 *     @text_page_breaks.setter
 *     def text_page_breaks(self, breaks):
 *         self._global.setTextPageBreaks(to_GBool(breaks))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(110,0,__PYX_ERR(3, 110, __pyx_L1_error))
  __pyx_v_self->_global->setTextPageBreaks(__pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_breaks));

  /* "src/pyxpdf/globalconfig.pxi":109
 * 
 *     @text_page_breaks.setter
 *     def text_page_breaks(self, breaks):             # <<<<<<<<<<<<<<
 *         self._global.setTextPageBreaks(to_GBool(breaks))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.GlobalParamsConfig.text_page_breaks.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":114
 * 
 *     @property
 *     def text_keep_tiny(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self._global.getTextKeepTinyChars())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_14text_keep_tiny_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_14text_keep_tiny_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_14text_keep_tiny___get__(((struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_14text_keep_tiny___get__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[3], 114, 0, __PYX_ERR(3, 114, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":115
 *     @property
 *     def text_keep_tiny(self):
 *         return GBool_to_bool(self._global.getTextKeepTinyChars())             # <<<<<<<<<<<<<<
 * 
 *     @text_keep_tiny.setter
 */
  __Pyx_TraceLine(115,0,__PYX_ERR(3, 115, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GBool_to_bool(__pyx_v_self->_global->getTextKeepTinyChars()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/globalconfig.pxi":114
 * 
 *     @property
 *     def text_keep_tiny(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self._global.getTextKeepTinyChars())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.GlobalParamsConfig.text_keep_tiny.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":118
 * 
 *     @text_keep_tiny.setter
 *     def text_keep_tiny(self, keep):             # <<<<<<<<<<<<<<
 *         self._global.setTextKeepTinyChars(to_GBool(keep))
 * 
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_14text_keep_tiny_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_keep); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_14text_keep_tiny_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_keep) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_14text_keep_tiny_2__set__(((struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *)__pyx_v_self), ((PyObject *)__pyx_v_keep));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_14text_keep_tiny_2__set__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_keep) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[3], 118, 0, __PYX_ERR(3, 118, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":119
 *     @text_keep_tiny.setter
 *     def text_keep_tiny(self, keep):
 *         self._global.setTextKeepTinyChars(to_GBool(keep))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(119,0,__PYX_ERR(3, 119, __pyx_L1_error))
  __pyx_v_self->_global->setTextKeepTinyChars(__pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_keep));

  /* "src/pyxpdf/globalconfig.pxi":118
 * 
 *     @text_keep_tiny.setter
 *     def text_keep_tiny(self, keep):             # <<<<<<<<<<<<<<
 *         self._global.setTextKeepTinyChars(to_GBool(keep))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.GlobalParamsConfig.text_keep_tiny.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":123
 * 
 *     @property
 *     def print_commands(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self._global.getPrintCommands())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_14print_commands_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_14print_commands_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_14print_commands___get__(((struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_14print_commands___get__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[3], 123, 0, __PYX_ERR(3, 123, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":124
 *     @property
 *     def print_commands(self):
 *         return GBool_to_bool(self._global.getPrintCommands())             # <<<<<<<<<<<<<<
 * 
 *     @print_commands.setter
 */
  __Pyx_TraceLine(124,0,__PYX_ERR(3, 124, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GBool_to_bool(__pyx_v_self->_global->getPrintCommands()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/globalconfig.pxi":123
 * 
 *     @property
 *     def print_commands(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self._global.getPrintCommands())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.GlobalParamsConfig.print_commands.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":127
 * 
 *     @print_commands.setter
 *     def print_commands(self, print_cmd):             # <<<<<<<<<<<<<<
 *         self._global.setPrintCommands(to_GBool(print_cmd))
 * 
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_14print_commands_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_print_cmd); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_14print_commands_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_print_cmd) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_14print_commands_2__set__(((struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *)__pyx_v_self), ((PyObject *)__pyx_v_print_cmd));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_14print_commands_2__set__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_print_cmd) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[3], 127, 0, __PYX_ERR(3, 127, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":128
 *     @print_commands.setter
 *     def print_commands(self, print_cmd):
 *         self._global.setPrintCommands(to_GBool(print_cmd))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(128,0,__PYX_ERR(3, 128, __pyx_L1_error))
  __pyx_v_self->_global->setPrintCommands(__pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_print_cmd));

  /* "src/pyxpdf/globalconfig.pxi":127
 * 
 *     @print_commands.setter
 *     def print_commands(self, print_cmd):             # <<<<<<<<<<<<<<
 *         self._global.setPrintCommands(to_GBool(print_cmd))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.GlobalParamsConfig.print_commands.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":132
 * 
 *     @property
 *     def error_quiet(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self._global.getErrQuiet())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_11error_quiet_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_11error_quiet_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_11error_quiet___get__(((struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_11error_quiet___get__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[3], 132, 0, __PYX_ERR(3, 132, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":133
 *     @property
 *     def error_quiet(self):
 *         return GBool_to_bool(self._global.getErrQuiet())             # <<<<<<<<<<<<<<
 * 
 *     @error_quiet.setter
 */
  __Pyx_TraceLine(133,0,__PYX_ERR(3, 133, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GBool_to_bool(__pyx_v_self->_global->getErrQuiet()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/globalconfig.pxi":132
 * 
 *     @property
 *     def error_quiet(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self._global.getErrQuiet())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.GlobalParamsConfig.error_quiet.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":136
 * 
 *     @error_quiet.setter
 *     def error_quiet(self, quiet):             # <<<<<<<<<<<<<<
 *         self._global.setErrQuiet(to_GBool(quiet))
 * 
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_11error_quiet_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_quiet); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_11error_quiet_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_quiet) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_11error_quiet_2__set__(((struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *)__pyx_v_self), ((PyObject *)__pyx_v_quiet));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_11error_quiet_2__set__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self, PyObject *__pyx_v_quiet) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[3], 136, 0, __PYX_ERR(3, 136, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":137
 *     @error_quiet.setter
 *     def error_quiet(self, quiet):
 *         self._global.setErrQuiet(to_GBool(quiet))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(137,0,__PYX_ERR(3, 137, __pyx_L1_error))
  __pyx_v_self->_global->setErrQuiet(__pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_quiet));

  /* "src/pyxpdf/globalconfig.pxi":136
 * 
 *     @error_quiet.setter
 *     def error_quiet(self, quiet):             # <<<<<<<<<<<<<<
 *         self._global.setErrQuiet(to_GBool(quiet))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.GlobalParamsConfig.error_quiet.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/globalconfig.pxi":141
 * 
 *     @property
 *     def default_text_encoding(self):             # <<<<<<<<<<<<<<
 *         return self._global.defaultTextEncoding.decode('UTF-8')
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_21default_text_encoding_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_21default_text_encoding_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_21default_text_encoding___get__(((struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_21default_text_encoding___get__(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[3], 141, 0, __PYX_ERR(3, 141, __pyx_L1_error));

  /* "src/pyxpdf/globalconfig.pxi":142
 *     @property
 *     def default_text_encoding(self):
 *         return self._global.defaultTextEncoding.decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(142,0,__PYX_ERR(3, 142, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->_global->defaultTextEncoding;
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_t_1, 0, strlen(__pyx_t_1), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/globalconfig.pxi":141
 * 
 *     @property
 *     def default_text_encoding(self):             # <<<<<<<<<<<<<<
 *         return self._global.defaultTextEncoding.decode('UTF-8')
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyxpdf.xpdf.GlobalParamsConfig.default_text_encoding.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_18GlobalParamsConfig_11__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_11__reduce_cython__, METH_NOARGS, 0};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_10__reduce_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__13)
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[4], 1, 0, __PYX_ERR(4, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(2,0,__PYX_ERR(4, 2, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(4, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.GlobalParamsConfig.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_18GlobalParamsConfig_13__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_13__setstate_cython__, METH_O, 0};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_12__setstate_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_18GlobalParamsConfig_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__15)
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[4], 3, 0, __PYX_ERR(4, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(4, 4, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(4, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.GlobalParamsConfig.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/textoutput.pxi":15
 *     cdef TextOutputControl control
 * 
 *     def __cinit__(self, TextOutputMode mode = TextReadingOrder, double fixed_pitch = 0, double fixed_line_spacing=0, enable_html=False,             # <<<<<<<<<<<<<<
 *                 clip_text=False, discard_diagonal=False, discard_invisible=False, discard_clipped=False,
 *                 insert_bom=False, double margin_left=0, double margin_right=0, double margin_top=0, double margin_bottom=0):
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_11TextControl_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_11TextControl_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED TextOutputMode __pyx_v_mode;
  double __pyx_v_fixed_pitch;
  double __pyx_v_fixed_line_spacing;
  PyObject *__pyx_v_enable_html = 0;
  PyObject *__pyx_v_clip_text = 0;
  PyObject *__pyx_v_discard_diagonal = 0;
  PyObject *__pyx_v_discard_invisible = 0;
  PyObject *__pyx_v_discard_clipped = 0;
  PyObject *__pyx_v_insert_bom = 0;
  double __pyx_v_margin_left;
  double __pyx_v_margin_right;
  double __pyx_v_margin_top;
  double __pyx_v_margin_bottom;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mode,&__pyx_n_s_fixed_pitch,&__pyx_n_s_fixed_line_spacing,&__pyx_n_s_enable_html,&__pyx_n_s_clip_text,&__pyx_n_s_discard_diagonal,&__pyx_n_s_discard_invisible,&__pyx_n_s_discard_clipped,&__pyx_n_s_insert_bom,&__pyx_n_s_margin_left,&__pyx_n_s_margin_right,&__pyx_n_s_margin_top,&__pyx_n_s_margin_bottom,0};
    PyObject* values[13] = {0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[3] = ((PyObject *)Py_False);

    /* "src/pyxpdf/textoutput.pxi":16
 * 
 *     def __cinit__(self, TextOutputMode mode = TextReadingOrder, double fixed_pitch = 0, double fixed_line_spacing=0, enable_html=False,
 *                 clip_text=False, discard_diagonal=False, discard_invisible=False, discard_clipped=False,             # <<<<<<<<<<<<<<
 *                 insert_bom=False, double margin_left=0, double margin_right=0, double margin_top=0, double margin_bottom=0):
 * 
 */
    values[4] = ((PyObject *)Py_False);
    values[5] = ((PyObject *)Py_False);
    values[6] = ((PyObject *)Py_False);
    values[7] = ((PyObject *)Py_False);

    /* "src/pyxpdf/textoutput.pxi":17
 *     def __cinit__(self, TextOutputMode mode = TextReadingOrder, double fixed_pitch = 0, double fixed_line_spacing=0, enable_html=False,
 *                 clip_text=False, discard_diagonal=False, discard_invisible=False, discard_clipped=False,
 *                 insert_bom=False, double margin_left=0, double margin_right=0, double margin_top=0, double margin_bottom=0):             # <<<<<<<<<<<<<<
 * 
 *         self.control.fixedPitch = fixed_pitch
 */
    values[8] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fixed_pitch);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fixed_line_spacing);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_enable_html);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_clip_text);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_discard_diagonal);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_discard_invisible);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_discard_clipped);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_insert_bom);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_margin_left);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_margin_right);
          if (value) { values[10] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_margin_top);
          if (value) { values[11] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_margin_bottom);
          if (value) { values[12] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(6, 15, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_mode = ((TextOutputMode)__Pyx_PyInt_As_TextOutputMode(values[0])); if (unlikely(PyErr_Occurred())) __PYX_ERR(6, 15, __pyx_L3_error)
    } else {
      __pyx_v_mode = __pyx_k__17;
    }
    if (values[1]) {
      __pyx_v_fixed_pitch = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_fixed_pitch == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 15, __pyx_L3_error)
    } else {
      __pyx_v_fixed_pitch = ((double)0.0);
    }
    if (values[2]) {
      __pyx_v_fixed_line_spacing = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_fixed_line_spacing == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 15, __pyx_L3_error)
    } else {
      __pyx_v_fixed_line_spacing = ((double)0.0);
    }
    __pyx_v_enable_html = values[3];
    __pyx_v_clip_text = values[4];
    __pyx_v_discard_diagonal = values[5];
    __pyx_v_discard_invisible = values[6];
    __pyx_v_discard_clipped = values[7];
    __pyx_v_insert_bom = values[8];
    if (values[9]) {
      __pyx_v_margin_left = __pyx_PyFloat_AsDouble(values[9]); if (unlikely((__pyx_v_margin_left == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 17, __pyx_L3_error)
    } else {
      __pyx_v_margin_left = ((double)0.0);
    }
    if (values[10]) {
      __pyx_v_margin_right = __pyx_PyFloat_AsDouble(values[10]); if (unlikely((__pyx_v_margin_right == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 17, __pyx_L3_error)
    } else {
      __pyx_v_margin_right = ((double)0.0);
    }
    if (values[11]) {
      __pyx_v_margin_top = __pyx_PyFloat_AsDouble(values[11]); if (unlikely((__pyx_v_margin_top == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 17, __pyx_L3_error)
    } else {
      __pyx_v_margin_top = ((double)0.0);
    }
    if (values[12]) {
      __pyx_v_margin_bottom = __pyx_PyFloat_AsDouble(values[12]); if (unlikely((__pyx_v_margin_bottom == (double)-1) && PyErr_Occurred())) __PYX_ERR(6, 17, __pyx_L3_error)
    } else {
      __pyx_v_margin_bottom = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 13, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 15, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.TextControl.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_11TextControl___cinit__(((struct __pyx_obj_6pyxpdf_4xpdf_TextControl *)__pyx_v_self), __pyx_v_mode, __pyx_v_fixed_pitch, __pyx_v_fixed_line_spacing, __pyx_v_enable_html, __pyx_v_clip_text, __pyx_v_discard_diagonal, __pyx_v_discard_invisible, __pyx_v_discard_clipped, __pyx_v_insert_bom, __pyx_v_margin_left, __pyx_v_margin_right, __pyx_v_margin_top, __pyx_v_margin_bottom);

  /* "src/pyxpdf/textoutput.pxi":15
 *     cdef TextOutputControl control
 * 
 *     def __cinit__(self, TextOutputMode mode = TextReadingOrder, double fixed_pitch = 0, double fixed_line_spacing=0, enable_html=False,             # <<<<<<<<<<<<<<
 *                 clip_text=False, discard_diagonal=False, discard_invisible=False, discard_clipped=False,
 *                 insert_bom=False, double margin_left=0, double margin_right=0, double margin_top=0, double margin_bottom=0):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_11TextControl___cinit__(struct __pyx_obj_6pyxpdf_4xpdf_TextControl *__pyx_v_self, CYTHON_UNUSED TextOutputMode __pyx_v_mode, double __pyx_v_fixed_pitch, double __pyx_v_fixed_line_spacing, PyObject *__pyx_v_enable_html, PyObject *__pyx_v_clip_text, PyObject *__pyx_v_discard_diagonal, PyObject *__pyx_v_discard_invisible, PyObject *__pyx_v_discard_clipped, PyObject *__pyx_v_insert_bom, double __pyx_v_margin_left, double __pyx_v_margin_right, double __pyx_v_margin_top, double __pyx_v_margin_bottom) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[6], 15, 0, __PYX_ERR(6, 15, __pyx_L1_error));

  /* "src/pyxpdf/textoutput.pxi":19
 *                 insert_bom=False, double margin_left=0, double margin_right=0, double margin_top=0, double margin_bottom=0):
 * 
 *         self.control.fixedPitch = fixed_pitch             # <<<<<<<<<<<<<<
 *         self.control.fixedLineSpacing = fixed_line_spacing
 * 
 */
  __Pyx_TraceLine(19,0,__PYX_ERR(6, 19, __pyx_L1_error))
  __pyx_v_self->control.fixedPitch = __pyx_v_fixed_pitch;

  /* "src/pyxpdf/textoutput.pxi":20
 * 
 *         self.control.fixedPitch = fixed_pitch
 *         self.control.fixedLineSpacing = fixed_line_spacing             # <<<<<<<<<<<<<<
 * 
 *         self.control.html = to_GBool(enable_html)
 */
  __Pyx_TraceLine(20,0,__PYX_ERR(6, 20, __pyx_L1_error))
  __pyx_v_self->control.fixedLineSpacing = __pyx_v_fixed_line_spacing;

  /* "src/pyxpdf/textoutput.pxi":22
 *         self.control.fixedLineSpacing = fixed_line_spacing
 * 
 *         self.control.html = to_GBool(enable_html)             # <<<<<<<<<<<<<<
 *         self.control.clipText = to_GBool(clip_text)
 *         self.control.discardDiagonalText = to_GBool(discard_diagonal)
 */
  __Pyx_TraceLine(22,0,__PYX_ERR(6, 22, __pyx_L1_error))
  __pyx_v_self->control.html = __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_enable_html);

  /* "src/pyxpdf/textoutput.pxi":23
 * 
 *         self.control.html = to_GBool(enable_html)
 *         self.control.clipText = to_GBool(clip_text)             # <<<<<<<<<<<<<<
 *         self.control.discardDiagonalText = to_GBool(discard_diagonal)
 *         self.control.discardInvisibleText = to_GBool(discard_invisible)
 */
  __Pyx_TraceLine(23,0,__PYX_ERR(6, 23, __pyx_L1_error))
  __pyx_v_self->control.clipText = __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_clip_text);

  /* "src/pyxpdf/textoutput.pxi":24
 *         self.control.html = to_GBool(enable_html)
 *         self.control.clipText = to_GBool(clip_text)
 *         self.control.discardDiagonalText = to_GBool(discard_diagonal)             # <<<<<<<<<<<<<<
 *         self.control.discardInvisibleText = to_GBool(discard_invisible)
 *         self.control.discardClippedText = to_GBool(discard_clipped)
 */
  __Pyx_TraceLine(24,0,__PYX_ERR(6, 24, __pyx_L1_error))
  __pyx_v_self->control.discardDiagonalText = __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_discard_diagonal);

  /* "src/pyxpdf/textoutput.pxi":25
 *         self.control.clipText = to_GBool(clip_text)
 *         self.control.discardDiagonalText = to_GBool(discard_diagonal)
 *         self.control.discardInvisibleText = to_GBool(discard_invisible)             # <<<<<<<<<<<<<<
 *         self.control.discardClippedText = to_GBool(discard_clipped)
 *         self.control.insertBOM = to_GBool(insert_bom)
 */
  __Pyx_TraceLine(25,0,__PYX_ERR(6, 25, __pyx_L1_error))
  __pyx_v_self->control.discardInvisibleText = __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_discard_invisible);

  /* "src/pyxpdf/textoutput.pxi":26
 *         self.control.discardDiagonalText = to_GBool(discard_diagonal)
 *         self.control.discardInvisibleText = to_GBool(discard_invisible)
 *         self.control.discardClippedText = to_GBool(discard_clipped)             # <<<<<<<<<<<<<<
 *         self.control.insertBOM = to_GBool(insert_bom)
 * 
 */
  __Pyx_TraceLine(26,0,__PYX_ERR(6, 26, __pyx_L1_error))
  __pyx_v_self->control.discardClippedText = __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_discard_clipped);

  /* "src/pyxpdf/textoutput.pxi":27
 *         self.control.discardInvisibleText = to_GBool(discard_invisible)
 *         self.control.discardClippedText = to_GBool(discard_clipped)
 *         self.control.insertBOM = to_GBool(insert_bom)             # <<<<<<<<<<<<<<
 * 
 *         self.control.marginRight = margin_right
 */
  __Pyx_TraceLine(27,0,__PYX_ERR(6, 27, __pyx_L1_error))
  __pyx_v_self->control.insertBOM = __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_insert_bom);

  /* "src/pyxpdf/textoutput.pxi":29
 *         self.control.insertBOM = to_GBool(insert_bom)
 * 
 *         self.control.marginRight = margin_right             # <<<<<<<<<<<<<<
 *         self.control.marginLeft = margin_left
 *         self.control.marginTop = margin_top
 */
  __Pyx_TraceLine(29,0,__PYX_ERR(6, 29, __pyx_L1_error))
  __pyx_v_self->control.marginRight = __pyx_v_margin_right;

  /* "src/pyxpdf/textoutput.pxi":30
 * 
 *         self.control.marginRight = margin_right
 *         self.control.marginLeft = margin_left             # <<<<<<<<<<<<<<
 *         self.control.marginTop = margin_top
 *         self.control.marginBottom = margin_bottom
 */
  __Pyx_TraceLine(30,0,__PYX_ERR(6, 30, __pyx_L1_error))
  __pyx_v_self->control.marginLeft = __pyx_v_margin_left;

  /* "src/pyxpdf/textoutput.pxi":31
 *         self.control.marginRight = margin_right
 *         self.control.marginLeft = margin_left
 *         self.control.marginTop = margin_top             # <<<<<<<<<<<<<<
 *         self.control.marginBottom = margin_bottom
 * 
 */
  __Pyx_TraceLine(31,0,__PYX_ERR(6, 31, __pyx_L1_error))
  __pyx_v_self->control.marginTop = __pyx_v_margin_top;

  /* "src/pyxpdf/textoutput.pxi":32
 *         self.control.marginLeft = margin_left
 *         self.control.marginTop = margin_top
 *         self.control.marginBottom = margin_bottom             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(32,0,__PYX_ERR(6, 32, __pyx_L1_error))
  __pyx_v_self->control.marginBottom = __pyx_v_margin_bottom;

  /* "src/pyxpdf/textoutput.pxi":15
 *     cdef TextOutputControl control
 * 
 *     def __cinit__(self, TextOutputMode mode = TextReadingOrder, double fixed_pitch = 0, double fixed_line_spacing=0, enable_html=False,             # <<<<<<<<<<<<<<
 *                 clip_text=False, discard_diagonal=False, discard_invisible=False, discard_clipped=False,
 *                 insert_bom=False, double margin_left=0, double margin_right=0, double margin_top=0, double margin_bottom=0):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.TextControl.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_11TextControl_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_11TextControl_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_11TextControl_3__reduce_cython__, METH_NOARGS, 0};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_11TextControl_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_11TextControl_2__reduce_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_TextControl *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_11TextControl_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_TextControl *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__18)
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[4], 1, 0, __PYX_ERR(4, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(2,0,__PYX_ERR(4, 2, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(4, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.TextControl.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_11TextControl_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_11TextControl_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_11TextControl_5__setstate_cython__, METH_O, 0};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_11TextControl_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_11TextControl_4__setstate_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_TextControl *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_11TextControl_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_TextControl *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__20)
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[4], 3, 0, __PYX_ERR(4, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(4, 4, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(4, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.TextControl.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":29
 *     cdef bytes doc_data
 * 
 *     cdef dict get_info_dict(XPDFDoc self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             Object info
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_7XPDFDoc_get_info_dict(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self) {
  Object __pyx_v_info;
  PyObject *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  struct __pyx_opt_args_6pyxpdf_4xpdf_Dict_to_pydict __pyx_t_3;
  __Pyx_RefNannySetupContext("get_info_dict", 0);
  __Pyx_TraceCall("get_info_dict", __pyx_f[5], 29, 0, __PYX_ERR(5, 29, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":32
 *         cdef:
 *             Object info
 *             dict result = {}             # <<<<<<<<<<<<<<
 *         if self.doc.getDocInfo(&info).isDict() == gTrue:
 *             Dict_to_pydict(info.getDict(), result)
 */
  __Pyx_TraceLine(32,0,__PYX_ERR(5, 32, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pyxpdf/document.pxi":33
 *             Object info
 *             dict result = {}
 *         if self.doc.getDocInfo(&info).isDict() == gTrue:             # <<<<<<<<<<<<<<
 *             Dict_to_pydict(info.getDict(), result)
 *         info.free()
 */
  __Pyx_TraceLine(33,0,__PYX_ERR(5, 33, __pyx_L1_error))
  __pyx_t_2 = ((__pyx_v_self->doc->getDocInfo((&__pyx_v_info))->isDict() == gTrue) != 0);
  if (__pyx_t_2) {

    /* "src/pyxpdf/document.pxi":34
 *             dict result = {}
 *         if self.doc.getDocInfo(&info).isDict() == gTrue:
 *             Dict_to_pydict(info.getDict(), result)             # <<<<<<<<<<<<<<
 *         info.free()
 *         return result
 */
    __Pyx_TraceLine(34,0,__PYX_ERR(5, 34, __pyx_L1_error))
    __pyx_t_3.__pyx_n = 1;
    __pyx_t_3.pydict = __pyx_v_result;
    __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_Dict_to_pydict(__pyx_v_info.getDict(), &__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/pyxpdf/document.pxi":33
 *             Object info
 *             dict result = {}
 *         if self.doc.getDocInfo(&info).isDict() == gTrue:             # <<<<<<<<<<<<<<
 *             Dict_to_pydict(info.getDict(), result)
 *         info.free()
 */
  }

  /* "src/pyxpdf/document.pxi":35
 *         if self.doc.getDocInfo(&info).isDict() == gTrue:
 *             Dict_to_pydict(info.getDict(), result)
 *         info.free()             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __Pyx_TraceLine(35,0,__PYX_ERR(5, 35, __pyx_L1_error))
  __pyx_v_info.free();

  /* "src/pyxpdf/document.pxi":36
 *             Dict_to_pydict(info.getDict(), result)
 *         info.free()
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     cdef get_metadata(self):
 */
  __Pyx_TraceLine(36,0,__PYX_ERR(5, 36, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":29
 *     cdef bytes doc_data
 * 
 *     cdef dict get_info_dict(XPDFDoc self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             Object info
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFDoc.get_info_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":38
 *         return result
 * 
 *     cdef get_metadata(self):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[GString] meta
 *         meta.reset(self.doc.readMetadata())
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_7XPDFDoc_get_metadata(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self) {
  std::unique_ptr<GString>  __pyx_v_meta;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_metadata", 0);
  __Pyx_TraceCall("get_metadata", __pyx_f[5], 38, 0, __PYX_ERR(5, 38, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":40
 *     cdef get_metadata(self):
 *         cdef unique_ptr[GString] meta
 *         meta.reset(self.doc.readMetadata())             # <<<<<<<<<<<<<<
 *         if meta.get():
 *             return GString_to_unicode(meta.get())
 */
  __Pyx_TraceLine(40,0,__PYX_ERR(5, 40, __pyx_L1_error))
  __pyx_v_meta.reset(__pyx_v_self->doc->readMetadata());

  /* "src/pyxpdf/document.pxi":41
 *         cdef unique_ptr[GString] meta
 *         meta.reset(self.doc.readMetadata())
 *         if meta.get():             # <<<<<<<<<<<<<<
 *             return GString_to_unicode(meta.get())
 *         return None
 */
  __Pyx_TraceLine(41,0,__PYX_ERR(5, 41, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_meta.get() != 0);
  if (__pyx_t_1) {

    /* "src/pyxpdf/document.pxi":42
 *         meta.reset(self.doc.readMetadata())
 *         if meta.get():
 *             return GString_to_unicode(meta.get())             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
    __Pyx_TraceLine(42,0,__PYX_ERR(5, 42, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_6pyxpdf_4xpdf_GString_to_unicode(__pyx_v_meta.get()); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 42, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "src/pyxpdf/document.pxi":41
 *         cdef unique_ptr[GString] meta
 *         meta.reset(self.doc.readMetadata())
 *         if meta.get():             # <<<<<<<<<<<<<<
 *             return GString_to_unicode(meta.get())
 *         return None
 */
  }

  /* "src/pyxpdf/document.pxi":43
 *         if meta.get():
 *             return GString_to_unicode(meta.get())
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     cdef _load_from_file(XPDFDoc self, GString *pdf):
 */
  __Pyx_TraceLine(43,0,__PYX_ERR(5, 43, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":38
 *         return result
 * 
 *     cdef get_metadata(self):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[GString] meta
 *         meta.reset(self.doc.readMetadata())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFDoc.get_metadata", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":45
 *         return None
 * 
 *     cdef _load_from_file(XPDFDoc self, GString *pdf):             # <<<<<<<<<<<<<<
 *         self.doc = new PDFDoc(pdf, self.ownerpass, self.userpass)
 *         if self.doc == NULL:
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_7XPDFDoc__load_from_file(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self, GString *__pyx_v_pdf) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("_load_from_file", 0);
  __Pyx_TraceCall("_load_from_file", __pyx_f[5], 45, 0, __PYX_ERR(5, 45, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":46
 * 
 *     cdef _load_from_file(XPDFDoc self, GString *pdf):
 *         self.doc = new PDFDoc(pdf, self.ownerpass, self.userpass)             # <<<<<<<<<<<<<<
 *         if self.doc == NULL:
 *             raise MemoryError("Cannot allocate memory for internal objects")
 */
  __Pyx_TraceLine(46,0,__PYX_ERR(5, 46, __pyx_L1_error))
  __pyx_v_self->doc = new PDFDoc(__pyx_v_pdf, __pyx_v_self->ownerpass, __pyx_v_self->userpass);

  /* "src/pyxpdf/document.pxi":47
 *     cdef _load_from_file(XPDFDoc self, GString *pdf):
 *         self.doc = new PDFDoc(pdf, self.ownerpass, self.userpass)
 *         if self.doc == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError("Cannot allocate memory for internal objects")
 * 
 */
  __Pyx_TraceLine(47,0,__PYX_ERR(5, 47, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v_self->doc == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "src/pyxpdf/document.pxi":48
 *         self.doc = new PDFDoc(pdf, self.ownerpass, self.userpass)
 *         if self.doc == NULL:
 *             raise MemoryError("Cannot allocate memory for internal objects")             # <<<<<<<<<<<<<<
 * 
 *     cdef _load_from_char_array(XPDFDoc self, char *pdf, int data_length):
 */
    __Pyx_TraceLine(48,0,__PYX_ERR(5, 48, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 48, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(5, 48, __pyx_L1_error)

    /* "src/pyxpdf/document.pxi":47
 *     cdef _load_from_file(XPDFDoc self, GString *pdf):
 *         self.doc = new PDFDoc(pdf, self.ownerpass, self.userpass)
 *         if self.doc == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError("Cannot allocate memory for internal objects")
 * 
 */
  }

  /* "src/pyxpdf/document.pxi":45
 *         return None
 * 
 *     cdef _load_from_file(XPDFDoc self, GString *pdf):             # <<<<<<<<<<<<<<
 *         self.doc = new PDFDoc(pdf, self.ownerpass, self.userpass)
 *         if self.doc == NULL:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFDoc._load_from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":50
 *             raise MemoryError("Cannot allocate memory for internal objects")
 * 
 *     cdef _load_from_char_array(XPDFDoc self, char *pdf, int data_length):             # <<<<<<<<<<<<<<
 *         cdef Object *obj_null = new Object()
 *         cdef MemStream *mem_stream = new MemStream(pdf, 0, data_length, obj_null.initNull())
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_7XPDFDoc__load_from_char_array(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self, char *__pyx_v_pdf, int __pyx_v_data_length) {
  Object *__pyx_v_obj_null;
  MemStream *__pyx_v_mem_stream;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("_load_from_char_array", 0);
  __Pyx_TraceCall("_load_from_char_array", __pyx_f[5], 50, 0, __PYX_ERR(5, 50, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":51
 * 
 *     cdef _load_from_char_array(XPDFDoc self, char *pdf, int data_length):
 *         cdef Object *obj_null = new Object()             # <<<<<<<<<<<<<<
 *         cdef MemStream *mem_stream = new MemStream(pdf, 0, data_length, obj_null.initNull())
 *         if mem_stream == NULL:
 */
  __Pyx_TraceLine(51,0,__PYX_ERR(5, 51, __pyx_L1_error))
  __pyx_v_obj_null = new Object();

  /* "src/pyxpdf/document.pxi":52
 *     cdef _load_from_char_array(XPDFDoc self, char *pdf, int data_length):
 *         cdef Object *obj_null = new Object()
 *         cdef MemStream *mem_stream = new MemStream(pdf, 0, data_length, obj_null.initNull())             # <<<<<<<<<<<<<<
 *         if mem_stream == NULL:
 *             raise MemoryError("Cannot allocate memory for internal objects")
 */
  __Pyx_TraceLine(52,0,__PYX_ERR(5, 52, __pyx_L1_error))
  __pyx_v_mem_stream = new MemStream(__pyx_v_pdf, 0, __pyx_v_data_length, __pyx_v_obj_null->initNull());

  /* "src/pyxpdf/document.pxi":53
 *         cdef Object *obj_null = new Object()
 *         cdef MemStream *mem_stream = new MemStream(pdf, 0, data_length, obj_null.initNull())
 *         if mem_stream == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError("Cannot allocate memory for internal objects")
 *         self.doc = new PDFDoc(mem_stream, self.ownerpass, self.userpass)
 */
  __Pyx_TraceLine(53,0,__PYX_ERR(5, 53, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v_mem_stream == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "src/pyxpdf/document.pxi":54
 *         cdef MemStream *mem_stream = new MemStream(pdf, 0, data_length, obj_null.initNull())
 *         if mem_stream == NULL:
 *             raise MemoryError("Cannot allocate memory for internal objects")             # <<<<<<<<<<<<<<
 *         self.doc = new PDFDoc(mem_stream, self.ownerpass, self.userpass)
 * 
 */
    __Pyx_TraceLine(54,0,__PYX_ERR(5, 54, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(5, 54, __pyx_L1_error)

    /* "src/pyxpdf/document.pxi":53
 *         cdef Object *obj_null = new Object()
 *         cdef MemStream *mem_stream = new MemStream(pdf, 0, data_length, obj_null.initNull())
 *         if mem_stream == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError("Cannot allocate memory for internal objects")
 *         self.doc = new PDFDoc(mem_stream, self.ownerpass, self.userpass)
 */
  }

  /* "src/pyxpdf/document.pxi":55
 *         if mem_stream == NULL:
 *             raise MemoryError("Cannot allocate memory for internal objects")
 *         self.doc = new PDFDoc(mem_stream, self.ownerpass, self.userpass)             # <<<<<<<<<<<<<<
 * 
 *     cdef check(self):
 */
  __Pyx_TraceLine(55,0,__PYX_ERR(5, 55, __pyx_L1_error))
  __pyx_v_self->doc = new PDFDoc(__pyx_v_mem_stream, __pyx_v_self->ownerpass, __pyx_v_self->userpass);

  /* "src/pyxpdf/document.pxi":50
 *             raise MemoryError("Cannot allocate memory for internal objects")
 * 
 *     cdef _load_from_char_array(XPDFDoc self, char *pdf, int data_length):             # <<<<<<<<<<<<<<
 *         cdef Object *obj_null = new Object()
 *         cdef MemStream *mem_stream = new MemStream(pdf, 0, data_length, obj_null.initNull())
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFDoc._load_from_char_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":57
 *         self.doc = new PDFDoc(mem_stream, self.ownerpass, self.userpass)
 * 
 *     cdef check(self):             # <<<<<<<<<<<<<<
 *         if self.doc.isOk() == gTrue or self.doc.getErrorCode() == errEncrypted:
 *             if self.doc.getErrorCode() == errEncrypted:
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_7XPDFDoc_check(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("check", 0);
  __Pyx_TraceCall("check", __pyx_f[5], 57, 0, __PYX_ERR(5, 57, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":58
 * 
 *     cdef check(self):
 *         if self.doc.isOk() == gTrue or self.doc.getErrorCode() == errEncrypted:             # <<<<<<<<<<<<<<
 *             if self.doc.getErrorCode() == errEncrypted:
 *                 raise PDFError("PDF cannot be decrypted please provide correct passwords.")
 */
  __Pyx_TraceLine(58,0,__PYX_ERR(5, 58, __pyx_L1_error))
  __pyx_t_2 = ((__pyx_v_self->doc->isOk() == gTrue) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_self->doc->getErrorCode() == errEncrypted) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (likely(__pyx_t_1)) {

    /* "src/pyxpdf/document.pxi":59
 *     cdef check(self):
 *         if self.doc.isOk() == gTrue or self.doc.getErrorCode() == errEncrypted:
 *             if self.doc.getErrorCode() == errEncrypted:             # <<<<<<<<<<<<<<
 *                 raise PDFError("PDF cannot be decrypted please provide correct passwords.")
 *         else:
 */
    __Pyx_TraceLine(59,0,__PYX_ERR(5, 59, __pyx_L1_error))
    __pyx_t_1 = ((__pyx_v_self->doc->getErrorCode() == errEncrypted) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "src/pyxpdf/document.pxi":60
 *         if self.doc.isOk() == gTrue or self.doc.getErrorCode() == errEncrypted:
 *             if self.doc.getErrorCode() == errEncrypted:
 *                 raise PDFError("PDF cannot be decrypted please provide correct passwords.")             # <<<<<<<<<<<<<<
 *         else:
 *             raise PDFError(f"Cannot Parse PDF. ErrorCode - {self.doc.getErrorCode()}")
 */
      __Pyx_TraceLine(60,0,__PYX_ERR(5, 60, __pyx_L1_error))
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFError), __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 60, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(5, 60, __pyx_L1_error)

      /* "src/pyxpdf/document.pxi":59
 *     cdef check(self):
 *         if self.doc.isOk() == gTrue or self.doc.getErrorCode() == errEncrypted:
 *             if self.doc.getErrorCode() == errEncrypted:             # <<<<<<<<<<<<<<
 *                 raise PDFError("PDF cannot be decrypted please provide correct passwords.")
 *         else:
 */
    }

    /* "src/pyxpdf/document.pxi":58
 * 
 *     cdef check(self):
 *         if self.doc.isOk() == gTrue or self.doc.getErrorCode() == errEncrypted:             # <<<<<<<<<<<<<<
 *             if self.doc.getErrorCode() == errEncrypted:
 *                 raise PDFError("PDF cannot be decrypted please provide correct passwords.")
 */
    goto __pyx_L3;
  }

  /* "src/pyxpdf/document.pxi":62
 *                 raise PDFError("PDF cannot be decrypted please provide correct passwords.")
 *         else:
 *             raise PDFError(f"Cannot Parse PDF. ErrorCode - {self.doc.getErrorCode()}")             # <<<<<<<<<<<<<<
 * 
 *     cdef Catalog *get_catalog(self):
 */
  __Pyx_TraceLine(62,0,__PYX_ERR(5, 62, __pyx_L1_error))
  /*else*/ {
    __pyx_t_3 = __Pyx_PyUnicode_From_int(__pyx_v_self->doc->getErrorCode(), 0, ' ', 'd'); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Cannot_Parse_PDF_ErrorCode, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFError), __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(5, 62, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "src/pyxpdf/document.pxi":57
 *         self.doc = new PDFDoc(mem_stream, self.ownerpass, self.userpass)
 * 
 *     cdef check(self):             # <<<<<<<<<<<<<<
 *         if self.doc.isOk() == gTrue or self.doc.getErrorCode() == errEncrypted:
 *             if self.doc.getErrorCode() == errEncrypted:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFDoc.check", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":64
 *             raise PDFError(f"Cannot Parse PDF. ErrorCode - {self.doc.getErrorCode()}")
 * 
 *     cdef Catalog *get_catalog(self):             # <<<<<<<<<<<<<<
 *         return self.doc.getCatalog()
 * 
 */

static Catalog *__pyx_f_6pyxpdf_4xpdf_7XPDFDoc_get_catalog(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self) {
  Catalog *__pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_catalog", 0);
  __Pyx_TraceCall("get_catalog", __pyx_f[5], 64, 0, __PYX_ERR(5, 64, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":65
 * 
 *     cdef Catalog *get_catalog(self):
 *         return self.doc.getCatalog()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(65,0,__PYX_ERR(5, 65, __pyx_L1_error))
  __pyx_r = __pyx_v_self->doc->getCatalog();
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":64
 *             raise PDFError(f"Cannot Parse PDF. ErrorCode - {self.doc.getErrorCode()}")
 * 
 *     cdef Catalog *get_catalog(self):             # <<<<<<<<<<<<<<
 *         return self.doc.getCatalog()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("pyxpdf.xpdf.XPDFDoc.get_catalog", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":68
 * 
 * 
 *     def __cinit__(self, pdf, ownerpass=None, userpass=None):             # <<<<<<<<<<<<<<
 *         # self.global_params.setTextEncoding(b"UTF-8")
 *         self.doc = NULL
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pdf = 0;
  PyObject *__pyx_v_ownerpass = 0;
  PyObject *__pyx_v_userpass = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pdf,&__pyx_n_s_ownerpass,&__pyx_n_s_userpass,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pdf)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ownerpass);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_userpass);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(5, 68, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pdf = values[0];
    __pyx_v_ownerpass = values[1];
    __pyx_v_userpass = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 68, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFDoc.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_7XPDFDoc___cinit__(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *)__pyx_v_self), __pyx_v_pdf, __pyx_v_ownerpass, __pyx_v_userpass);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_7XPDFDoc___cinit__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self, PyObject *__pyx_v_pdf, PyObject *__pyx_v_ownerpass, PyObject *__pyx_v_userpass) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  GString *__pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  char *__pyx_t_8;
  Py_ssize_t __pyx_t_9;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[5], 68, 0, __PYX_ERR(5, 68, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":70
 *     def __cinit__(self, pdf, ownerpass=None, userpass=None):
 *         # self.global_params.setTextEncoding(b"UTF-8")
 *         self.doc = NULL             # <<<<<<<<<<<<<<
 *         self.doc_data = string()
 * 
 */
  __Pyx_TraceLine(70,0,__PYX_ERR(5, 70, __pyx_L1_error))
  __pyx_v_self->doc = NULL;

  /* "src/pyxpdf/document.pxi":71
 *         # self.global_params.setTextEncoding(b"UTF-8")
 *         self.doc = NULL
 *         self.doc_data = string()             # <<<<<<<<<<<<<<
 * 
 *         # Type casting NULL to prebent MSVC/C14 errors
 */
  __Pyx_TraceLine(71,0,__PYX_ERR(5, 71, __pyx_L1_error))
  try {
    __pyx_t_1 = std::string();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(5, 71, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->doc_data);
  __Pyx_DECREF(__pyx_v_self->doc_data);
  __pyx_v_self->doc_data = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/pyxpdf/document.pxi":74
 * 
 *         # Type casting NULL to prebent MSVC/C14 errors
 *         self.ownerpass = <GString*> NULL if ownerpass == None else to_GString(ownerpass)             # <<<<<<<<<<<<<<
 *         self.userpass = <GString*> NULL if userpass == None else to_GString(userpass)
 * 
 */
  __Pyx_TraceLine(74,0,__PYX_ERR(5, 74, __pyx_L1_error))
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_ownerpass, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 74, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(5, 74, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {
    __pyx_t_3 = ((GString *)NULL);
  } else {
    __pyx_t_3 = __pyx_f_6pyxpdf_4xpdf_to_GString(__pyx_v_ownerpass);
  }
  __pyx_v_self->ownerpass = __pyx_t_3;

  /* "src/pyxpdf/document.pxi":75
 *         # Type casting NULL to prebent MSVC/C14 errors
 *         self.ownerpass = <GString*> NULL if ownerpass == None else to_GString(ownerpass)
 *         self.userpass = <GString*> NULL if userpass == None else to_GString(userpass)             # <<<<<<<<<<<<<<
 * 
 *         # pdf file path
 */
  __Pyx_TraceLine(75,0,__PYX_ERR(5, 75, __pyx_L1_error))
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_userpass, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 75, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(5, 75, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {
    __pyx_t_3 = ((GString *)NULL);
  } else {
    __pyx_t_3 = __pyx_f_6pyxpdf_4xpdf_to_GString(__pyx_v_userpass);
  }
  __pyx_v_self->userpass = __pyx_t_3;

  /* "src/pyxpdf/document.pxi":78
 * 
 *         # pdf file path
 *         if isinstance(pdf, basestring):             # <<<<<<<<<<<<<<
 *             self._load_from_file(to_GString(pdf))
 *         # file-like object
 */
  __Pyx_TraceLine(78,0,__PYX_ERR(5, 78, __pyx_L1_error))
  __pyx_t_4 = __Pyx_PyBaseString_Check(__pyx_v_pdf); 
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "src/pyxpdf/document.pxi":79
 *         # pdf file path
 *         if isinstance(pdf, basestring):
 *             self._load_from_file(to_GString(pdf))             # <<<<<<<<<<<<<<
 *         # file-like object
 *         elif callable(getattr(pdf, 'read', None)):
 */
    __Pyx_TraceLine(79,0,__PYX_ERR(5, 79, __pyx_L1_error))
    __pyx_t_2 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_XPDFDoc *)__pyx_v_self->__pyx_vtab)->_load_from_file(__pyx_v_self, __pyx_f_6pyxpdf_4xpdf_to_GString(__pyx_v_pdf)); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "src/pyxpdf/document.pxi":78
 * 
 *         # pdf file path
 *         if isinstance(pdf, basestring):             # <<<<<<<<<<<<<<
 *             self._load_from_file(to_GString(pdf))
 *         # file-like object
 */
    goto __pyx_L3;
  }

  /* "src/pyxpdf/document.pxi":81
 *             self._load_from_file(to_GString(pdf))
 *         # file-like object
 *         elif callable(getattr(pdf, 'read', None)):             # <<<<<<<<<<<<<<
 *             # copy buffer
 *             self.doc_data = pdf.read()
 */
  __Pyx_TraceLine(81,0,__PYX_ERR(5, 81, __pyx_L1_error))
  __pyx_t_2 = __Pyx_GetAttr3(__pyx_v_pdf, __pyx_n_s_read, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyCallable_Check(__pyx_t_2); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(5, 81, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (likely(__pyx_t_4)) {

    /* "src/pyxpdf/document.pxi":83
 *         elif callable(getattr(pdf, 'read', None)):
 *             # copy buffer
 *             self.doc_data = pdf.read()             # <<<<<<<<<<<<<<
 *             self._load_from_char_array(self.doc_data, len(self.doc_data))
 *         else:
 */
    __Pyx_TraceLine(83,0,__PYX_ERR(5, 83, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_pdf, __pyx_n_s_read); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_2 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(5, 83, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->doc_data);
    __Pyx_DECREF(__pyx_v_self->doc_data);
    __pyx_v_self->doc_data = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "src/pyxpdf/document.pxi":84
 *             # copy buffer
 *             self.doc_data = pdf.read()
 *             self._load_from_char_array(self.doc_data, len(self.doc_data))             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError(f"pdf argument must be a string or a file-like object.")
 */
    __Pyx_TraceLine(84,0,__PYX_ERR(5, 84, __pyx_L1_error))
    if (unlikely(__pyx_v_self->doc_data == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
      __PYX_ERR(5, 84, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_PyBytes_AsWritableString(__pyx_v_self->doc_data); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(5, 84, __pyx_L1_error)
    __pyx_t_2 = __pyx_v_self->doc_data;
    __Pyx_INCREF(__pyx_t_2);
    if (unlikely(__pyx_t_2 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(5, 84, __pyx_L1_error)
    }
    __pyx_t_9 = PyBytes_GET_SIZE(__pyx_t_2); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(5, 84, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_XPDFDoc *)__pyx_v_self->__pyx_vtab)->_load_from_char_array(__pyx_v_self, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "src/pyxpdf/document.pxi":81
 *             self._load_from_file(to_GString(pdf))
 *         # file-like object
 *         elif callable(getattr(pdf, 'read', None)):             # <<<<<<<<<<<<<<
 *             # copy buffer
 *             self.doc_data = pdf.read()
 */
    goto __pyx_L3;
  }

  /* "src/pyxpdf/document.pxi":86
 *             self._load_from_char_array(self.doc_data, len(self.doc_data))
 *         else:
 *             raise ValueError(f"pdf argument must be a string or a file-like object.")             # <<<<<<<<<<<<<<
 * 
 *         # check PDFDoc
 */
  __Pyx_TraceLine(86,0,__PYX_ERR(5, 86, __pyx_L1_error))
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(5, 86, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "src/pyxpdf/document.pxi":89
 * 
 *         # check PDFDoc
 *         self.check()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(89,0,__PYX_ERR(5, 89, __pyx_L1_error))
  __pyx_t_2 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_XPDFDoc *)__pyx_v_self->__pyx_vtab)->check(__pyx_v_self); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/pyxpdf/document.pxi":68
 * 
 * 
 *     def __cinit__(self, pdf, ownerpass=None, userpass=None):             # <<<<<<<<<<<<<<
 *         # self.global_params.setTextEncoding(b"UTF-8")
 *         self.doc = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFDoc.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":92
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.doc
 *         del self.ownerpass
 */

/* Python wrapper */
static void __pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_2__dealloc__(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_2__dealloc__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);
  __Pyx_TraceCall("__dealloc__", __pyx_f[5], 92, 0, __PYX_ERR(5, 92, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":93
 * 
 *     def __dealloc__(self):
 *         del self.doc             # <<<<<<<<<<<<<<
 *         del self.ownerpass
 *         del self.userpass
 */
  __Pyx_TraceLine(93,0,__PYX_ERR(5, 93, __pyx_L1_error))
  delete __pyx_v_self->doc;

  /* "src/pyxpdf/document.pxi":94
 *     def __dealloc__(self):
 *         del self.doc
 *         del self.ownerpass             # <<<<<<<<<<<<<<
 *         del self.userpass
 * 
 */
  __Pyx_TraceLine(94,0,__PYX_ERR(5, 94, __pyx_L1_error))
  delete __pyx_v_self->ownerpass;

  /* "src/pyxpdf/document.pxi":95
 *         del self.doc
 *         del self.ownerpass
 *         del self.userpass             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(95,0,__PYX_ERR(5, 95, __pyx_L1_error))
  delete __pyx_v_self->userpass;

  /* "src/pyxpdf/document.pxi":92
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.doc
 *         del self.ownerpass
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("pyxpdf.xpdf.XPDFDoc.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "src/pyxpdf/document.pxi":98
 * 
 *     @property
 *     def filename(self):             # <<<<<<<<<<<<<<
 *         return GString_to_unicode(self.doc.getFileName())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_8filename_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_8filename_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_8filename___get__(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_8filename___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[5], 98, 0, __PYX_ERR(5, 98, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":99
 *     @property
 *     def filename(self):
 *         return GString_to_unicode(self.doc.getFileName())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(99,0,__PYX_ERR(5, 99, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GString_to_unicode(__pyx_v_self->doc->getFileName()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":98
 * 
 *     @property
 *     def filename(self):             # <<<<<<<<<<<<<<
 *         return GString_to_unicode(self.doc.getFileName())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFDoc.filename.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":102
 * 
 *     @property
 *     def has_page_labels(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self.get_catalog().hasPageLabels())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_15has_page_labels_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_15has_page_labels_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_15has_page_labels___get__(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_15has_page_labels___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[5], 102, 0, __PYX_ERR(5, 102, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":103
 *     @property
 *     def has_page_labels(self):
 *         return GBool_to_bool(self.get_catalog().hasPageLabels())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(103,0,__PYX_ERR(5, 103, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GBool_to_bool(((struct __pyx_vtabstruct_6pyxpdf_4xpdf_XPDFDoc *)__pyx_v_self->__pyx_vtab)->get_catalog(__pyx_v_self)->hasPageLabels()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":102
 * 
 *     @property
 *     def has_page_labels(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self.get_catalog().hasPageLabels())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFDoc.has_page_labels.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":106
 * 
 *     @property
 *     def num_pages(self):             # <<<<<<<<<<<<<<
 *         return self.doc.getNumPages()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_9num_pages_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_9num_pages_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_9num_pages___get__(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_9num_pages___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[5], 106, 0, __PYX_ERR(5, 106, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":107
 *     @property
 *     def num_pages(self):
 *         return self.doc.getNumPages()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(107,0,__PYX_ERR(5, 107, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->doc->getNumPages()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":106
 * 
 *     @property
 *     def num_pages(self):             # <<<<<<<<<<<<<<
 *         return self.doc.getNumPages()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFDoc.num_pages.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":110
 * 
 *     @property
 *     def pdf_version(self):             # <<<<<<<<<<<<<<
 *         return self.doc.getPDFVersion()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_11pdf_version_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_11pdf_version_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_11pdf_version___get__(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_11pdf_version___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[5], 110, 0, __PYX_ERR(5, 110, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":111
 *     @property
 *     def pdf_version(self):
 *         return self.doc.getPDFVersion()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(111,0,__PYX_ERR(5, 111, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->doc->getPDFVersion()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":110
 * 
 *     @property
 *     def pdf_version(self):             # <<<<<<<<<<<<<<
 *         return self.doc.getPDFVersion()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFDoc.pdf_version.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":114
 * 
 *     @property
 *     def is_linearized(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self.doc.isLinearized())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_13is_linearized_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_13is_linearized_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_13is_linearized___get__(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_13is_linearized___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[5], 114, 0, __PYX_ERR(5, 114, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":115
 *     @property
 *     def is_linearized(self):
 *         return GBool_to_bool(self.doc.isLinearized())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(115,0,__PYX_ERR(5, 115, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GBool_to_bool(__pyx_v_self->doc->isLinearized()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":114
 * 
 *     @property
 *     def is_linearized(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self.doc.isLinearized())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFDoc.is_linearized.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":118
 * 
 *     @property
 *     def is_encrypted(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self.doc.isEncrypted())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_12is_encrypted_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_12is_encrypted_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_12is_encrypted___get__(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_12is_encrypted___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[5], 118, 0, __PYX_ERR(5, 118, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":119
 *     @property
 *     def is_encrypted(self):
 *         return GBool_to_bool(self.doc.isEncrypted())             # <<<<<<<<<<<<<<
 * 
 *     # PDF Permissions
 */
  __Pyx_TraceLine(119,0,__PYX_ERR(5, 119, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GBool_to_bool(__pyx_v_self->doc->isEncrypted()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":118
 * 
 *     @property
 *     def is_encrypted(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self.doc.isEncrypted())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFDoc.is_encrypted.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":123
 *     # PDF Permissions
 *     @property
 *     def ok_to_print(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self.doc.okToPrint(ignoreOwnerPW=gFalse))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_11ok_to_print_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_11ok_to_print_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_11ok_to_print___get__(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_11ok_to_print___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[5], 123, 0, __PYX_ERR(5, 123, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":124
 *     @property
 *     def ok_to_print(self):
 *         return GBool_to_bool(self.doc.okToPrint(ignoreOwnerPW=gFalse))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(124,0,__PYX_ERR(5, 124, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GBool_to_bool(__pyx_v_self->doc->okToPrint(gFalse)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":123
 *     # PDF Permissions
 *     @property
 *     def ok_to_print(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self.doc.okToPrint(ignoreOwnerPW=gFalse))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFDoc.ok_to_print.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":127
 * 
 *     @property
 *     def ok_to_change(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self.doc.okToChange(ignoreOwnerPW=gFalse))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_12ok_to_change_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_12ok_to_change_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_12ok_to_change___get__(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_12ok_to_change___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[5], 127, 0, __PYX_ERR(5, 127, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":128
 *     @property
 *     def ok_to_change(self):
 *         return GBool_to_bool(self.doc.okToChange(ignoreOwnerPW=gFalse))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(128,0,__PYX_ERR(5, 128, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GBool_to_bool(__pyx_v_self->doc->okToChange(gFalse)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":127
 * 
 *     @property
 *     def ok_to_change(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self.doc.okToChange(ignoreOwnerPW=gFalse))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFDoc.ok_to_change.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":131
 * 
 *     @property
 *     def ok_to_copy(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self.doc.okToCopy(ignoreOwnerPW=gFalse))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_10ok_to_copy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_10ok_to_copy_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_10ok_to_copy___get__(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_10ok_to_copy___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[5], 131, 0, __PYX_ERR(5, 131, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":132
 *     @property
 *     def ok_to_copy(self):
 *         return GBool_to_bool(self.doc.okToCopy(ignoreOwnerPW=gFalse))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(132,0,__PYX_ERR(5, 132, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GBool_to_bool(__pyx_v_self->doc->okToCopy(gFalse)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":131
 * 
 *     @property
 *     def ok_to_copy(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self.doc.okToCopy(ignoreOwnerPW=gFalse))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFDoc.ok_to_copy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":135
 * 
 *     @property
 *     def ok_to_add_notes(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self.doc.okToAddNotes(ignoreOwnerPW=gFalse))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_15ok_to_add_notes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_15ok_to_add_notes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_15ok_to_add_notes___get__(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_15ok_to_add_notes___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[5], 135, 0, __PYX_ERR(5, 135, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":136
 *     @property
 *     def ok_to_add_notes(self):
 *         return GBool_to_bool(self.doc.okToAddNotes(ignoreOwnerPW=gFalse))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(136,0,__PYX_ERR(5, 136, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GBool_to_bool(__pyx_v_self->doc->okToAddNotes(gFalse)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":135
 * 
 *     @property
 *     def ok_to_add_notes(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self.doc.okToAddNotes(ignoreOwnerPW=gFalse))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFDoc.ok_to_add_notes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":139
 * 
 * 
 *     def info_dict(self):             # <<<<<<<<<<<<<<
 *         return self.get_info_dict()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_5info_dict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_7XPDFDoc_5info_dict = {"info_dict", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_5info_dict, METH_NOARGS, 0};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_5info_dict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("info_dict (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_4info_dict(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_4info_dict(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__25)
  __Pyx_RefNannySetupContext("info_dict", 0);
  __Pyx_TraceCall("info_dict", __pyx_f[5], 139, 0, __PYX_ERR(5, 139, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":140
 * 
 *     def info_dict(self):
 *         return self.get_info_dict()             # <<<<<<<<<<<<<<
 * 
 *     def metadata(self):
 */
  __Pyx_TraceLine(140,0,__PYX_ERR(5, 140, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_XPDFDoc *)__pyx_v_self->__pyx_vtab)->get_info_dict(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":139
 * 
 * 
 *     def info_dict(self):             # <<<<<<<<<<<<<<
 *         return self.get_info_dict()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFDoc.info_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":142
 *         return self.get_info_dict()
 * 
 *     def metadata(self):             # <<<<<<<<<<<<<<
 *         return self.get_metadata()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_7metadata(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_7XPDFDoc_7metadata = {"metadata", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_7metadata, METH_NOARGS, 0};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_7metadata(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("metadata (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_6metadata(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_6metadata(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__26)
  __Pyx_RefNannySetupContext("metadata", 0);
  __Pyx_TraceCall("metadata", __pyx_f[5], 142, 0, __PYX_ERR(5, 142, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":143
 * 
 *     def metadata(self):
 *         return self.get_metadata()             # <<<<<<<<<<<<<<
 * 
 *     cpdef get_page(self, int pgno):
 */
  __Pyx_TraceLine(143,0,__PYX_ERR(5, 143, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_XPDFDoc *)__pyx_v_self->__pyx_vtab)->get_metadata(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":142
 *         return self.get_info_dict()
 * 
 *     def metadata(self):             # <<<<<<<<<<<<<<
 *         return self.get_metadata()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFDoc.metadata", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":145
 *         return self.get_metadata()
 * 
 *     cpdef get_page(self, int pgno):             # <<<<<<<<<<<<<<
 *         if 0 <= pgno < self.num_pages:
 *             return XPage(self, pgno)
 */

static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_9get_page(PyObject *__pyx_v_self, PyObject *__pyx_arg_pgno); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_7XPDFDoc_get_page(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self, int __pyx_v_pgno, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_TraceFrameInit(__pyx_codeobj__27)
  __Pyx_RefNannySetupContext("get_page", 0);
  __Pyx_TraceCall("get_page", __pyx_f[5], 145, 0, __PYX_ERR(5, 145, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_page); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 145, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_9get_page)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_pgno); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 145, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 145, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "src/pyxpdf/document.pxi":146
 * 
 *     cpdef get_page(self, int pgno):
 *         if 0 <= pgno < self.num_pages:             # <<<<<<<<<<<<<<
 *             return XPage(self, pgno)
 *         else:
 */
  __Pyx_TraceLine(146,0,__PYX_ERR(5, 146, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_pgno); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_int_0, __pyx_t_1, Py_LE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 146, __pyx_L1_error)
  if (__Pyx_PyObject_IsTrue(__pyx_t_2)) {
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_num_pages); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 146, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(5, 146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "src/pyxpdf/document.pxi":147
 *     cpdef get_page(self, int pgno):
 *         if 0 <= pgno < self.num_pages:
 *             return XPage(self, pgno)             # <<<<<<<<<<<<<<
 *         else:
 *             return None
 */
    __Pyx_TraceLine(147,0,__PYX_ERR(5, 147, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_pgno); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPage), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "src/pyxpdf/document.pxi":146
 * 
 *     cpdef get_page(self, int pgno):
 *         if 0 <= pgno < self.num_pages:             # <<<<<<<<<<<<<<
 *             return XPage(self, pgno)
 *         else:
 */
  }

  /* "src/pyxpdf/document.pxi":149
 *             return XPage(self, pgno)
 *         else:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     cpdef get_page_from_label(self, label):
 */
  __Pyx_TraceLine(149,0,__PYX_ERR(5, 149, __pyx_L1_error))
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "src/pyxpdf/document.pxi":145
 *         return self.get_metadata()
 * 
 *     cpdef get_page(self, int pgno):             # <<<<<<<<<<<<<<
 *         if 0 <= pgno < self.num_pages:
 *             return XPage(self, pgno)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFDoc.get_page", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_9get_page(PyObject *__pyx_v_self, PyObject *__pyx_arg_pgno); /*proto*/
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_7XPDFDoc_9get_page = {"get_page", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_9get_page, METH_O, 0};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_9get_page(PyObject *__pyx_v_self, PyObject *__pyx_arg_pgno) {
  int __pyx_v_pgno;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_page (wrapper)", 0);
  assert(__pyx_arg_pgno); {
    __pyx_v_pgno = __Pyx_PyInt_As_int(__pyx_arg_pgno); if (unlikely((__pyx_v_pgno == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 145, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFDoc.get_page", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_8get_page(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *)__pyx_v_self), ((int)__pyx_v_pgno));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_8get_page(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self, int __pyx_v_pgno) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__27)
  __Pyx_RefNannySetupContext("get_page", 0);
  __Pyx_TraceCall("get_page (wrapper)", __pyx_f[5], 145, 0, __PYX_ERR(5, 145, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_7XPDFDoc_get_page(__pyx_v_self, __pyx_v_pgno, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFDoc.get_page", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":151
 *             return None
 * 
 *     cpdef get_page_from_label(self, label):             # <<<<<<<<<<<<<<
 *         cdef:
 *             int pgno
 */

static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_11get_page_from_label(PyObject *__pyx_v_self, PyObject *__pyx_v_label); /*proto*/
static PyObject *__pyx_f_6pyxpdf_4xpdf_7XPDFDoc_get_page_from_label(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self, PyObject *__pyx_v_label, int __pyx_skip_dispatch) {
  int __pyx_v_pgno;
  std::unique_ptr<TextString>  __pyx_v_tstr;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_TraceFrameInit(__pyx_codeobj__28)
  __Pyx_RefNannySetupContext("get_page_from_label", 0);
  __Pyx_TraceCall("get_page_from_label", __pyx_f[5], 151, 0, __PYX_ERR(5, 151, __pyx_L1_error));
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_page_from_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_11get_page_from_label)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_v_label) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_label);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 151, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "src/pyxpdf/document.pxi":156
 *             unique_ptr[TextString] tstr
 * 
 *         tstr.reset(to_TextString(label))             # <<<<<<<<<<<<<<
 *         pgno = self.get_catalog().getPageNumFromPageLabel(tstr.get())
 *         if pgno == -1:
 */
  __Pyx_TraceLine(156,0,__PYX_ERR(5, 156, __pyx_L1_error))
  __pyx_v_tstr.reset(__pyx_f_6pyxpdf_4xpdf_to_TextString(__pyx_v_label));

  /* "src/pyxpdf/document.pxi":157
 * 
 *         tstr.reset(to_TextString(label))
 *         pgno = self.get_catalog().getPageNumFromPageLabel(tstr.get())             # <<<<<<<<<<<<<<
 *         if pgno == -1:
 *             return None
 */
  __Pyx_TraceLine(157,0,__PYX_ERR(5, 157, __pyx_L1_error))
  __pyx_v_pgno = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_XPDFDoc *)__pyx_v_self->__pyx_vtab)->get_catalog(__pyx_v_self)->getPageNumFromPageLabel(__pyx_v_tstr.get());

  /* "src/pyxpdf/document.pxi":158
 *         tstr.reset(to_TextString(label))
 *         pgno = self.get_catalog().getPageNumFromPageLabel(tstr.get())
 *         if pgno == -1:             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */
  __Pyx_TraceLine(158,0,__PYX_ERR(5, 158, __pyx_L1_error))
  __pyx_t_5 = ((__pyx_v_pgno == -1L) != 0);
  if (__pyx_t_5) {

    /* "src/pyxpdf/document.pxi":159
 *         pgno = self.get_catalog().getPageNumFromPageLabel(tstr.get())
 *         if pgno == -1:
 *             return None             # <<<<<<<<<<<<<<
 *         else:
 *             # xpdf page index start from 1 not 0
 */
    __Pyx_TraceLine(159,0,__PYX_ERR(5, 159, __pyx_L1_error))
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "src/pyxpdf/document.pxi":158
 *         tstr.reset(to_TextString(label))
 *         pgno = self.get_catalog().getPageNumFromPageLabel(tstr.get())
 *         if pgno == -1:             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */
  }

  /* "src/pyxpdf/document.pxi":162
 *         else:
 *             # xpdf page index start from 1 not 0
 *             return self.get_page(pgno - 1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(162,0,__PYX_ERR(5, 162, __pyx_L1_error))
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_XPDFDoc *)__pyx_v_self->__pyx_vtab)->get_page(__pyx_v_self, (__pyx_v_pgno - 1), 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "src/pyxpdf/document.pxi":151
 *             return None
 * 
 *     cpdef get_page_from_label(self, label):             # <<<<<<<<<<<<<<
 *         cdef:
 *             int pgno
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFDoc.get_page_from_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_11get_page_from_label(PyObject *__pyx_v_self, PyObject *__pyx_v_label); /*proto*/
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_7XPDFDoc_11get_page_from_label = {"get_page_from_label", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_11get_page_from_label, METH_O, 0};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_11get_page_from_label(PyObject *__pyx_v_self, PyObject *__pyx_v_label) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_page_from_label (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_10get_page_from_label(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *)__pyx_v_self), ((PyObject *)__pyx_v_label));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_10get_page_from_label(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self, PyObject *__pyx_v_label) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__28)
  __Pyx_RefNannySetupContext("get_page_from_label", 0);
  __Pyx_TraceCall("get_page_from_label (wrapper)", __pyx_f[5], 151, 0, __PYX_ERR(5, 151, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_7XPDFDoc_get_page_from_label(__pyx_v_self, __pyx_v_label, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFDoc.get_page_from_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_7XPDFDoc_13__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_13__reduce_cython__, METH_NOARGS, 0};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_12__reduce_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__29)
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[4], 1, 0, __PYX_ERR(4, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(2,0,__PYX_ERR(4, 2, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(4, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFDoc.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_7XPDFDoc_15__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_15__setstate_cython__, METH_O, 0};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_14__setstate_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_7XPDFDoc_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__31)
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[4], 3, 0, __PYX_ERR(4, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(4, 4, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(4, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPDFDoc.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":174
 * 
 * 
 *     cdef display_slice(self, OutputDev* out, int x1, int y1, int hgt, int wdt,             # <<<<<<<<<<<<<<
 *                         double hDPI = 72, double vDPI = 72, int rotate = 0,
 *                         GBool use_media_box = gFalse, GBool crop = gTrue,
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_5XPage_display_slice(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self, OutputDev *__pyx_v_out, int __pyx_v_x1, int __pyx_v_y1, int __pyx_v_hgt, int __pyx_v_wdt, struct __pyx_opt_args_6pyxpdf_4xpdf_5XPage_display_slice *__pyx_optional_args) {
  double __pyx_v_hDPI = ((double)72.0);
  double __pyx_v_vDPI = ((double)72.0);
  int __pyx_v_rotate = ((int)0);
  GBool __pyx_v_use_media_box = __pyx_k__33;
  GBool __pyx_v_crop = __pyx_k__34;
  GBool __pyx_v_printing = __pyx_k__35;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("display_slice", 0);
  __Pyx_TraceCall("display_slice", __pyx_f[5], 174, 0, __PYX_ERR(5, 174, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_hDPI = __pyx_optional_args->hDPI;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_vDPI = __pyx_optional_args->vDPI;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_rotate = __pyx_optional_args->rotate;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_use_media_box = __pyx_optional_args->use_media_box;
            if (__pyx_optional_args->__pyx_n > 4) {
              __pyx_v_crop = __pyx_optional_args->crop;
              if (__pyx_optional_args->__pyx_n > 5) {
                __pyx_v_printing = __pyx_optional_args->printing;
              }
            }
          }
        }
      }
    }
  }

  /* "src/pyxpdf/document.pxi":178
 *                         GBool use_media_box = gFalse, GBool crop = gTrue,
 *                         GBool printing = gFalse):
 *         self.page.displaySlice(out, hDPI, vDPI, rotate, use_media_box, crop,             # <<<<<<<<<<<<<<
 *                                 x1, y1, hgt, wdt, printing)
 * 
 */
  __Pyx_TraceLine(178,0,__PYX_ERR(5, 178, __pyx_L1_error))
  __pyx_v_self->page->displaySlice(__pyx_v_out, __pyx_v_hDPI, __pyx_v_vDPI, __pyx_v_rotate, __pyx_v_use_media_box, __pyx_v_crop, __pyx_v_x1, __pyx_v_y1, __pyx_v_hgt, __pyx_v_wdt, __pyx_v_printing, NULL);

  /* "src/pyxpdf/document.pxi":174
 * 
 * 
 *     cdef display_slice(self, OutputDev* out, int x1, int y1, int hgt, int wdt,             # <<<<<<<<<<<<<<
 *                         double hDPI = 72, double vDPI = 72, int rotate = 0,
 *                         GBool use_media_box = gFalse, GBool crop = gTrue,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.XPage.display_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":181
 *                                 x1, y1, hgt, wdt, printing)
 * 
 *     cdef display(self, OutputDev* out, double hDPI = 72, double vDPI = 72,             # <<<<<<<<<<<<<<
 *                         int rotate = 0, GBool use_media_box = gFalse,
 *                         GBool crop = gTrue, GBool printing = gFalse):
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf_5XPage_display(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self, OutputDev *__pyx_v_out, struct __pyx_opt_args_6pyxpdf_4xpdf_5XPage_display *__pyx_optional_args) {
  double __pyx_v_hDPI = ((double)72.0);
  double __pyx_v_vDPI = ((double)72.0);
  int __pyx_v_rotate = ((int)0);
  GBool __pyx_v_use_media_box = __pyx_k__36;
  GBool __pyx_v_crop = __pyx_k__37;
  GBool __pyx_v_printing = __pyx_k__38;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6pyxpdf_4xpdf_5XPage_display_slice __pyx_t_2;
  __Pyx_RefNannySetupContext("display", 0);
  __Pyx_TraceCall("display", __pyx_f[5], 181, 0, __PYX_ERR(5, 181, __pyx_L1_error));
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_hDPI = __pyx_optional_args->hDPI;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_vDPI = __pyx_optional_args->vDPI;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_rotate = __pyx_optional_args->rotate;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_use_media_box = __pyx_optional_args->use_media_box;
            if (__pyx_optional_args->__pyx_n > 4) {
              __pyx_v_crop = __pyx_optional_args->crop;
              if (__pyx_optional_args->__pyx_n > 5) {
                __pyx_v_printing = __pyx_optional_args->printing;
              }
            }
          }
        }
      }
    }
  }

  /* "src/pyxpdf/document.pxi":184
 *                         int rotate = 0, GBool use_media_box = gFalse,
 *                         GBool crop = gTrue, GBool printing = gFalse):
 *         self.display_slice(out, -1, -1, -1, -1, hDPI, vDPI, rotate,             # <<<<<<<<<<<<<<
 *                             use_media_box, crop, printing)
 * 
 */
  __Pyx_TraceLine(184,0,__PYX_ERR(5, 184, __pyx_L1_error))
  __pyx_t_2.__pyx_n = 6;
  __pyx_t_2.hDPI = __pyx_v_hDPI;
  __pyx_t_2.vDPI = __pyx_v_vDPI;
  __pyx_t_2.rotate = __pyx_v_rotate;
  __pyx_t_2.use_media_box = __pyx_v_use_media_box;
  __pyx_t_2.crop = __pyx_v_crop;
  __pyx_t_2.printing = __pyx_v_printing;
  __pyx_t_1 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_XPage *)__pyx_v_self->__pyx_vtab)->display_slice(__pyx_v_self, __pyx_v_out, -1, -1, -1, -1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pyxpdf/document.pxi":181
 *                                 x1, y1, hgt, wdt, printing)
 * 
 *     cdef display(self, OutputDev* out, double hDPI = 72, double vDPI = 72,             # <<<<<<<<<<<<<<
 *                         int rotate = 0, GBool use_media_box = gFalse,
 *                         GBool crop = gTrue, GBool printing = gFalse):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPage.display", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":188
 * 
 * 
 *     def __cinit__(self, XPDFDoc doc not None, int index):             # <<<<<<<<<<<<<<
 *         if index < 0 or index >= doc.num_pages:
 *             raise IndexError("Page index must be positive integer less than total pages")
 */

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_5XPage_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_5XPage_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_doc = 0;
  int __pyx_v_index;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_doc,&__pyx_n_s_index,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_doc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(5, 188, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(5, 188, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_doc = ((struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *)values[0]);
    __pyx_v_index = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 188, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 188, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.XPage.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_doc), __pyx_ptype_6pyxpdf_4xpdf_XPDFDoc, 0, "doc", 0))) __PYX_ERR(5, 188, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_5XPage___cinit__(((struct __pyx_obj_6pyxpdf_4xpdf_XPage *)__pyx_v_self), __pyx_v_doc, __pyx_v_index);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_5XPage___cinit__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self, struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *__pyx_v_doc, int __pyx_v_index) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[5], 188, 0, __PYX_ERR(5, 188, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":189
 * 
 *     def __cinit__(self, XPDFDoc doc not None, int index):
 *         if index < 0 or index >= doc.num_pages:             # <<<<<<<<<<<<<<
 *             raise IndexError("Page index must be positive integer less than total pages")
 *         self.page = doc.get_catalog().getPage(index + 1)
 */
  __Pyx_TraceLine(189,0,__PYX_ERR(5, 189, __pyx_L1_error))
  __pyx_t_2 = ((__pyx_v_index < 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_doc), __pyx_n_s_num_pages); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_GE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 189, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(5, 189, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "src/pyxpdf/document.pxi":190
 *     def __cinit__(self, XPDFDoc doc not None, int index):
 *         if index < 0 or index >= doc.num_pages:
 *             raise IndexError("Page index must be positive integer less than total pages")             # <<<<<<<<<<<<<<
 *         self.page = doc.get_catalog().getPage(index + 1)
 *         self.index = index
 */
    __Pyx_TraceLine(190,0,__PYX_ERR(5, 190, __pyx_L1_error))
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(5, 190, __pyx_L1_error)

    /* "src/pyxpdf/document.pxi":189
 * 
 *     def __cinit__(self, XPDFDoc doc not None, int index):
 *         if index < 0 or index >= doc.num_pages:             # <<<<<<<<<<<<<<
 *             raise IndexError("Page index must be positive integer less than total pages")
 *         self.page = doc.get_catalog().getPage(index + 1)
 */
  }

  /* "src/pyxpdf/document.pxi":191
 *         if index < 0 or index >= doc.num_pages:
 *             raise IndexError("Page index must be positive integer less than total pages")
 *         self.page = doc.get_catalog().getPage(index + 1)             # <<<<<<<<<<<<<<
 *         self.index = index
 *         self.doc = doc
 */
  __Pyx_TraceLine(191,0,__PYX_ERR(5, 191, __pyx_L1_error))
  __pyx_v_self->page = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_XPDFDoc *)__pyx_v_doc->__pyx_vtab)->get_catalog(__pyx_v_doc)->getPage((__pyx_v_index + 1));

  /* "src/pyxpdf/document.pxi":192
 *             raise IndexError("Page index must be positive integer less than total pages")
 *         self.page = doc.get_catalog().getPage(index + 1)
 *         self.index = index             # <<<<<<<<<<<<<<
 *         self.doc = doc
 * 
 */
  __Pyx_TraceLine(192,0,__PYX_ERR(5, 192, __pyx_L1_error))
  __pyx_v_self->index = __pyx_v_index;

  /* "src/pyxpdf/document.pxi":193
 *         self.page = doc.get_catalog().getPage(index + 1)
 *         self.index = index
 *         self.doc = doc             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(193,0,__PYX_ERR(5, 193, __pyx_L1_error))
  __Pyx_INCREF(((PyObject *)__pyx_v_doc));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_doc));
  __Pyx_GOTREF(__pyx_v_self->doc);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->doc));
  __pyx_v_self->doc = __pyx_v_doc;

  /* "src/pyxpdf/document.pxi":188
 * 
 * 
 *     def __cinit__(self, XPDFDoc doc not None, int index):             # <<<<<<<<<<<<<<
 *         if index < 0 or index >= doc.num_pages:
 *             raise IndexError("Page index must be positive integer less than total pages")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPage.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":196
 * 
 * 
 *     def find_text(self, text, search_box=None, start_at_top=True, stop_at_bottom=True, start_at_last=False,             # <<<<<<<<<<<<<<
 *                 stop_at_last=False, case_sensitive=False, backward=False, wholeword=False, rotation=0):
 *         cdef double x_min = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_3find_text(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_5XPage_3find_text = {"find_text", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_5XPage_3find_text, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_3find_text(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_text = 0;
  PyObject *__pyx_v_search_box = 0;
  PyObject *__pyx_v_start_at_top = 0;
  PyObject *__pyx_v_stop_at_bottom = 0;
  PyObject *__pyx_v_start_at_last = 0;
  PyObject *__pyx_v_stop_at_last = 0;
  PyObject *__pyx_v_case_sensitive = 0;
  PyObject *__pyx_v_backward = 0;
  PyObject *__pyx_v_wholeword = 0;
  PyObject *__pyx_v_rotation = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find_text (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_text,&__pyx_n_s_search_box,&__pyx_n_s_start_at_top,&__pyx_n_s_stop_at_bottom,&__pyx_n_s_start_at_last,&__pyx_n_s_stop_at_last,&__pyx_n_s_case_sensitive,&__pyx_n_s_backward,&__pyx_n_s_wholeword,&__pyx_n_s_rotation,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_True);
    values[3] = ((PyObject *)Py_True);
    values[4] = ((PyObject *)Py_False);

    /* "src/pyxpdf/document.pxi":197
 * 
 *     def find_text(self, text, search_box=None, start_at_top=True, stop_at_bottom=True, start_at_last=False,
 *                 stop_at_last=False, case_sensitive=False, backward=False, wholeword=False, rotation=0):             # <<<<<<<<<<<<<<
 *         cdef double x_min = 0
 *         cdef double y_min = 0
 */
    values[5] = ((PyObject *)Py_False);
    values[6] = ((PyObject *)Py_False);
    values[7] = ((PyObject *)Py_False);
    values[8] = ((PyObject *)Py_False);
    values[9] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_text)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_search_box);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_start_at_top);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stop_at_bottom);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_start_at_last);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stop_at_last);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_case_sensitive);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_backward);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wholeword);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rotation);
          if (value) { values[9] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "find_text") < 0)) __PYX_ERR(5, 196, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_text = values[0];
    __pyx_v_search_box = values[1];
    __pyx_v_start_at_top = values[2];
    __pyx_v_stop_at_bottom = values[3];
    __pyx_v_start_at_last = values[4];
    __pyx_v_stop_at_last = values[5];
    __pyx_v_case_sensitive = values[6];
    __pyx_v_backward = values[7];
    __pyx_v_wholeword = values[8];
    __pyx_v_rotation = values[9];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("find_text", 0, 1, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 196, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.XPage.find_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_5XPage_2find_text(((struct __pyx_obj_6pyxpdf_4xpdf_XPage *)__pyx_v_self), __pyx_v_text, __pyx_v_search_box, __pyx_v_start_at_top, __pyx_v_stop_at_bottom, __pyx_v_start_at_last, __pyx_v_stop_at_last, __pyx_v_case_sensitive, __pyx_v_backward, __pyx_v_wholeword, __pyx_v_rotation);

  /* "src/pyxpdf/document.pxi":196
 * 
 * 
 *     def find_text(self, text, search_box=None, start_at_top=True, stop_at_bottom=True, start_at_last=False,             # <<<<<<<<<<<<<<
 *                 stop_at_last=False, case_sensitive=False, backward=False, wholeword=False, rotation=0):
 *         cdef double x_min = 0
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_2find_text(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self, PyObject *__pyx_v_text, PyObject *__pyx_v_search_box, PyObject *__pyx_v_start_at_top, PyObject *__pyx_v_stop_at_bottom, PyObject *__pyx_v_start_at_last, PyObject *__pyx_v_stop_at_last, PyObject *__pyx_v_case_sensitive, PyObject *__pyx_v_backward, PyObject *__pyx_v_wholeword, PyObject *__pyx_v_rotation) {
  double __pyx_v_x_min;
  double __pyx_v_y_min;
  double __pyx_v_x_max;
  double __pyx_v_y_max;
  int __pyx_v_rotation_value;
  std::vector<Unicode>  __pyx_v_u;
  std::unique_ptr<TextOutputControl>  __pyx_v_text_control;
  std::unique_ptr<TextOutputDev>  __pyx_v_td;
  std::unique_ptr<TextPage>  __pyx_v_text_page;
  GBool __pyx_v_res;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  int __pyx_t_5;
  struct __pyx_opt_args_6pyxpdf_4xpdf_5XPage_display __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__40)
  __Pyx_RefNannySetupContext("find_text", 0);
  __Pyx_TraceCall("find_text", __pyx_f[5], 196, 0, __PYX_ERR(5, 196, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":198
 *     def find_text(self, text, search_box=None, start_at_top=True, stop_at_bottom=True, start_at_last=False,
 *                 stop_at_last=False, case_sensitive=False, backward=False, wholeword=False, rotation=0):
 *         cdef double x_min = 0             # <<<<<<<<<<<<<<
 *         cdef double y_min = 0
 *         cdef double x_max = 0
 */
  __Pyx_TraceLine(198,0,__PYX_ERR(5, 198, __pyx_L1_error))
  __pyx_v_x_min = 0.0;

  /* "src/pyxpdf/document.pxi":199
 *                 stop_at_last=False, case_sensitive=False, backward=False, wholeword=False, rotation=0):
 *         cdef double x_min = 0
 *         cdef double y_min = 0             # <<<<<<<<<<<<<<
 *         cdef double x_max = 0
 *         cdef double y_max = 0
 */
  __Pyx_TraceLine(199,0,__PYX_ERR(5, 199, __pyx_L1_error))
  __pyx_v_y_min = 0.0;

  /* "src/pyxpdf/document.pxi":200
 *         cdef double x_min = 0
 *         cdef double y_min = 0
 *         cdef double x_max = 0             # <<<<<<<<<<<<<<
 *         cdef double y_max = 0
 *         if search_box:
 */
  __Pyx_TraceLine(200,0,__PYX_ERR(5, 200, __pyx_L1_error))
  __pyx_v_x_max = 0.0;

  /* "src/pyxpdf/document.pxi":201
 *         cdef double y_min = 0
 *         cdef double x_max = 0
 *         cdef double y_max = 0             # <<<<<<<<<<<<<<
 *         if search_box:
 *             x_min = search_box[0] or 0
 */
  __Pyx_TraceLine(201,0,__PYX_ERR(5, 201, __pyx_L1_error))
  __pyx_v_y_max = 0.0;

  /* "src/pyxpdf/document.pxi":202
 *         cdef double x_max = 0
 *         cdef double y_max = 0
 *         if search_box:             # <<<<<<<<<<<<<<
 *             x_min = search_box[0] or 0
 *             y_min = search_box[1] or 0
 */
  __Pyx_TraceLine(202,0,__PYX_ERR(5, 202, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_search_box); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(5, 202, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "src/pyxpdf/document.pxi":203
 *         cdef double y_max = 0
 *         if search_box:
 *             x_min = search_box[0] or 0             # <<<<<<<<<<<<<<
 *             y_min = search_box[1] or 0
 *             x_max = search_box[2] or 0
 */
    __Pyx_TraceLine(203,0,__PYX_ERR(5, 203, __pyx_L1_error))
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_search_box, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(5, 203, __pyx_L1_error)
    if (!__pyx_t_1) {
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(5, 203, __pyx_L1_error)
      __pyx_t_2 = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = 0;
    __pyx_L4_bool_binop_done:;
    __pyx_v_x_min = __pyx_t_2;

    /* "src/pyxpdf/document.pxi":204
 *         if search_box:
 *             x_min = search_box[0] or 0
 *             y_min = search_box[1] or 0             # <<<<<<<<<<<<<<
 *             x_max = search_box[2] or 0
 *             y_max = search_box[3] or 0
 */
    __Pyx_TraceLine(204,0,__PYX_ERR(5, 204, __pyx_L1_error))
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_search_box, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(5, 204, __pyx_L1_error)
    if (!__pyx_t_1) {
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(5, 204, __pyx_L1_error)
      __pyx_t_2 = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_2 = 0;
    __pyx_L6_bool_binop_done:;
    __pyx_v_y_min = __pyx_t_2;

    /* "src/pyxpdf/document.pxi":205
 *             x_min = search_box[0] or 0
 *             y_min = search_box[1] or 0
 *             x_max = search_box[2] or 0             # <<<<<<<<<<<<<<
 *             y_max = search_box[3] or 0
 * 
 */
    __Pyx_TraceLine(205,0,__PYX_ERR(5, 205, __pyx_L1_error))
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_search_box, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(5, 205, __pyx_L1_error)
    if (!__pyx_t_1) {
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(5, 205, __pyx_L1_error)
      __pyx_t_2 = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_2 = 0;
    __pyx_L8_bool_binop_done:;
    __pyx_v_x_max = __pyx_t_2;

    /* "src/pyxpdf/document.pxi":206
 *             y_min = search_box[1] or 0
 *             x_max = search_box[2] or 0
 *             y_max = search_box[3] or 0             # <<<<<<<<<<<<<<
 * 
 *         cdef int rotation_value = rotation
 */
    __Pyx_TraceLine(206,0,__PYX_ERR(5, 206, __pyx_L1_error))
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_search_box, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(5, 206, __pyx_L1_error)
    if (!__pyx_t_1) {
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(5, 206, __pyx_L1_error)
      __pyx_t_2 = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_2 = 0;
    __pyx_L10_bool_binop_done:;
    __pyx_v_y_max = __pyx_t_2;

    /* "src/pyxpdf/document.pxi":202
 *         cdef double x_max = 0
 *         cdef double y_max = 0
 *         if search_box:             # <<<<<<<<<<<<<<
 *             x_min = search_box[0] or 0
 *             y_min = search_box[1] or 0
 */
  }

  /* "src/pyxpdf/document.pxi":208
 *             y_max = search_box[3] or 0
 * 
 *         cdef int rotation_value = rotation             # <<<<<<<<<<<<<<
 * 
 *         # Convert python str to xpdf Unicode
 */
  __Pyx_TraceLine(208,0,__PYX_ERR(5, 208, __pyx_L1_error))
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_rotation); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 208, __pyx_L1_error)
  __pyx_v_rotation_value = __pyx_t_5;

  /* "src/pyxpdf/document.pxi":212
 *         # Convert python str to xpdf Unicode
 *         cdef vector[Unicode] u
 *         utf32_to_Unicode_vector(text, u)             # <<<<<<<<<<<<<<
 * 
 *         cdef unique_ptr[TextOutputControl] text_control = make_unique[TextOutputControl]()
 */
  __Pyx_TraceLine(212,0,__PYX_ERR(5, 212, __pyx_L1_error))
  __pyx_f_6pyxpdf_4xpdf_utf32_to_Unicode_vector(__pyx_v_text, __pyx_v_u);

  /* "src/pyxpdf/document.pxi":214
 *         utf32_to_Unicode_vector(text, u)
 * 
 *         cdef unique_ptr[TextOutputControl] text_control = make_unique[TextOutputControl]()             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[TextOutputDev] td = make_unique[TextOutputDev](<char*>NULL, text_control.get(), gFalse)
 *         cdef unique_ptr[TextPage] text_page
 */
  __Pyx_TraceLine(214,0,__PYX_ERR(5, 214, __pyx_L1_error))
  __pyx_v_text_control = std::make_unique<TextOutputControl>();

  /* "src/pyxpdf/document.pxi":215
 * 
 *         cdef unique_ptr[TextOutputControl] text_control = make_unique[TextOutputControl]()
 *         cdef unique_ptr[TextOutputDev] td = make_unique[TextOutputDev](<char*>NULL, text_control.get(), gFalse)             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[TextPage] text_page
 *         self.display(td.get(), 72, 72, rotation_value)
 */
  __Pyx_TraceLine(215,0,__PYX_ERR(5, 215, __pyx_L1_error))
  __pyx_v_td = std::make_unique<TextOutputDev>(((char *)NULL), __pyx_v_text_control.get(), gFalse);

  /* "src/pyxpdf/document.pxi":217
 *         cdef unique_ptr[TextOutputDev] td = make_unique[TextOutputDev](<char*>NULL, text_control.get(), gFalse)
 *         cdef unique_ptr[TextPage] text_page
 *         self.display(td.get(), 72, 72, rotation_value)             # <<<<<<<<<<<<<<
 *         text_page.reset(deref(td).takeText())
 * 
 */
  __Pyx_TraceLine(217,0,__PYX_ERR(5, 217, __pyx_L1_error))
  __pyx_t_6.__pyx_n = 3;
  __pyx_t_6.hDPI = 72.0;
  __pyx_t_6.vDPI = 72.0;
  __pyx_t_6.rotate = __pyx_v_rotation_value;
  __pyx_t_3 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_XPage *)__pyx_v_self->__pyx_vtab)->display(__pyx_v_self, __pyx_v_td.get(), &__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "src/pyxpdf/document.pxi":218
 *         cdef unique_ptr[TextPage] text_page
 *         self.display(td.get(), 72, 72, rotation_value)
 *         text_page.reset(deref(td).takeText())             # <<<<<<<<<<<<<<
 * 
 *         cdef GBool res = deref(text_page).findText(u.data(), u.size(), to_GBool(start_at_top),
 */
  __Pyx_TraceLine(218,0,__PYX_ERR(5, 218, __pyx_L1_error))
  __pyx_v_text_page.reset((*__pyx_v_td).takeText());

  /* "src/pyxpdf/document.pxi":220
 *         text_page.reset(deref(td).takeText())
 * 
 *         cdef GBool res = deref(text_page).findText(u.data(), u.size(), to_GBool(start_at_top),             # <<<<<<<<<<<<<<
 *                                         to_GBool(stop_at_bottom), to_GBool(start_at_last),
 *                                         to_GBool(stop_at_last), to_GBool(case_sensitive),
 */
  __Pyx_TraceLine(220,0,__PYX_ERR(5, 220, __pyx_L1_error))
  __pyx_v_res = (*__pyx_v_text_page).findText(__pyx_v_u.data(), __pyx_v_u.size(), __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_start_at_top), __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_stop_at_bottom), __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_start_at_last), __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_stop_at_last), __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_case_sensitive), __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_backward), __pyx_f_6pyxpdf_4xpdf_to_GBool(__pyx_v_wholeword), (&__pyx_v_x_min), (&__pyx_v_y_min), (&__pyx_v_x_max), (&__pyx_v_y_max));

  /* "src/pyxpdf/document.pxi":226
 *                                         &x_min, &y_min, &x_max, &y_max)
 * 
 *         return (x_min, y_min, x_max, y_max) if res == gTrue else None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(226,0,__PYX_ERR(5, 226, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  if (((__pyx_v_res == gTrue) != 0)) {
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_x_min); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyFloat_FromDouble(__pyx_v_y_min); if (unlikely(!__pyx_t_8)) __PYX_ERR(5, 226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyFloat_FromDouble(__pyx_v_x_max); if (unlikely(!__pyx_t_9)) __PYX_ERR(5, 226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = PyFloat_FromDouble(__pyx_v_y_max); if (unlikely(!__pyx_t_10)) __PYX_ERR(5, 226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = PyTuple_New(4); if (unlikely(!__pyx_t_11)) __PYX_ERR(5, 226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_11, 3, __pyx_t_10);
    __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_t_10 = 0;
    __pyx_t_3 = __pyx_t_11;
    __pyx_t_11 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_3 = Py_None;
  }
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":196
 * 
 * 
 *     def find_text(self, text, search_box=None, start_at_top=True, stop_at_bottom=True, start_at_last=False,             # <<<<<<<<<<<<<<
 *                 stop_at_last=False, case_sensitive=False, backward=False, wholeword=False, rotation=0):
 *         cdef double x_min = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPage.find_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":229
 * 
 * 
 *     def text_raw(self, search_box=None, TextControl control = None):             # <<<<<<<<<<<<<<
 *         cdef:
 *             TextOutputControl text_control = control.control if control else TextOutputControl()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_5text_raw(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_5XPage_5text_raw = {"text_raw", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_5XPage_5text_raw, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_5text_raw(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_search_box = 0;
  struct __pyx_obj_6pyxpdf_4xpdf_TextControl *__pyx_v_control = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("text_raw (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_search_box,&__pyx_n_s_control,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = (PyObject *)((struct __pyx_obj_6pyxpdf_4xpdf_TextControl *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_search_box);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_control);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "text_raw") < 0)) __PYX_ERR(5, 229, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_search_box = values[0];
    __pyx_v_control = ((struct __pyx_obj_6pyxpdf_4xpdf_TextControl *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("text_raw", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 229, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.XPage.text_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_control), __pyx_ptype_6pyxpdf_4xpdf_TextControl, 1, "control", 0))) __PYX_ERR(5, 229, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_5XPage_4text_raw(((struct __pyx_obj_6pyxpdf_4xpdf_XPage *)__pyx_v_self), __pyx_v_search_box, __pyx_v_control);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_4text_raw(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self, PyObject *__pyx_v_search_box, struct __pyx_obj_6pyxpdf_4xpdf_TextControl *__pyx_v_control) {
  TextOutputControl __pyx_v_text_control;
  std::unique_ptr<std::string>  __pyx_v_out;
  std::unique_ptr<TextOutputDev>  __pyx_v_text_dev;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  TextOutputControl __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_TraceFrameInit(__pyx_codeobj__41)
  __Pyx_RefNannySetupContext("text_raw", 0);
  __Pyx_TraceCall("text_raw", __pyx_f[5], 229, 0, __PYX_ERR(5, 229, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":231
 *     def text_raw(self, search_box=None, TextControl control = None):
 *         cdef:
 *             TextOutputControl text_control = control.control if control else TextOutputControl()             # <<<<<<<<<<<<<<
 *             unique_ptr[string] out = make_unique[string]()
 *             unique_ptr[TextOutputDev] text_dev = make_unique[TextOutputDev](&append_to_cpp_string, out.get(), &text_control)
 */
  __Pyx_TraceLine(231,0,__PYX_ERR(5, 231, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_control)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(5, 231, __pyx_L1_error)
  if (__pyx_t_2) {
    __pyx_t_1 = __pyx_v_control->control;
  } else {
    __pyx_t_1 = TextOutputControl();
  }
  __pyx_v_text_control = __pyx_t_1;

  /* "src/pyxpdf/document.pxi":232
 *         cdef:
 *             TextOutputControl text_control = control.control if control else TextOutputControl()
 *             unique_ptr[string] out = make_unique[string]()             # <<<<<<<<<<<<<<
 *             unique_ptr[TextOutputDev] text_dev = make_unique[TextOutputDev](&append_to_cpp_string, out.get(), &text_control)
 * 
 */
  __Pyx_TraceLine(232,0,__PYX_ERR(5, 232, __pyx_L1_error))
  __pyx_v_out = std::make_unique<std::string>();

  /* "src/pyxpdf/document.pxi":233
 *             TextOutputControl text_control = control.control if control else TextOutputControl()
 *             unique_ptr[string] out = make_unique[string]()
 *             unique_ptr[TextOutputDev] text_dev = make_unique[TextOutputDev](&append_to_cpp_string, out.get(), &text_control)             # <<<<<<<<<<<<<<
 * 
 *         if search_box == None:
 */
  __Pyx_TraceLine(233,0,__PYX_ERR(5, 233, __pyx_L1_error))
  __pyx_v_text_dev = std::make_unique<TextOutputDev>((&__pyx_f_6pyxpdf_4xpdf_append_to_cpp_string), __pyx_v_out.get(), (&__pyx_v_text_control));

  /* "src/pyxpdf/document.pxi":235
 *             unique_ptr[TextOutputDev] text_dev = make_unique[TextOutputDev](&append_to_cpp_string, out.get(), &text_control)
 * 
 *         if search_box == None:             # <<<<<<<<<<<<<<
 *             # Why crop=gTrue in displayPage?
 *             self.display(text_dev.get())
 */
  __Pyx_TraceLine(235,0,__PYX_ERR(5, 235, __pyx_L1_error))
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_search_box, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 235, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(5, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_2) {

    /* "src/pyxpdf/document.pxi":237
 *         if search_box == None:
 *             # Why crop=gTrue in displayPage?
 *             self.display(text_dev.get())             # <<<<<<<<<<<<<<
 *         else:
 *             self.display_slice(text_dev.get(), search_box[0], search_box[1],
 */
    __Pyx_TraceLine(237,0,__PYX_ERR(5, 237, __pyx_L1_error))
    __pyx_t_3 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_XPage *)__pyx_v_self->__pyx_vtab)->display(__pyx_v_self, __pyx_v_text_dev.get(), NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/pyxpdf/document.pxi":235
 *             unique_ptr[TextOutputDev] text_dev = make_unique[TextOutputDev](&append_to_cpp_string, out.get(), &text_control)
 * 
 *         if search_box == None:             # <<<<<<<<<<<<<<
 *             # Why crop=gTrue in displayPage?
 *             self.display(text_dev.get())
 */
    goto __pyx_L3;
  }

  /* "src/pyxpdf/document.pxi":239
 *             self.display(text_dev.get())
 *         else:
 *             self.display_slice(text_dev.get(), search_box[0], search_box[1],             # <<<<<<<<<<<<<<
 *                                 search_box[2], search_box[3])
 * 
 */
  __Pyx_TraceLine(239,0,__PYX_ERR(5, 239, __pyx_L1_error))
  /*else*/ {
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_search_box, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 239, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_search_box, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 239, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/pyxpdf/document.pxi":240
 *         else:
 *             self.display_slice(text_dev.get(), search_box[0], search_box[1],
 *                                 search_box[2], search_box[3])             # <<<<<<<<<<<<<<
 * 
 *         return deref(out)
 */
    __Pyx_TraceLine(240,0,__PYX_ERR(5, 240, __pyx_L1_error))
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_search_box, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 240, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_search_box, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 240, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/pyxpdf/document.pxi":239
 *             self.display(text_dev.get())
 *         else:
 *             self.display_slice(text_dev.get(), search_box[0], search_box[1],             # <<<<<<<<<<<<<<
 *                                 search_box[2], search_box[3])
 * 
 */
    __Pyx_TraceLine(239,0,__PYX_ERR(5, 239, __pyx_L1_error))
    __pyx_t_3 = ((struct __pyx_vtabstruct_6pyxpdf_4xpdf_XPage *)__pyx_v_self->__pyx_vtab)->display_slice(__pyx_v_self, __pyx_v_text_dev.get(), __pyx_t_4, __pyx_t_5, __pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "src/pyxpdf/document.pxi":242
 *                                 search_box[2], search_box[3])
 * 
 *         return deref(out)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(242,0,__PYX_ERR(5, 242, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string((*__pyx_v_out)); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":229
 * 
 * 
 *     def text_raw(self, search_box=None, TextControl control = None):             # <<<<<<<<<<<<<<
 *         cdef:
 *             TextOutputControl text_control = control.control if control else TextOutputControl()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPage.text_raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":245
 * 
 *     @property
 *     def label(self):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[GString] glabel
 *         cdef unique_ptr[TextString] txt_label
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_5label_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_5label_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_5XPage_5label___get__(((struct __pyx_obj_6pyxpdf_4xpdf_XPage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_5label___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self) {
  std::unique_ptr<GString>  __pyx_v_glabel;
  std::unique_ptr<TextString>  __pyx_v_txt_label;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[5], 245, 0, __PYX_ERR(5, 245, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":248
 *         cdef unique_ptr[GString] glabel
 *         cdef unique_ptr[TextString] txt_label
 *         if self.doc.get_catalog().hasPageLabels() == gTrue:             # <<<<<<<<<<<<<<
 *             txt_label.reset(self.doc.get_catalog().getPageLabel(self.index + 1))
 *             if txt_label != NULL:
 */
  __Pyx_TraceLine(248,0,__PYX_ERR(5, 248, __pyx_L1_error))
  __pyx_t_1 = ((((struct __pyx_vtabstruct_6pyxpdf_4xpdf_XPDFDoc *)__pyx_v_self->doc->__pyx_vtab)->get_catalog(__pyx_v_self->doc)->hasPageLabels() == gTrue) != 0);
  if (__pyx_t_1) {

    /* "src/pyxpdf/document.pxi":249
 *         cdef unique_ptr[TextString] txt_label
 *         if self.doc.get_catalog().hasPageLabels() == gTrue:
 *             txt_label.reset(self.doc.get_catalog().getPageLabel(self.index + 1))             # <<<<<<<<<<<<<<
 *             if txt_label != NULL:
 *                 glabel.reset(deref(txt_label).toPDFTextString())
 */
    __Pyx_TraceLine(249,0,__PYX_ERR(5, 249, __pyx_L1_error))
    __pyx_v_txt_label.reset(((struct __pyx_vtabstruct_6pyxpdf_4xpdf_XPDFDoc *)__pyx_v_self->doc->__pyx_vtab)->get_catalog(__pyx_v_self->doc)->getPageLabel((__pyx_v_self->index + 1)));

    /* "src/pyxpdf/document.pxi":250
 *         if self.doc.get_catalog().hasPageLabels() == gTrue:
 *             txt_label.reset(self.doc.get_catalog().getPageLabel(self.index + 1))
 *             if txt_label != NULL:             # <<<<<<<<<<<<<<
 *                 glabel.reset(deref(txt_label).toPDFTextString())
 *                 return GString_to_unicode(glabel.get())
 */
    __Pyx_TraceLine(250,0,__PYX_ERR(5, 250, __pyx_L1_error))
    __pyx_t_1 = ((__pyx_v_txt_label != NULL) != 0);
    if (__pyx_t_1) {

      /* "src/pyxpdf/document.pxi":251
 *             txt_label.reset(self.doc.get_catalog().getPageLabel(self.index + 1))
 *             if txt_label != NULL:
 *                 glabel.reset(deref(txt_label).toPDFTextString())             # <<<<<<<<<<<<<<
 *                 return GString_to_unicode(glabel.get())
 *             else:
 */
      __Pyx_TraceLine(251,0,__PYX_ERR(5, 251, __pyx_L1_error))
      __pyx_v_glabel.reset((*__pyx_v_txt_label).toPDFTextString());

      /* "src/pyxpdf/document.pxi":252
 *             if txt_label != NULL:
 *                 glabel.reset(deref(txt_label).toPDFTextString())
 *                 return GString_to_unicode(glabel.get())             # <<<<<<<<<<<<<<
 *             else:
 *                 return None
 */
      __Pyx_TraceLine(252,0,__PYX_ERR(5, 252, __pyx_L1_error))
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __pyx_f_6pyxpdf_4xpdf_GString_to_unicode(__pyx_v_glabel.get()); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 252, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "src/pyxpdf/document.pxi":250
 *         if self.doc.get_catalog().hasPageLabels() == gTrue:
 *             txt_label.reset(self.doc.get_catalog().getPageLabel(self.index + 1))
 *             if txt_label != NULL:             # <<<<<<<<<<<<<<
 *                 glabel.reset(deref(txt_label).toPDFTextString())
 *                 return GString_to_unicode(glabel.get())
 */
    }

    /* "src/pyxpdf/document.pxi":254
 *                 return GString_to_unicode(glabel.get())
 *             else:
 *                 return None             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
    __Pyx_TraceLine(254,0,__PYX_ERR(5, 254, __pyx_L1_error))
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
      goto __pyx_L0;
    }

    /* "src/pyxpdf/document.pxi":248
 *         cdef unique_ptr[GString] glabel
 *         cdef unique_ptr[TextString] txt_label
 *         if self.doc.get_catalog().hasPageLabels() == gTrue:             # <<<<<<<<<<<<<<
 *             txt_label.reset(self.doc.get_catalog().getPageLabel(self.index + 1))
 *             if txt_label != NULL:
 */
  }

  /* "src/pyxpdf/document.pxi":255
 *             else:
 *                 return None
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(255,0,__PYX_ERR(5, 255, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":245
 * 
 *     @property
 *     def label(self):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[GString] glabel
 *         cdef unique_ptr[TextString] txt_label
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPage.label.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":259
 * 
 *     @property
 *     def rotation(self):             # <<<<<<<<<<<<<<
 *         return self.page.getRotate()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_8rotation_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_8rotation_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_5XPage_8rotation___get__(((struct __pyx_obj_6pyxpdf_4xpdf_XPage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_8rotation___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[5], 259, 0, __PYX_ERR(5, 259, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":260
 *     @property
 *     def rotation(self):
 *         return self.page.getRotate()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(260,0,__PYX_ERR(5, 260, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->page->getRotate()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":259
 * 
 *     @property
 *     def rotation(self):             # <<<<<<<<<<<<<<
 *         return self.page.getRotate()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPage.rotation.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":263
 * 
 *     @property
 *     def is_cropped(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self.page.isCropped())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_10is_cropped_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_10is_cropped_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_5XPage_10is_cropped___get__(((struct __pyx_obj_6pyxpdf_4xpdf_XPage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_10is_cropped___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[5], 263, 0, __PYX_ERR(5, 263, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":264
 *     @property
 *     def is_cropped(self):
 *         return GBool_to_bool(self.page.isCropped())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(264,0,__PYX_ERR(5, 264, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_GBool_to_bool(__pyx_v_self->page->isCropped()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":263
 * 
 *     @property
 *     def is_cropped(self):             # <<<<<<<<<<<<<<
 *         return GBool_to_bool(self.page.isCropped())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPage.is_cropped.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":267
 * 
 *     @property
 *     def media_height(self):             # <<<<<<<<<<<<<<
 *         return self.page.getMediaHeight()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_12media_height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_12media_height_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_5XPage_12media_height___get__(((struct __pyx_obj_6pyxpdf_4xpdf_XPage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_12media_height___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[5], 267, 0, __PYX_ERR(5, 267, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":268
 *     @property
 *     def media_height(self):
 *         return self.page.getMediaHeight()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(268,0,__PYX_ERR(5, 268, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->page->getMediaHeight()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":267
 * 
 *     @property
 *     def media_height(self):             # <<<<<<<<<<<<<<
 *         return self.page.getMediaHeight()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPage.media_height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":271
 * 
 *     @property
 *     def media_width(self):             # <<<<<<<<<<<<<<
 *         return self.page.getMediaWidth()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_11media_width_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_11media_width_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_5XPage_11media_width___get__(((struct __pyx_obj_6pyxpdf_4xpdf_XPage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_11media_width___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[5], 271, 0, __PYX_ERR(5, 271, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":272
 *     @property
 *     def media_width(self):
 *         return self.page.getMediaWidth()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(272,0,__PYX_ERR(5, 272, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->page->getMediaWidth()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":271
 * 
 *     @property
 *     def media_width(self):             # <<<<<<<<<<<<<<
 *         return self.page.getMediaWidth()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPage.media_width.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":279
 * 
 *     @property
 *     def crop_height(self):             # <<<<<<<<<<<<<<
 *         return self.page.getCropHeight()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_11crop_height_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_11crop_height_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_5XPage_11crop_height___get__(((struct __pyx_obj_6pyxpdf_4xpdf_XPage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_11crop_height___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[5], 279, 0, __PYX_ERR(5, 279, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":280
 *     @property
 *     def crop_height(self):
 *         return self.page.getCropHeight()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(280,0,__PYX_ERR(5, 280, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->page->getCropHeight()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":279
 * 
 *     @property
 *     def crop_height(self):             # <<<<<<<<<<<<<<
 *         return self.page.getCropHeight()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPage.crop_height.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":283
 * 
 *     @property
 *     def mediabox(self):             # <<<<<<<<<<<<<<
 *         return PDFRectangle_to_tuple(self.page.getMediaBox())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_8mediabox_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_8mediabox_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_5XPage_8mediabox___get__(((struct __pyx_obj_6pyxpdf_4xpdf_XPage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_8mediabox___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[5], 283, 0, __PYX_ERR(5, 283, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":284
 *     @property
 *     def mediabox(self):
 *         return PDFRectangle_to_tuple(self.page.getMediaBox())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(284,0,__PYX_ERR(5, 284, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_PDFRectangle_to_tuple(__pyx_v_self->page->getMediaBox()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":283
 * 
 *     @property
 *     def mediabox(self):             # <<<<<<<<<<<<<<
 *         return PDFRectangle_to_tuple(self.page.getMediaBox())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPage.mediabox.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":287
 * 
 *     @property
 *     def cropbox(self):             # <<<<<<<<<<<<<<
 *         return PDFRectangle_to_tuple(self.page.getCropBox())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_7cropbox_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_7cropbox_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_5XPage_7cropbox___get__(((struct __pyx_obj_6pyxpdf_4xpdf_XPage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_7cropbox___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[5], 287, 0, __PYX_ERR(5, 287, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":288
 *     @property
 *     def cropbox(self):
 *         return PDFRectangle_to_tuple(self.page.getCropBox())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(288,0,__PYX_ERR(5, 288, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_PDFRectangle_to_tuple(__pyx_v_self->page->getCropBox()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":287
 * 
 *     @property
 *     def cropbox(self):             # <<<<<<<<<<<<<<
 *         return PDFRectangle_to_tuple(self.page.getCropBox())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPage.cropbox.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":291
 * 
 *     @property
 *     def bleedbox(self):             # <<<<<<<<<<<<<<
 *         return PDFRectangle_to_tuple(self.page.getBleedBox())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_8bleedbox_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_8bleedbox_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_5XPage_8bleedbox___get__(((struct __pyx_obj_6pyxpdf_4xpdf_XPage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_8bleedbox___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[5], 291, 0, __PYX_ERR(5, 291, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":292
 *     @property
 *     def bleedbox(self):
 *         return PDFRectangle_to_tuple(self.page.getBleedBox())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(292,0,__PYX_ERR(5, 292, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_PDFRectangle_to_tuple(__pyx_v_self->page->getBleedBox()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":291
 * 
 *     @property
 *     def bleedbox(self):             # <<<<<<<<<<<<<<
 *         return PDFRectangle_to_tuple(self.page.getBleedBox())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPage.bleedbox.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":295
 * 
 *     @property
 *     def trimbox(self):             # <<<<<<<<<<<<<<
 *         return PDFRectangle_to_tuple(self.page.getTrimBox())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_7trimbox_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_7trimbox_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_5XPage_7trimbox___get__(((struct __pyx_obj_6pyxpdf_4xpdf_XPage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_7trimbox___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[5], 295, 0, __PYX_ERR(5, 295, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":296
 *     @property
 *     def trimbox(self):
 *         return PDFRectangle_to_tuple(self.page.getTrimBox())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(296,0,__PYX_ERR(5, 296, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_PDFRectangle_to_tuple(__pyx_v_self->page->getTrimBox()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":295
 * 
 *     @property
 *     def trimbox(self):             # <<<<<<<<<<<<<<
 *         return PDFRectangle_to_tuple(self.page.getTrimBox())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPage.trimbox.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":299
 * 
 *     @property
 *     def artbox(self):             # <<<<<<<<<<<<<<
 *         return PDFRectangle_to_tuple(self.page.getArtBox())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_6artbox_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_6artbox_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_5XPage_6artbox___get__(((struct __pyx_obj_6pyxpdf_4xpdf_XPage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_6artbox___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[5], 299, 0, __PYX_ERR(5, 299, __pyx_L1_error));

  /* "src/pyxpdf/document.pxi":300
 *     @property
 *     def artbox(self):
 *         return PDFRectangle_to_tuple(self.page.getArtBox())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(300,0,__PYX_ERR(5, 300, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6pyxpdf_4xpdf_PDFRectangle_to_tuple(__pyx_v_self->page->getArtBox()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyxpdf/document.pxi":299
 * 
 *     @property
 *     def artbox(self):             # <<<<<<<<<<<<<<
 *         return PDFRectangle_to_tuple(self.page.getArtBox())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPage.artbox.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":170
 *     # No need to free Page* as it is own by PDFDoc
 *     cdef Page *page
 *     cdef public int index             # <<<<<<<<<<<<<<
 *     cdef readonly XPDFDoc doc
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_5index_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_5index_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_5XPage_5index___get__(((struct __pyx_obj_6pyxpdf_4xpdf_XPage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_5index___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[5], 170, 0, __PYX_ERR(5, 170, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->index); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPage.index.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6pyxpdf_4xpdf_5XPage_5index_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6pyxpdf_4xpdf_5XPage_5index_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_5XPage_5index_2__set__(((struct __pyx_obj_6pyxpdf_4xpdf_XPage *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pyxpdf_4xpdf_5XPage_5index_2__set__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[5], 170, 0, __PYX_ERR(5, 170, __pyx_L1_error));
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 170, __pyx_L1_error)
  __pyx_v_self->index = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.XPage.index.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyxpdf/document.pxi":171
 *     cdef Page *page
 *     cdef public int index
 *     cdef readonly XPDFDoc doc             # <<<<<<<<<<<<<<
 * 
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_3doc_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_3doc_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_5XPage_3doc___get__(((struct __pyx_obj_6pyxpdf_4xpdf_XPage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_3doc___get__(struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[5], 171, 0, __PYX_ERR(5, 171, __pyx_L1_error));
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->doc));
  __pyx_r = ((PyObject *)__pyx_v_self->doc);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.XPage.doc.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_5XPage_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_5XPage_7__reduce_cython__, METH_NOARGS, 0};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_5XPage_6__reduce_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_XPage *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__42)
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[4], 1, 0, __PYX_ERR(4, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(2,0,__PYX_ERR(4, 2, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(4, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPage.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_5XPage_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_5XPage_9__setstate_cython__, METH_O, 0};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_5XPage_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_5XPage_8__setstate_cython__(((struct __pyx_obj_6pyxpdf_4xpdf_XPage *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_5XPage_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pyxpdf_4xpdf_XPage *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_TraceFrameInit(__pyx_codeobj__44)
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[4], 3, 0, __PYX_ERR(4, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(4, 4, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(4, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyxpdf.xpdf.XPage.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_PDFError(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pyxpdf_4xpdf_3__pyx_unpickle_PDFError(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6pyxpdf_4xpdf_3__pyx_unpickle_PDFError = {"__pyx_unpickle_PDFError", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_3__pyx_unpickle_PDFError, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6pyxpdf_4xpdf_3__pyx_unpickle_PDFError(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_PDFError (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PDFError", 1, 3, 3, 1); __PYX_ERR(4, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PDFError", 1, 3, 3, 2); __PYX_ERR(4, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_PDFError") < 0)) __PYX_ERR(4, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(4, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_PDFError", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_PDFError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pyxpdf_4xpdf_2__pyx_unpickle_PDFError(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pyxpdf_4xpdf_2__pyx_unpickle_PDFError(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_TraceFrameInit(__pyx_codeobj__46)
  __Pyx_RefNannySetupContext("__pyx_unpickle_PDFError", 0);
  __Pyx_TraceCall("__pyx_unpickle_PDFError", __pyx_f[4], 1, 0, __PYX_ERR(4, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(4, 4, __pyx_L1_error))
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xd41d8cd) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = PDFError.__new__(__pyx_type)
 */
    __Pyx_TraceLine(5,0,__PYX_ERR(4, 5, __pyx_L1_error))
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xd41d8cd:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = PDFError.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __Pyx_TraceLine(6,0,__PYX_ERR(4, 6, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(4, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xd41d8cd:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = PDFError.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PDFError__set_state(<PDFError> __pyx_result, __pyx_state)
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(4, 7, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFError), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = PDFError.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PDFError__set_state(<PDFError> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __Pyx_TraceLine(8,0,__PYX_ERR(4, 8, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = PDFError.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PDFError__set_state(<PDFError> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFError__set_state(PDFError __pyx_result, tuple __pyx_state):
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(4, 9, __pyx_L1_error))
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(4, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_f_6pyxpdf_4xpdf___pyx_unpickle_PDFError__set_state(((struct __pyx_obj_6pyxpdf_4xpdf_PDFError *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xd41d8cd = ())" % __pyx_checksum)
 *     __pyx_result = PDFError.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_PDFError__set_state(<PDFError> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_PDFError__set_state(<PDFError> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_PDFError__set_state(PDFError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_TraceLine(10,0,__PYX_ERR(4, 10, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_PDFError(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_PDFError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_PDFError__set_state(<PDFError> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFError__set_state(PDFError __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_6pyxpdf_4xpdf___pyx_unpickle_PDFError__set_state(struct __pyx_obj_6pyxpdf_4xpdf_PDFError *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_PDFError__set_state", 0);
  __Pyx_TraceCall("__pyx_unpickle_PDFError__set_state", __pyx_f[4], 11, 0, __PYX_ERR(4, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFError__set_state(PDFError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(4, 12, __pyx_L1_error))
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(4, 12, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(4, 12, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(4, 12, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_PDFError__set_state(PDFError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(4, 13, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(4, 13, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFError__set_state(PDFError __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_PDFError__set_state(<PDFError> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFError__set_state(PDFError __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyxpdf.xpdf.__pyx_unpickle_PDFError__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_f[4], 31, 0, __PYX_ERR(4, 31, __pyx_L1_error));

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_TraceLine(32,0,__PYX_ERR(4, 32, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_f[4], 37, 0, __PYX_ERR(4, 37, __pyx_L1_error));

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_TraceLine(38,0,__PYX_ERR(4, 38, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_f[4], 43, 0, __PYX_ERR(4, 43, __pyx_L1_error));

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_TraceLine(44,0,__PYX_ERR(4, 44, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_f[4], 49, 0, __PYX_ERR(4, 49, __pyx_L1_error));

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_TraceLine(50,0,__PYX_ERR(4, 50, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_f[4], 55, 0, __PYX_ERR(4, 55, __pyx_L1_error));

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_TraceLine(56,0,__PYX_ERR(4, 56, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_PDFError(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (&((PyTypeObject*)PyExc_Exception)[0])->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6pyxpdf_4xpdf_PDFError(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  (&((PyTypeObject*)PyExc_Exception)[0])->tp_dealloc(o);
}

static int __pyx_tp_traverse_6pyxpdf_4xpdf_PDFError(PyObject *o, visitproc v, void *a) {
  int e;
  if (!(&((PyTypeObject*)PyExc_Exception)[0])->tp_traverse); else { e = (&((PyTypeObject*)PyExc_Exception)[0])->tp_traverse(o,v,a); if (e) return e; }
  return 0;
}

static int __pyx_tp_clear_6pyxpdf_4xpdf_PDFError(PyObject *o) {
  if (!(&((PyTypeObject*)PyExc_Exception)[0])->tp_clear); else (&((PyTypeObject*)PyExc_Exception)[0])->tp_clear(o);
  return 0;
}

static PyMethodDef __pyx_methods_6pyxpdf_4xpdf_PDFError[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_8PDFError_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_8PDFError_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pyxpdf_4xpdf_PDFError = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyxpdf.xpdf.PDFError", /*tp_name*/
  sizeof(struct __pyx_obj_6pyxpdf_4xpdf_PDFError), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyxpdf_4xpdf_PDFError, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Main exception base class for pyxpdf.  All other exceptions inherit from\n    this one.\n    ", /*tp_doc*/
  __pyx_tp_traverse_6pyxpdf_4xpdf_PDFError, /*tp_traverse*/
  __pyx_tp_clear_6pyxpdf_4xpdf_PDFError, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyxpdf_4xpdf_PDFError, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6pyxpdf_4xpdf_8PDFError_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyxpdf_4xpdf_PDFError, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_GlobalParamsConfig(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_3__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6pyxpdf_4xpdf_GlobalParamsConfig(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_18GlobalParamsConfig_base_dir(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_8base_dir_1__get__(o);
}

static int __pyx_setprop_6pyxpdf_4xpdf_18GlobalParamsConfig_base_dir(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_8base_dir_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_18GlobalParamsConfig_ps_paper_width(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_14ps_paper_width_1__get__(o);
}

static int __pyx_setprop_6pyxpdf_4xpdf_18GlobalParamsConfig_ps_paper_width(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_14ps_paper_width_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_18GlobalParamsConfig_ps_paper_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_15ps_paper_height_1__get__(o);
}

static int __pyx_setprop_6pyxpdf_4xpdf_18GlobalParamsConfig_ps_paper_height(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_15ps_paper_height_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_18GlobalParamsConfig_text_encoding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_13text_encoding_1__get__(o);
}

static int __pyx_setprop_6pyxpdf_4xpdf_18GlobalParamsConfig_text_encoding(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_13text_encoding_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_18GlobalParamsConfig_text_eol(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_8text_eol_1__get__(o);
}

static int __pyx_setprop_6pyxpdf_4xpdf_18GlobalParamsConfig_text_eol(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_8text_eol_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_18GlobalParamsConfig_text_page_breaks(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_16text_page_breaks_1__get__(o);
}

static int __pyx_setprop_6pyxpdf_4xpdf_18GlobalParamsConfig_text_page_breaks(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_16text_page_breaks_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_18GlobalParamsConfig_text_keep_tiny(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_14text_keep_tiny_1__get__(o);
}

static int __pyx_setprop_6pyxpdf_4xpdf_18GlobalParamsConfig_text_keep_tiny(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_14text_keep_tiny_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_18GlobalParamsConfig_print_commands(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_14print_commands_1__get__(o);
}

static int __pyx_setprop_6pyxpdf_4xpdf_18GlobalParamsConfig_print_commands(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_14print_commands_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_18GlobalParamsConfig_error_quiet(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_11error_quiet_1__get__(o);
}

static int __pyx_setprop_6pyxpdf_4xpdf_18GlobalParamsConfig_error_quiet(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_11error_quiet_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_18GlobalParamsConfig_default_text_encoding(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_21default_text_encoding_1__get__(o);
}

static PyMethodDef __pyx_methods_6pyxpdf_4xpdf_GlobalParamsConfig[] = {
  {"load_file", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_1load_file, METH_O, 0},
  {"setup_base_fonts", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_7setup_base_fonts, METH_O, 0},
  {"map_name_to_unicode", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_9map_name_to_unicode, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_18GlobalParamsConfig_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6pyxpdf_4xpdf_GlobalParamsConfig[] = {
  {(char *)"base_dir", __pyx_getprop_6pyxpdf_4xpdf_18GlobalParamsConfig_base_dir, __pyx_setprop_6pyxpdf_4xpdf_18GlobalParamsConfig_base_dir, (char *)0, 0},
  {(char *)"ps_paper_width", __pyx_getprop_6pyxpdf_4xpdf_18GlobalParamsConfig_ps_paper_width, __pyx_setprop_6pyxpdf_4xpdf_18GlobalParamsConfig_ps_paper_width, (char *)0, 0},
  {(char *)"ps_paper_height", __pyx_getprop_6pyxpdf_4xpdf_18GlobalParamsConfig_ps_paper_height, __pyx_setprop_6pyxpdf_4xpdf_18GlobalParamsConfig_ps_paper_height, (char *)0, 0},
  {(char *)"text_encoding", __pyx_getprop_6pyxpdf_4xpdf_18GlobalParamsConfig_text_encoding, __pyx_setprop_6pyxpdf_4xpdf_18GlobalParamsConfig_text_encoding, (char *)0, 0},
  {(char *)"text_eol", __pyx_getprop_6pyxpdf_4xpdf_18GlobalParamsConfig_text_eol, __pyx_setprop_6pyxpdf_4xpdf_18GlobalParamsConfig_text_eol, (char *)0, 0},
  {(char *)"text_page_breaks", __pyx_getprop_6pyxpdf_4xpdf_18GlobalParamsConfig_text_page_breaks, __pyx_setprop_6pyxpdf_4xpdf_18GlobalParamsConfig_text_page_breaks, (char *)0, 0},
  {(char *)"text_keep_tiny", __pyx_getprop_6pyxpdf_4xpdf_18GlobalParamsConfig_text_keep_tiny, __pyx_setprop_6pyxpdf_4xpdf_18GlobalParamsConfig_text_keep_tiny, (char *)0, 0},
  {(char *)"print_commands", __pyx_getprop_6pyxpdf_4xpdf_18GlobalParamsConfig_print_commands, __pyx_setprop_6pyxpdf_4xpdf_18GlobalParamsConfig_print_commands, (char *)0, 0},
  {(char *)"error_quiet", __pyx_getprop_6pyxpdf_4xpdf_18GlobalParamsConfig_error_quiet, __pyx_setprop_6pyxpdf_4xpdf_18GlobalParamsConfig_error_quiet, (char *)0, 0},
  {(char *)"default_text_encoding", __pyx_getprop_6pyxpdf_4xpdf_18GlobalParamsConfig_default_text_encoding, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pyxpdf_4xpdf_GlobalParamsConfig = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyxpdf.xpdf.GlobalParamsConfig", /*tp_name*/
  sizeof(struct __pyx_obj_6pyxpdf_4xpdf_GlobalParamsConfig), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyxpdf_4xpdf_GlobalParamsConfig, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyxpdf_4xpdf_GlobalParamsConfig, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6pyxpdf_4xpdf_GlobalParamsConfig, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyxpdf_4xpdf_GlobalParamsConfig, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_TextControl(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6pyxpdf_4xpdf_TextControl *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6pyxpdf_4xpdf_TextControl *)o);
  new((void*)&(p->control)) TextOutputControl();
  if (unlikely(__pyx_pw_6pyxpdf_4xpdf_11TextControl_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6pyxpdf_4xpdf_TextControl(PyObject *o) {
  struct __pyx_obj_6pyxpdf_4xpdf_TextControl *p = (struct __pyx_obj_6pyxpdf_4xpdf_TextControl *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->control);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6pyxpdf_4xpdf_TextControl[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_11TextControl_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_11TextControl_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pyxpdf_4xpdf_TextControl = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyxpdf.xpdf.TextControl", /*tp_name*/
  sizeof(struct __pyx_obj_6pyxpdf_4xpdf_TextControl), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyxpdf_4xpdf_TextControl, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyxpdf_4xpdf_TextControl, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyxpdf_4xpdf_TextControl, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_6pyxpdf_4xpdf_XPDFDoc __pyx_vtable_6pyxpdf_4xpdf_XPDFDoc;

static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_XPDFDoc(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *)o);
  p->__pyx_vtab = __pyx_vtabptr_6pyxpdf_4xpdf_XPDFDoc;
  p->doc_data = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6pyxpdf_4xpdf_XPDFDoc(PyObject *o) {
  struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *p = (struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->doc_data);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_7XPDFDoc_filename(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_8filename_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_7XPDFDoc_has_page_labels(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_15has_page_labels_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_7XPDFDoc_num_pages(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_9num_pages_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_7XPDFDoc_pdf_version(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_11pdf_version_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_7XPDFDoc_is_linearized(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_13is_linearized_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_7XPDFDoc_is_encrypted(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_12is_encrypted_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_7XPDFDoc_ok_to_print(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_11ok_to_print_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_7XPDFDoc_ok_to_change(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_12ok_to_change_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_7XPDFDoc_ok_to_copy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_10ok_to_copy_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_7XPDFDoc_ok_to_add_notes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_15ok_to_add_notes_1__get__(o);
}

static PyMethodDef __pyx_methods_6pyxpdf_4xpdf_XPDFDoc[] = {
  {"info_dict", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_5info_dict, METH_NOARGS, 0},
  {"metadata", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_7metadata, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_7XPDFDoc_15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6pyxpdf_4xpdf_XPDFDoc[] = {
  {(char *)"filename", __pyx_getprop_6pyxpdf_4xpdf_7XPDFDoc_filename, 0, (char *)0, 0},
  {(char *)"has_page_labels", __pyx_getprop_6pyxpdf_4xpdf_7XPDFDoc_has_page_labels, 0, (char *)0, 0},
  {(char *)"num_pages", __pyx_getprop_6pyxpdf_4xpdf_7XPDFDoc_num_pages, 0, (char *)0, 0},
  {(char *)"pdf_version", __pyx_getprop_6pyxpdf_4xpdf_7XPDFDoc_pdf_version, 0, (char *)0, 0},
  {(char *)"is_linearized", __pyx_getprop_6pyxpdf_4xpdf_7XPDFDoc_is_linearized, 0, (char *)0, 0},
  {(char *)"is_encrypted", __pyx_getprop_6pyxpdf_4xpdf_7XPDFDoc_is_encrypted, 0, (char *)0, 0},
  {(char *)"ok_to_print", __pyx_getprop_6pyxpdf_4xpdf_7XPDFDoc_ok_to_print, 0, (char *)0, 0},
  {(char *)"ok_to_change", __pyx_getprop_6pyxpdf_4xpdf_7XPDFDoc_ok_to_change, 0, (char *)0, 0},
  {(char *)"ok_to_copy", __pyx_getprop_6pyxpdf_4xpdf_7XPDFDoc_ok_to_copy, 0, (char *)0, 0},
  {(char *)"ok_to_add_notes", __pyx_getprop_6pyxpdf_4xpdf_7XPDFDoc_ok_to_add_notes, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pyxpdf_4xpdf_XPDFDoc = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyxpdf.xpdf.XPDFDoc", /*tp_name*/
  sizeof(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyxpdf_4xpdf_XPDFDoc, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyxpdf_4xpdf_XPDFDoc, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6pyxpdf_4xpdf_XPDFDoc, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyxpdf_4xpdf_XPDFDoc, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_6pyxpdf_4xpdf_XPage __pyx_vtable_6pyxpdf_4xpdf_XPage;

static PyObject *__pyx_tp_new_6pyxpdf_4xpdf_XPage(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6pyxpdf_4xpdf_XPage *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6pyxpdf_4xpdf_XPage *)o);
  p->__pyx_vtab = __pyx_vtabptr_6pyxpdf_4xpdf_XPage;
  p->doc = ((struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6pyxpdf_4xpdf_5XPage_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6pyxpdf_4xpdf_XPage(PyObject *o) {
  struct __pyx_obj_6pyxpdf_4xpdf_XPage *p = (struct __pyx_obj_6pyxpdf_4xpdf_XPage *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->doc);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6pyxpdf_4xpdf_XPage(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pyxpdf_4xpdf_XPage *p = (struct __pyx_obj_6pyxpdf_4xpdf_XPage *)o;
  if (p->doc) {
    e = (*v)(((PyObject *)p->doc), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pyxpdf_4xpdf_XPage(PyObject *o) {
  struct __pyx_obj_6pyxpdf_4xpdf_XPage *p = (struct __pyx_obj_6pyxpdf_4xpdf_XPage *)o;
  Py_CLEAR(p->doc);
  return 0;
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_5XPage_label(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_5XPage_5label_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_5XPage_rotation(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_5XPage_8rotation_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_5XPage_is_cropped(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_5XPage_10is_cropped_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_5XPage_media_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_5XPage_12media_height_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_5XPage_media_width(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_5XPage_11media_width_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_5XPage_crop_height(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_5XPage_11crop_height_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_5XPage_mediabox(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_5XPage_8mediabox_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_5XPage_cropbox(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_5XPage_7cropbox_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_5XPage_bleedbox(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_5XPage_8bleedbox_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_5XPage_trimbox(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_5XPage_7trimbox_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_5XPage_artbox(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_5XPage_6artbox_1__get__(o);
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_5XPage_index(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_5XPage_5index_1__get__(o);
}

static int __pyx_setprop_6pyxpdf_4xpdf_5XPage_index(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6pyxpdf_4xpdf_5XPage_5index_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6pyxpdf_4xpdf_5XPage_doc(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6pyxpdf_4xpdf_5XPage_3doc_1__get__(o);
}

static PyMethodDef __pyx_methods_6pyxpdf_4xpdf_XPage[] = {
  {"find_text", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_5XPage_3find_text, METH_VARARGS|METH_KEYWORDS, 0},
  {"text_raw", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pyxpdf_4xpdf_5XPage_5text_raw, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_5XPage_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6pyxpdf_4xpdf_5XPage_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6pyxpdf_4xpdf_XPage[] = {
  {(char *)"label", __pyx_getprop_6pyxpdf_4xpdf_5XPage_label, 0, (char *)0, 0},
  {(char *)"rotation", __pyx_getprop_6pyxpdf_4xpdf_5XPage_rotation, 0, (char *)0, 0},
  {(char *)"is_cropped", __pyx_getprop_6pyxpdf_4xpdf_5XPage_is_cropped, 0, (char *)0, 0},
  {(char *)"media_height", __pyx_getprop_6pyxpdf_4xpdf_5XPage_media_height, 0, (char *)0, 0},
  {(char *)"media_width", __pyx_getprop_6pyxpdf_4xpdf_5XPage_media_width, 0, (char *)0, 0},
  {(char *)"crop_height", __pyx_getprop_6pyxpdf_4xpdf_5XPage_crop_height, 0, (char *)0, 0},
  {(char *)"mediabox", __pyx_getprop_6pyxpdf_4xpdf_5XPage_mediabox, 0, (char *)0, 0},
  {(char *)"cropbox", __pyx_getprop_6pyxpdf_4xpdf_5XPage_cropbox, 0, (char *)0, 0},
  {(char *)"bleedbox", __pyx_getprop_6pyxpdf_4xpdf_5XPage_bleedbox, 0, (char *)0, 0},
  {(char *)"trimbox", __pyx_getprop_6pyxpdf_4xpdf_5XPage_trimbox, 0, (char *)0, 0},
  {(char *)"artbox", __pyx_getprop_6pyxpdf_4xpdf_5XPage_artbox, 0, (char *)0, 0},
  {(char *)"index", __pyx_getprop_6pyxpdf_4xpdf_5XPage_index, __pyx_setprop_6pyxpdf_4xpdf_5XPage_index, (char *)0, 0},
  {(char *)"doc", __pyx_getprop_6pyxpdf_4xpdf_5XPage_doc, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pyxpdf_4xpdf_XPage = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyxpdf.xpdf.XPage", /*tp_name*/
  sizeof(struct __pyx_obj_6pyxpdf_4xpdf_XPage), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pyxpdf_4xpdf_XPage, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pyxpdf_4xpdf_XPage, /*tp_traverse*/
  __pyx_tp_clear_6pyxpdf_4xpdf_XPage, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pyxpdf_4xpdf_XPage, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6pyxpdf_4xpdf_XPage, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pyxpdf_4xpdf_XPage, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_xpdf(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_xpdf},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "xpdf",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    (freefunc)__pyx_module_cleanup /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_kp_u_Cannot_Parse_PDF_ErrorCode, __pyx_k_Cannot_Parse_PDF_ErrorCode, sizeof(__pyx_k_Cannot_Parse_PDF_ErrorCode), 0, 1, 0, 0},
  {&__pyx_kp_s_Cannot_allocate_memory_for_inter, __pyx_k_Cannot_allocate_memory_for_inter, sizeof(__pyx_k_Cannot_allocate_memory_for_inter), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_create_GlobalParamsConfig, __pyx_k_Cannot_create_GlobalParamsConfig, sizeof(__pyx_k_Cannot_create_GlobalParamsConfig), 0, 0, 1, 0},
  {&__pyx_kp_u_Cannot_open_pdf_file_ErrorCode, __pyx_k_Cannot_open_pdf_file_ErrorCode, sizeof(__pyx_k_Cannot_open_pdf_file_ErrorCode), 0, 1, 0, 0},
  {&__pyx_n_s_Config, __pyx_k_Config, sizeof(__pyx_k_Config), 0, 0, 1, 1},
  {&__pyx_kp_s_Copying_of_text_from_this_docume, __pyx_k_Copying_of_text_from_this_docume, sizeof(__pyx_k_Copying_of_text_from_this_docume), 0, 0, 1, 0},
  {&__pyx_kp_s_Error_in_pdf_options, __pyx_k_Error_in_pdf_options, sizeof(__pyx_k_Error_in_pdf_options), 0, 0, 1, 0},
  {&__pyx_n_s_GlobalParamsConfig, __pyx_k_GlobalParamsConfig, sizeof(__pyx_k_GlobalParamsConfig), 0, 0, 1, 1},
  {&__pyx_n_s_GlobalParamsConfig___reduce_cyth, __pyx_k_GlobalParamsConfig___reduce_cyth, sizeof(__pyx_k_GlobalParamsConfig___reduce_cyth), 0, 0, 1, 1},
  {&__pyx_n_s_GlobalParamsConfig___setstate_cy, __pyx_k_GlobalParamsConfig___setstate_cy, sizeof(__pyx_k_GlobalParamsConfig___setstate_cy), 0, 0, 1, 1},
  {&__pyx_n_s_GlobalParamsConfig_load_file, __pyx_k_GlobalParamsConfig_load_file, sizeof(__pyx_k_GlobalParamsConfig_load_file), 0, 0, 1, 1},
  {&__pyx_n_s_GlobalParamsConfig_map_name_to_u, __pyx_k_GlobalParamsConfig_map_name_to_u, sizeof(__pyx_k_GlobalParamsConfig_map_name_to_u), 0, 0, 1, 1},
  {&__pyx_n_s_GlobalParamsConfig_setup_base_fo, __pyx_k_GlobalParamsConfig_setup_base_fo, sizeof(__pyx_k_GlobalParamsConfig_setup_base_fo), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xd4, __pyx_k_Incompatible_checksums_s_vs_0xd4, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xd4), 0, 0, 1, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Invalid_EOL_type, __pyx_k_Invalid_EOL_type, sizeof(__pyx_k_Invalid_EOL_type), 0, 0, 1, 0},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_n_s_PDFError, __pyx_k_PDFError, sizeof(__pyx_k_PDFError), 0, 0, 1, 1},
  {&__pyx_n_s_PDFError___reduce_cython, __pyx_k_PDFError___reduce_cython, sizeof(__pyx_k_PDFError___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_PDFError___setstate_cython, __pyx_k_PDFError___setstate_cython, sizeof(__pyx_k_PDFError___setstate_cython), 0, 0, 1, 1},
  {&__pyx_kp_s_PDF_cannot_be_decrypted_please_p, __pyx_k_PDF_cannot_be_decrypted_please_p, sizeof(__pyx_k_PDF_cannot_be_decrypted_please_p), 0, 0, 1, 0},
  {&__pyx_kp_s_Page_index_must_be_positive_inte, __pyx_k_Page_index_must_be_positive_inte, sizeof(__pyx_k_Page_index_must_be_positive_inte), 0, 0, 1, 0},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_TextControl, __pyx_k_TextControl, sizeof(__pyx_k_TextControl), 0, 0, 1, 1},
  {&__pyx_n_s_TextControl___reduce_cython, __pyx_k_TextControl___reduce_cython, sizeof(__pyx_k_TextControl___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_TextControl___setstate_cython, __pyx_k_TextControl___setstate_cython, sizeof(__pyx_k_TextControl___setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_TextLinePrinter, __pyx_k_TextLinePrinter, sizeof(__pyx_k_TextLinePrinter), 0, 0, 1, 1},
  {&__pyx_n_s_TextPhysicalLayout, __pyx_k_TextPhysicalLayout, sizeof(__pyx_k_TextPhysicalLayout), 0, 0, 1, 1},
  {&__pyx_n_s_TextRawOrder, __pyx_k_TextRawOrder, sizeof(__pyx_k_TextRawOrder), 0, 0, 1, 1},
  {&__pyx_n_s_TextReadingOrder, __pyx_k_TextReadingOrder, sizeof(__pyx_k_TextReadingOrder), 0, 0, 1, 1},
  {&__pyx_n_s_TextSimpleLayout, __pyx_k_TextSimpleLayout, sizeof(__pyx_k_TextSimpleLayout), 0, 0, 1, 1},
  {&__pyx_n_s_TextTableLayout, __pyx_k_TextTableLayout, sizeof(__pyx_k_TextTableLayout), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_UTF_8, __pyx_k_UTF_8, sizeof(__pyx_k_UTF_8), 0, 0, 1, 0},
  {&__pyx_kp_u_Unknown_layout, __pyx_k_Unknown_layout, sizeof(__pyx_k_Unknown_layout), 0, 1, 0, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_XPDFDoc, __pyx_k_XPDFDoc, sizeof(__pyx_k_XPDFDoc), 0, 0, 1, 1},
  {&__pyx_n_s_XPDFDoc___reduce_cython, __pyx_k_XPDFDoc___reduce_cython, sizeof(__pyx_k_XPDFDoc___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_XPDFDoc___setstate_cython, __pyx_k_XPDFDoc___setstate_cython, sizeof(__pyx_k_XPDFDoc___setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_XPDFDoc_get_page, __pyx_k_XPDFDoc_get_page, sizeof(__pyx_k_XPDFDoc_get_page), 0, 0, 1, 1},
  {&__pyx_n_s_XPDFDoc_get_page_from_label, __pyx_k_XPDFDoc_get_page_from_label, sizeof(__pyx_k_XPDFDoc_get_page_from_label), 0, 0, 1, 1},
  {&__pyx_n_s_XPDFDoc_info_dict, __pyx_k_XPDFDoc_info_dict, sizeof(__pyx_k_XPDFDoc_info_dict), 0, 0, 1, 1},
  {&__pyx_n_s_XPDFDoc_metadata, __pyx_k_XPDFDoc_metadata, sizeof(__pyx_k_XPDFDoc_metadata), 0, 0, 1, 1},
  {&__pyx_n_s_XPage, __pyx_k_XPage, sizeof(__pyx_k_XPage), 0, 0, 1, 1},
  {&__pyx_n_s_XPage___reduce_cython, __pyx_k_XPage___reduce_cython, sizeof(__pyx_k_XPage___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_XPage___setstate_cython, __pyx_k_XPage___setstate_cython, sizeof(__pyx_k_XPage___setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_XPage_find_text, __pyx_k_XPage_find_text, sizeof(__pyx_k_XPage_find_text), 0, 0, 1, 1},
  {&__pyx_n_s_XPage_text_raw, __pyx_k_XPage_text_raw, sizeof(__pyx_k_XPage_text_raw), 0, 0, 1, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_backward, __pyx_k_backward, sizeof(__pyx_k_backward), 0, 0, 1, 1},
  {&__pyx_n_s_case_sensitive, __pyx_k_case_sensitive, sizeof(__pyx_k_case_sensitive), 0, 0, 1, 1},
  {&__pyx_n_s_cfg_file, __pyx_k_cfg_file, sizeof(__pyx_k_cfg_file), 0, 0, 1, 1},
  {&__pyx_n_s_cfg_path, __pyx_k_cfg_path, sizeof(__pyx_k_cfg_path), 0, 0, 1, 1},
  {&__pyx_n_s_char_name, __pyx_k_char_name, sizeof(__pyx_k_char_name), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_clip_text, __pyx_k_clip_text, sizeof(__pyx_k_clip_text), 0, 0, 1, 1},
  {&__pyx_n_s_control, __pyx_k_control, sizeof(__pyx_k_control), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_dict_2, __pyx_k_dict_2, sizeof(__pyx_k_dict_2), 0, 0, 1, 1},
  {&__pyx_n_s_dir, __pyx_k_dir, sizeof(__pyx_k_dir), 0, 0, 1, 1},
  {&__pyx_n_s_discard_clipped, __pyx_k_discard_clipped, sizeof(__pyx_k_discard_clipped), 0, 0, 1, 1},
  {&__pyx_n_s_discard_diagonal, __pyx_k_discard_diagonal, sizeof(__pyx_k_discard_diagonal), 0, 0, 1, 1},
  {&__pyx_n_s_discard_invisible, __pyx_k_discard_invisible, sizeof(__pyx_k_discard_invisible), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_dos, __pyx_k_dos, sizeof(__pyx_k_dos), 0, 0, 1, 1},
  {&__pyx_n_s_enable_html, __pyx_k_enable_html, sizeof(__pyx_k_enable_html), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_find_text, __pyx_k_find_text, sizeof(__pyx_k_find_text), 0, 0, 1, 1},
  {&__pyx_n_s_fixed_line_spacing, __pyx_k_fixed_line_spacing, sizeof(__pyx_k_fixed_line_spacing), 0, 0, 1, 1},
  {&__pyx_n_s_fixed_pitch, __pyx_k_fixed_pitch, sizeof(__pyx_k_fixed_pitch), 0, 0, 1, 1},
  {&__pyx_n_s_get_page, __pyx_k_get_page, sizeof(__pyx_k_get_page), 0, 0, 1, 1},
  {&__pyx_n_s_get_page_from_label, __pyx_k_get_page_from_label, sizeof(__pyx_k_get_page_from_label), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_info_dict, __pyx_k_info_dict, sizeof(__pyx_k_info_dict), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_insert_bom, __pyx_k_insert_bom, sizeof(__pyx_k_insert_bom), 0, 0, 1, 1},
  {&__pyx_n_s_label, __pyx_k_label, sizeof(__pyx_k_label), 0, 0, 1, 1},
  {&__pyx_n_s_layout, __pyx_k_layout, sizeof(__pyx_k_layout), 0, 0, 1, 1},
  {&__pyx_n_s_lineprinter, __pyx_k_lineprinter, sizeof(__pyx_k_lineprinter), 0, 0, 1, 1},
  {&__pyx_n_s_linesep, __pyx_k_linesep, sizeof(__pyx_k_linesep), 0, 0, 1, 1},
  {&__pyx_n_s_load_file, __pyx_k_load_file, sizeof(__pyx_k_load_file), 0, 0, 1, 1},
  {&__pyx_n_s_mac, __pyx_k_mac, sizeof(__pyx_k_mac), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_map_name_to_unicode, __pyx_k_map_name_to_unicode, sizeof(__pyx_k_map_name_to_unicode), 0, 0, 1, 1},
  {&__pyx_n_s_margin_bottom, __pyx_k_margin_bottom, sizeof(__pyx_k_margin_bottom), 0, 0, 1, 1},
  {&__pyx_n_s_margin_left, __pyx_k_margin_left, sizeof(__pyx_k_margin_left), 0, 0, 1, 1},
  {&__pyx_n_s_margin_right, __pyx_k_margin_right, sizeof(__pyx_k_margin_right), 0, 0, 1, 1},
  {&__pyx_n_s_margin_top, __pyx_k_margin_top, sizeof(__pyx_k_margin_top), 0, 0, 1, 1},
  {&__pyx_n_s_message, __pyx_k_message, sizeof(__pyx_k_message), 0, 0, 1, 1},
  {&__pyx_n_s_metadata, __pyx_k_metadata, sizeof(__pyx_k_metadata), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_num_pages, __pyx_k_num_pages, sizeof(__pyx_k_num_pages), 0, 0, 1, 1},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_n_s_out, __pyx_k_out, sizeof(__pyx_k_out), 0, 0, 1, 1},
  {&__pyx_n_s_ownerpass, __pyx_k_ownerpass, sizeof(__pyx_k_ownerpass), 0, 0, 1, 1},
  {&__pyx_n_s_pdf, __pyx_k_pdf, sizeof(__pyx_k_pdf), 0, 0, 1, 1},
  {&__pyx_kp_u_pdf_argument_must_be_a_string_or, __pyx_k_pdf_argument_must_be_a_string_or, sizeof(__pyx_k_pdf_argument_must_be_a_string_or), 0, 1, 0, 0},
  {&__pyx_n_s_pdf_file, __pyx_k_pdf_file, sizeof(__pyx_k_pdf_file), 0, 0, 1, 1},
  {&__pyx_n_s_pdftotext_raw, __pyx_k_pdftotext_raw, sizeof(__pyx_k_pdftotext_raw), 0, 0, 1, 1},
  {&__pyx_kp_s_pdftotext_raw_PDFError, __pyx_k_pdftotext_raw_PDFError, sizeof(__pyx_k_pdftotext_raw_PDFError), 0, 0, 1, 0},
  {&__pyx_n_s_pgno, __pyx_k_pgno, sizeof(__pyx_k_pgno), 0, 0, 1, 1},
  {&__pyx_n_s_physical, __pyx_k_physical, sizeof(__pyx_k_physical), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_PDFError, __pyx_k_pyx_unpickle_PDFError, sizeof(__pyx_k_pyx_unpickle_PDFError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_pyxpdf_xpdf, __pyx_k_pyxpdf_xpdf, sizeof(__pyx_k_pyxpdf_xpdf), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_raw, __pyx_k_raw, sizeof(__pyx_k_raw), 0, 0, 1, 1},
  {&__pyx_n_s_read, __pyx_k_read, sizeof(__pyx_k_read), 0, 0, 1, 1},
  {&__pyx_n_s_reading, __pyx_k_reading, sizeof(__pyx_k_reading), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_res, __pyx_k_res, sizeof(__pyx_k_res), 0, 0, 1, 1},
  {&__pyx_n_s_rotation, __pyx_k_rotation, sizeof(__pyx_k_rotation), 0, 0, 1, 1},
  {&__pyx_n_s_rotation_value, __pyx_k_rotation_value, sizeof(__pyx_k_rotation_value), 0, 0, 1, 1},
  {&__pyx_n_s_search_box, __pyx_k_search_box, sizeof(__pyx_k_search_box), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_setup_base_fonts, __pyx_k_setup_base_fonts, sizeof(__pyx_k_setup_base_fonts), 0, 0, 1, 1},
  {&__pyx_n_s_simple, __pyx_k_simple, sizeof(__pyx_k_simple), 0, 0, 1, 1},
  {&__pyx_kp_s_src_pyxpdf_document_pxi, __pyx_k_src_pyxpdf_document_pxi, sizeof(__pyx_k_src_pyxpdf_document_pxi), 0, 0, 1, 0},
  {&__pyx_kp_s_src_pyxpdf_globalconfig_pxi, __pyx_k_src_pyxpdf_globalconfig_pxi, sizeof(__pyx_k_src_pyxpdf_globalconfig_pxi), 0, 0, 1, 0},
  {&__pyx_kp_s_src_pyxpdf_xpdf_pyx, __pyx_k_src_pyxpdf_xpdf_pyx, sizeof(__pyx_k_src_pyxpdf_xpdf_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_start_at_last, __pyx_k_start_at_last, sizeof(__pyx_k_start_at_last), 0, 0, 1, 1},
  {&__pyx_n_s_start_at_top, __pyx_k_start_at_top, sizeof(__pyx_k_start_at_top), 0, 0, 1, 1},
  {&__pyx_n_s_state, __pyx_k_state, sizeof(__pyx_k_state), 0, 0, 1, 1},
  {&__pyx_n_s_stop_at_bottom, __pyx_k_stop_at_bottom, sizeof(__pyx_k_stop_at_bottom), 0, 0, 1, 1},
  {&__pyx_n_s_stop_at_last, __pyx_k_stop_at_last, sizeof(__pyx_k_stop_at_last), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_s_table, __pyx_k_table, sizeof(__pyx_k_table), 0, 0, 1, 1},
  {&__pyx_n_s_td, __pyx_k_td, sizeof(__pyx_k_td), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_text, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 1, 1},
  {&__pyx_n_s_text_control, __pyx_k_text_control, sizeof(__pyx_k_text_control), 0, 0, 1, 1},
  {&__pyx_n_s_text_dev, __pyx_k_text_dev, sizeof(__pyx_k_text_dev), 0, 0, 1, 1},
  {&__pyx_n_s_text_encoding, __pyx_k_text_encoding, sizeof(__pyx_k_text_encoding), 0, 0, 1, 1},
  {&__pyx_n_s_text_page, __pyx_k_text_page, sizeof(__pyx_k_text_page), 0, 0, 1, 1},
  {&__pyx_n_s_text_raw, __pyx_k_text_raw, sizeof(__pyx_k_text_raw), 0, 0, 1, 1},
  {&__pyx_n_s_u, __pyx_k_u, sizeof(__pyx_k_u), 0, 0, 1, 1},
  {&__pyx_n_s_unix, __pyx_k_unix, sizeof(__pyx_k_unix), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_use_setstate, __pyx_k_use_setstate, sizeof(__pyx_k_use_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_userpass, __pyx_k_userpass, sizeof(__pyx_k_userpass), 0, 0, 1, 1},
  {&__pyx_n_s_wholeword, __pyx_k_wholeword, sizeof(__pyx_k_wholeword), 0, 0, 1, 1},
  {&__pyx_n_s_x_max, __pyx_k_x_max, sizeof(__pyx_k_x_max), 0, 0, 1, 1},
  {&__pyx_n_s_x_min, __pyx_k_x_min, sizeof(__pyx_k_x_min), 0, 0, 1, 1},
  {&__pyx_n_s_y_max, __pyx_k_y_max, sizeof(__pyx_k_y_max), 0, 0, 1, 1},
  {&__pyx_n_s_y_min, __pyx_k_y_min, sizeof(__pyx_k_y_min), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 63, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(1, 7, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(2, 84, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(3, 23, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(4, 2, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(5, 190, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pyxpdf/xpdf.pyx":63
 * 
 *     if deref(doc).okToCopy(ignoreOwnerPW=gFalse) == gFalse:
 *         raise PDFError("Copying of text from this document is not allowed.")             # <<<<<<<<<<<<<<
 * 
 *     if start < 1:
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_Copying_of_text_from_this_docume); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(2, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "pyxpdf/xpdf.pyx":88
 *     text_dev = make_unique[TextOutputDev](&_text_out_func, &ext_text, control.get())
 *     if deref(text_dev).isOk() == gFalse:
 *         raise PDFError("Error in pdf options")             # <<<<<<<<<<<<<<
 * 
 *     deref(doc).displayPages(text_dev.get(), start, end, 72, 72, 0, gFalse, gTrue, gFalse)
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_Error_in_pdf_options); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(2, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "src/pyxpdf/globalconfig.pxi":23
 * 
 *         if self._global == NULL:
 *             raise MemoryError("Cannot create GlobalParamsConfig object.")             # <<<<<<<<<<<<<<
 * 
 *         globalParams = self._global
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_Cannot_create_GlobalParamsConfig); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(3, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "src/pyxpdf/globalconfig.pxi":100
 *             c_eol = EndOfLineKind.eolMac
 *         else:
 *             raise PDFError("Invalid EOL type.")             # <<<<<<<<<<<<<<
 *         self._global.setTextEOL(_chars(eol))
 * 
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_Invalid_EOL_type); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(3, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(4, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(4, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "src/pyxpdf/document.pxi":48
 *         self.doc = new PDFDoc(pdf, self.ownerpass, self.userpass)
 *         if self.doc == NULL:
 *             raise MemoryError("Cannot allocate memory for internal objects")             # <<<<<<<<<<<<<<
 * 
 *     cdef _load_from_char_array(XPDFDoc self, char *pdf, int data_length):
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_Cannot_allocate_memory_for_inter); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(5, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "src/pyxpdf/document.pxi":60
 *         if self.doc.isOk() == gTrue or self.doc.getErrorCode() == errEncrypted:
 *             if self.doc.getErrorCode() == errEncrypted:
 *                 raise PDFError("PDF cannot be decrypted please provide correct passwords.")             # <<<<<<<<<<<<<<
 *         else:
 *             raise PDFError(f"Cannot Parse PDF. ErrorCode - {self.doc.getErrorCode()}")
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_PDF_cannot_be_decrypted_please_p); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(5, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "src/pyxpdf/document.pxi":86
 *             self._load_from_char_array(self.doc_data, len(self.doc_data))
 *         else:
 *             raise ValueError(f"pdf argument must be a string or a file-like object.")             # <<<<<<<<<<<<<<
 * 
 *         # check PDFDoc
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_u_pdf_argument_must_be_a_string_or); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(5, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(4, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "src/pyxpdf/document.pxi":190
 *     def __cinit__(self, XPDFDoc doc not None, int index):
 *         if index < 0 or index >= doc.num_pages:
 *             raise IndexError("Page index must be positive integer less than total pages")             # <<<<<<<<<<<<<<
 *         self.page = doc.get_catalog().getPage(index + 1)
 *         self.index = index
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s_Page_index_must_be_positive_inte); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(5, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(4, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(4, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__47 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);
  __pyx_codeobj__3 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__47, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__3)) __PYX_ERR(4, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PDFError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PDFError__set_state(self, __pyx_state)
 */
  __pyx_tuple__48 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(4, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) __PYX_ERR(4, 16, __pyx_L1_error)

  /* "pyxpdf/xpdf.pyx":39
 *     (<string*>stream)[0] += string(text, length)
 * 
 * cpdef pdftotext_raw(pdf_file, int start = 0, int end = 0, layout="reading", ownerpass=None, userpass=None, cfg_file=""):             # <<<<<<<<<<<<<<
 *     cdef string ext_text
 *     cdef int err_code
 */
  __pyx_tuple__49 = PyTuple_Pack(7, __pyx_n_s_pdf_file, __pyx_n_s_start, __pyx_n_s_end, __pyx_n_s_layout, __pyx_n_s_ownerpass, __pyx_n_s_userpass, __pyx_n_s_cfg_file); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(2, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(7, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__49, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_xpdf_pyx, __pyx_n_s_pdftotext_raw, 39, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) __PYX_ERR(2, 39, __pyx_L1_error)

  /* "src/pyxpdf/globalconfig.pxi":11
 *     cdef GlobalParams* _global
 * 
 *     def load_file(self, cfg_path):             # <<<<<<<<<<<<<<
 *         global globalParams
 *         # delete if already init
 */
  __pyx_tuple__50 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_cfg_path); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(3, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_globalconfig_pxi, __pyx_n_s_load_file, 11, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) __PYX_ERR(3, 11, __pyx_L1_error)

  /* "src/pyxpdf/globalconfig.pxi":37
 * 
 * 
 *     def setup_base_fonts(self, dir):             # <<<<<<<<<<<<<<
 *         self._global.setupBaseFonts(_chars(dir))
 * 
 */
  __pyx_tuple__51 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_dir); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(3, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_globalconfig_pxi, __pyx_n_s_setup_base_fonts, 37, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) __PYX_ERR(3, 37, __pyx_L1_error)

  /* "src/pyxpdf/globalconfig.pxi":49
 * 
 * 
 *     def map_name_to_unicode(self, char_name):             # <<<<<<<<<<<<<<
 *         return self._global.mapNameToUnicode(_chars(char_name))
 * 
 */
  __pyx_tuple__52 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_char_name); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(3, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_codeobj__11 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__52, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_globalconfig_pxi, __pyx_n_s_map_name_to_unicode, 49, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__11)) __PYX_ERR(3, 49, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) __PYX_ERR(4, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__54 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(4, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_codeobj__15 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__15)) __PYX_ERR(4, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(4, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__56 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(4, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(4, 3, __pyx_L1_error)

  /* "src/pyxpdf/document.pxi":139
 * 
 * 
 *     def info_dict(self):             # <<<<<<<<<<<<<<
 *         return self.get_info_dict()
 * 
 */
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(5, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_document_pxi, __pyx_n_s_info_dict, 139, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(5, 139, __pyx_L1_error)

  /* "src/pyxpdf/document.pxi":142
 *         return self.get_info_dict()
 * 
 *     def metadata(self):             # <<<<<<<<<<<<<<
 *         return self.get_metadata()
 * 
 */
  __pyx_tuple__58 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(5, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_document_pxi, __pyx_n_s_metadata, 142, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(5, 142, __pyx_L1_error)

  /* "src/pyxpdf/document.pxi":145
 *         return self.get_metadata()
 * 
 *     cpdef get_page(self, int pgno):             # <<<<<<<<<<<<<<
 *         if 0 <= pgno < self.num_pages:
 *             return XPage(self, pgno)
 */
  __pyx_tuple__59 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_pgno, __pyx_n_s_pgno); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(5, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__59, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_document_pxi, __pyx_n_s_get_page, 145, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(5, 145, __pyx_L1_error)

  /* "src/pyxpdf/document.pxi":151
 *             return None
 * 
 *     cpdef get_page_from_label(self, label):             # <<<<<<<<<<<<<<
 *         cdef:
 *             int pgno
 */
  __pyx_tuple__60 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_label); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(5, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_document_pxi, __pyx_n_s_get_page_from_label, 151, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(5, 151, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(4, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__62 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(4, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(4, 3, __pyx_L1_error)

  /* "src/pyxpdf/document.pxi":196
 * 
 * 
 *     def find_text(self, text, search_box=None, start_at_top=True, stop_at_bottom=True, start_at_last=False,             # <<<<<<<<<<<<<<
 *                 stop_at_last=False, case_sensitive=False, backward=False, wholeword=False, rotation=0):
 *         cdef double x_min = 0
 */
  __pyx_tuple__63 = PyTuple_Pack(21, __pyx_n_s_self, __pyx_n_s_text, __pyx_n_s_search_box, __pyx_n_s_start_at_top, __pyx_n_s_stop_at_bottom, __pyx_n_s_start_at_last, __pyx_n_s_stop_at_last, __pyx_n_s_case_sensitive, __pyx_n_s_backward, __pyx_n_s_wholeword, __pyx_n_s_rotation, __pyx_n_s_x_min, __pyx_n_s_y_min, __pyx_n_s_x_max, __pyx_n_s_y_max, __pyx_n_s_rotation_value, __pyx_n_s_u, __pyx_n_s_text_control, __pyx_n_s_td, __pyx_n_s_text_page, __pyx_n_s_res); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(5, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(11, 0, 21, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__63, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_document_pxi, __pyx_n_s_find_text, 196, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(5, 196, __pyx_L1_error)

  /* "src/pyxpdf/document.pxi":229
 * 
 * 
 *     def text_raw(self, search_box=None, TextControl control = None):             # <<<<<<<<<<<<<<
 *         cdef:
 *             TextOutputControl text_control = control.control if control else TextOutputControl()
 */
  __pyx_tuple__64 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_search_box, __pyx_n_s_control, __pyx_n_s_text_control, __pyx_n_s_out, __pyx_n_s_text_dev); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(5, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(3, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_pyxpdf_document_pxi, __pyx_n_s_text_raw, 229, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(5, 229, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  __pyx_codeobj__42 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__42)) __PYX_ERR(4, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__66 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(4, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(4, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_PDFError(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__67 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__67, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_PDFError, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(2, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(2, 1, __pyx_L1_error)
  __pyx_int_222419149 = PyInt_FromLong(222419149L); if (unlikely(!__pyx_int_222419149)) __PYX_ERR(2, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_type_6pyxpdf_4xpdf_PDFError.tp_base = (&((PyTypeObject*)PyExc_Exception)[0]);
  if (PyType_Ready(&__pyx_type_6pyxpdf_4xpdf_PDFError) < 0) __PYX_ERR(1, 2, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyxpdf_4xpdf_PDFError.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyxpdf_4xpdf_PDFError.tp_dictoffset && __pyx_type_6pyxpdf_4xpdf_PDFError.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyxpdf_4xpdf_PDFError.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PDFError, (PyObject *)&__pyx_type_6pyxpdf_4xpdf_PDFError) < 0) __PYX_ERR(1, 2, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyxpdf_4xpdf_PDFError) < 0) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_ptype_6pyxpdf_4xpdf_PDFError = &__pyx_type_6pyxpdf_4xpdf_PDFError;
  if (PyType_Ready(&__pyx_type_6pyxpdf_4xpdf_GlobalParamsConfig) < 0) __PYX_ERR(3, 8, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyxpdf_4xpdf_GlobalParamsConfig.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyxpdf_4xpdf_GlobalParamsConfig.tp_dictoffset && __pyx_type_6pyxpdf_4xpdf_GlobalParamsConfig.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyxpdf_4xpdf_GlobalParamsConfig.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GlobalParamsConfig, (PyObject *)&__pyx_type_6pyxpdf_4xpdf_GlobalParamsConfig) < 0) __PYX_ERR(3, 8, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyxpdf_4xpdf_GlobalParamsConfig) < 0) __PYX_ERR(3, 8, __pyx_L1_error)
  __pyx_ptype_6pyxpdf_4xpdf_GlobalParamsConfig = &__pyx_type_6pyxpdf_4xpdf_GlobalParamsConfig;
  if (PyType_Ready(&__pyx_type_6pyxpdf_4xpdf_TextControl) < 0) __PYX_ERR(6, 12, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyxpdf_4xpdf_TextControl.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyxpdf_4xpdf_TextControl.tp_dictoffset && __pyx_type_6pyxpdf_4xpdf_TextControl.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyxpdf_4xpdf_TextControl.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_TextControl, (PyObject *)&__pyx_type_6pyxpdf_4xpdf_TextControl) < 0) __PYX_ERR(6, 12, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyxpdf_4xpdf_TextControl) < 0) __PYX_ERR(6, 12, __pyx_L1_error)
  __pyx_ptype_6pyxpdf_4xpdf_TextControl = &__pyx_type_6pyxpdf_4xpdf_TextControl;
  __pyx_vtabptr_6pyxpdf_4xpdf_XPDFDoc = &__pyx_vtable_6pyxpdf_4xpdf_XPDFDoc;
  __pyx_vtable_6pyxpdf_4xpdf_XPDFDoc.get_info_dict = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *))__pyx_f_6pyxpdf_4xpdf_7XPDFDoc_get_info_dict;
  __pyx_vtable_6pyxpdf_4xpdf_XPDFDoc.get_metadata = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *))__pyx_f_6pyxpdf_4xpdf_7XPDFDoc_get_metadata;
  __pyx_vtable_6pyxpdf_4xpdf_XPDFDoc._load_from_file = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *, GString *))__pyx_f_6pyxpdf_4xpdf_7XPDFDoc__load_from_file;
  __pyx_vtable_6pyxpdf_4xpdf_XPDFDoc._load_from_char_array = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *, char *, int))__pyx_f_6pyxpdf_4xpdf_7XPDFDoc__load_from_char_array;
  __pyx_vtable_6pyxpdf_4xpdf_XPDFDoc.check = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *))__pyx_f_6pyxpdf_4xpdf_7XPDFDoc_check;
  __pyx_vtable_6pyxpdf_4xpdf_XPDFDoc.get_catalog = (Catalog *(*)(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *))__pyx_f_6pyxpdf_4xpdf_7XPDFDoc_get_catalog;
  __pyx_vtable_6pyxpdf_4xpdf_XPDFDoc.get_page = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *, int, int __pyx_skip_dispatch))__pyx_f_6pyxpdf_4xpdf_7XPDFDoc_get_page;
  __pyx_vtable_6pyxpdf_4xpdf_XPDFDoc.get_page_from_label = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_XPDFDoc *, PyObject *, int __pyx_skip_dispatch))__pyx_f_6pyxpdf_4xpdf_7XPDFDoc_get_page_from_label;
  if (PyType_Ready(&__pyx_type_6pyxpdf_4xpdf_XPDFDoc) < 0) __PYX_ERR(5, 22, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyxpdf_4xpdf_XPDFDoc.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyxpdf_4xpdf_XPDFDoc.tp_dictoffset && __pyx_type_6pyxpdf_4xpdf_XPDFDoc.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyxpdf_4xpdf_XPDFDoc.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6pyxpdf_4xpdf_XPDFDoc.tp_dict, __pyx_vtabptr_6pyxpdf_4xpdf_XPDFDoc) < 0) __PYX_ERR(5, 22, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_XPDFDoc, (PyObject *)&__pyx_type_6pyxpdf_4xpdf_XPDFDoc) < 0) __PYX_ERR(5, 22, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyxpdf_4xpdf_XPDFDoc) < 0) __PYX_ERR(5, 22, __pyx_L1_error)
  __pyx_ptype_6pyxpdf_4xpdf_XPDFDoc = &__pyx_type_6pyxpdf_4xpdf_XPDFDoc;
  __pyx_vtabptr_6pyxpdf_4xpdf_XPage = &__pyx_vtable_6pyxpdf_4xpdf_XPage;
  __pyx_vtable_6pyxpdf_4xpdf_XPage.display_slice = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_XPage *, OutputDev *, int, int, int, int, struct __pyx_opt_args_6pyxpdf_4xpdf_5XPage_display_slice *__pyx_optional_args))__pyx_f_6pyxpdf_4xpdf_5XPage_display_slice;
  __pyx_vtable_6pyxpdf_4xpdf_XPage.display = (PyObject *(*)(struct __pyx_obj_6pyxpdf_4xpdf_XPage *, OutputDev *, struct __pyx_opt_args_6pyxpdf_4xpdf_5XPage_display *__pyx_optional_args))__pyx_f_6pyxpdf_4xpdf_5XPage_display;
  if (PyType_Ready(&__pyx_type_6pyxpdf_4xpdf_XPage) < 0) __PYX_ERR(5, 167, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6pyxpdf_4xpdf_XPage.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6pyxpdf_4xpdf_XPage.tp_dictoffset && __pyx_type_6pyxpdf_4xpdf_XPage.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6pyxpdf_4xpdf_XPage.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6pyxpdf_4xpdf_XPage.tp_dict, __pyx_vtabptr_6pyxpdf_4xpdf_XPage) < 0) __PYX_ERR(5, 167, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_XPage, (PyObject *)&__pyx_type_6pyxpdf_4xpdf_XPage) < 0) __PYX_ERR(5, 167, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6pyxpdf_4xpdf_XPage) < 0) __PYX_ERR(5, 167, __pyx_L1_error)
  __pyx_ptype_6pyxpdf_4xpdf_XPage = &__pyx_type_6pyxpdf_4xpdf_XPage;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(7, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4bool_bool) __PYX_ERR(8, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_7complex_complex) __PYX_ERR(9, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initxpdf(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initxpdf(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_xpdf(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_xpdf(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_xpdf(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  TextOutputMode __pyx_t_3;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'xpdf' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_xpdf(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(2, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(2, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(2, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("xpdf", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(2, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(2, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(2, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(2, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(2, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pyxpdf__xpdf) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(2, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pyxpdf.xpdf")) {
      if (unlikely(PyDict_SetItemString(modules, "pyxpdf.xpdf", __pyx_m) < 0)) __PYX_ERR(2, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) goto __pyx_L1_error;
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) goto __pyx_L1_error;
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  #endif
  __Pyx_TraceCall("__Pyx_PyMODINIT_FUNC PyInit_xpdf(void)", __pyx_f[2], 1, 0, __PYX_ERR(2, 1, __pyx_L1_error));

  /* "pyxpdf/xpdf.pyx":6
 * import cython
 * 
 * __all__ = [             # <<<<<<<<<<<<<<
 * "pdftotext_raw, PDFError", "XPDFDoc", "XPage", "Config", "TextControl"
 * ]
 */
  __Pyx_TraceLine(6,0,__PYX_ERR(2, 6, __pyx_L1_error))
  __pyx_t_1 = PyList_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_kp_s_pdftotext_raw_PDFError);
  __Pyx_GIVEREF(__pyx_kp_s_pdftotext_raw_PDFError);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s_pdftotext_raw_PDFError);
  __Pyx_INCREF(__pyx_n_s_XPDFDoc);
  __Pyx_GIVEREF(__pyx_n_s_XPDFDoc);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_XPDFDoc);
  __Pyx_INCREF(__pyx_n_s_XPage);
  __Pyx_GIVEREF(__pyx_n_s_XPage);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_XPage);
  __Pyx_INCREF(__pyx_n_s_Config);
  __Pyx_GIVEREF(__pyx_n_s_Config);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_Config);
  __Pyx_INCREF(__pyx_n_s_TextControl);
  __Pyx_GIVEREF(__pyx_n_s_TextControl);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_TextControl);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_all, __pyx_t_1) < 0) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "src/pyxpdf/helper.pxi":12
 * from pyxpdf.includes.TextString cimport TextString
 * 
 * cdef inline char* _chars(object s):             # <<<<<<<<<<<<<<
 *     if isinstance(s, unicode):
 *         # encode to the specific encoding used inside of the module
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(0, 12, __pyx_L1_error))


  /* "src/pyxpdf/helper.pxi":18
 *     return s
 * 
 * cdef inline bytes _utf8_bytes(object s):             # <<<<<<<<<<<<<<
 *     if isinstance(s, unicode):
 *         # encode to the specific encoding used inside of the module
 */
  __Pyx_TraceLine(18,0,__PYX_ERR(0, 18, __pyx_L1_error))


  /* "src/pyxpdf/helper.pxi":24
 *     return s
 * 
 * cdef inline bytes _utf32_bytes(object s):             # <<<<<<<<<<<<<<
 *     if isinstance(s, unicode):
 *         # encode to the specific encoding used inside of the module
 */
  __Pyx_TraceLine(24,0,__PYX_ERR(0, 24, __pyx_L1_error))


  /* "src/pyxpdf/helper.pxi":30
 *     return s
 * 
 * cdef inline GString* to_GString(object s):             # <<<<<<<<<<<<<<
 *     return new GString(_chars(s))
 * 
 */
  __Pyx_TraceLine(30,0,__PYX_ERR(0, 30, __pyx_L1_error))


  /* "src/pyxpdf/helper.pxi":33
 *     return new GString(_chars(s))
 * 
 * cdef inline object GString_to_unicode(GString *gstr):             # <<<<<<<<<<<<<<
 *     if gstr is not NULL:
 *         return gstr.getCString()[:gstr.getLength()].decode("UTF-8")
 */
  __Pyx_TraceLine(33,0,__PYX_ERR(0, 33, __pyx_L1_error))


  /* "src/pyxpdf/helper.pxi":39
 *         return ""
 * 
 * cdef inline GBool_to_bool(GBool b):             # <<<<<<<<<<<<<<
 *     return True if b == gTrue else False
 * 
 */
  __Pyx_TraceLine(39,0,__PYX_ERR(0, 39, __pyx_L1_error))


  /* "src/pyxpdf/helper.pxi":42
 *     return True if b == gTrue else False
 * 
 * cdef inline GBool to_GBool(pyb):             # <<<<<<<<<<<<<<
 *     return gTrue if pyb else gFalse
 * 
 */
  __Pyx_TraceLine(42,0,__PYX_ERR(0, 42, __pyx_L1_error))


  /* "src/pyxpdf/helper.pxi":46
 * 
 * 
 * cdef inline PDFRectangle_to_tuple(PDFRectangle *rect):             # <<<<<<<<<<<<<<
 *     cdef tuple rect_tp
 *     rect_tp = (rect.x1, rect.y1, rect.x2, rect.y2)
 */
  __Pyx_TraceLine(46,0,__PYX_ERR(0, 46, __pyx_L1_error))


  /* "src/pyxpdf/helper.pxi":51
 *     return rect_tp
 * 
 * cdef void utf32_to_Unicode_vector(text, vector[Unicode]& vec):             # <<<<<<<<<<<<<<
 *     cdef bytes by = _utf32_bytes(text)
 *     cdef char* ch = by
 */
  __Pyx_TraceLine(51,0,__PYX_ERR(0, 51, __pyx_L1_error))


  /* "src/pyxpdf/helper.pxi":68
 * 
 * 
 * cdef dict Dict_to_pydict(Dict* xdict, dict pydict = {}):             # <<<<<<<<<<<<<<
 *     cdef Object obj
 *     cdef const char* key
 */
  __Pyx_TraceLine(68,0,__PYX_ERR(0, 68, __pyx_L1_error))

  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__2 = ((PyObject*)__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pyxpdf/helper.pxi":81
 *     return pydict
 * 
 * cdef object TextString_to_unicode(TextString* text_str):             # <<<<<<<<<<<<<<
 *     return GString_to_unicode(text_str.toPDFTextString())
 * 
 */
  __Pyx_TraceLine(81,0,__PYX_ERR(0, 81, __pyx_L1_error))


  /* "src/pyxpdf/helper.pxi":84
 *     return GString_to_unicode(text_str.toPDFTextString())
 * 
 * cdef TextString* to_TextString(tstr):             # <<<<<<<<<<<<<<
 *     cdef TextString* text_string
 *     text_string = new TextString(to_GString(tstr))
 */
  __Pyx_TraceLine(84,0,__PYX_ERR(0, 84, __pyx_L1_error))


  /* "src/pyxpdf/helper.pxi":89
 *     return text_string
 * 
 * cdef void append_to_cpp_string(void *stream, const char *text, int length):             # <<<<<<<<<<<<<<
 *     (<string*>stream)[0] += string(text, length)
 */
  __Pyx_TraceLine(89,0,__PYX_ERR(0, 89, __pyx_L1_error))


  /* "pyxpdf/xpdf.pyx":16
 * from pyxpdf.includes.xpdf_error cimport ErrorCategory, setErrorCallback
 * # Dummy callback to silence errors for now.
 * cdef void dummpy_error_callback(void *data, ErrorCategory category, int pos, char *msg):             # <<<<<<<<<<<<<<
 *     return
 * 
 */
  __Pyx_TraceLine(16,0,__PYX_ERR(2, 16, __pyx_L1_error))


  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(4, 1, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pyxpdf_4xpdf_8PDFError_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFError___reduce_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFError->tp_dict, __pyx_n_s_reduce_cython, __pyx_t_1) < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_PDFError);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_PDFError, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_PDFError__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(16,0,__PYX_ERR(4, 16, __pyx_L1_error))
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pyxpdf_4xpdf_8PDFError_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_PDFError___setstate_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_PDFError->tp_dict, __pyx_n_s_setstate_cython, __pyx_t_1) < 0) __PYX_ERR(4, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_PDFError);

  /* "pyxpdf/xpdf.pyx":23
 * include "pdferror.pxi"
 * 
 * from os import linesep             # <<<<<<<<<<<<<<
 * 
 * from cython.operator cimport dereference as deref
 */
  __Pyx_TraceLine(23,0,__PYX_ERR(2, 23, __pyx_L1_error))
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_linesep);
  __Pyx_GIVEREF(__pyx_n_s_linesep);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_linesep);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_os, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_linesep); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_linesep, __pyx_t_1) < 0) __PYX_ERR(2, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyxpdf/xpdf.pyx":36
 * 
 * 
 * cdef void _text_out_func(void *stream, const char *text, int length):             # <<<<<<<<<<<<<<
 *     (<string*>stream)[0] += string(text, length)
 * 
 */
  __Pyx_TraceLine(36,0,__PYX_ERR(2, 36, __pyx_L1_error))


  /* "pyxpdf/xpdf.pyx":39
 *     (<string*>stream)[0] += string(text, length)
 * 
 * cpdef pdftotext_raw(pdf_file, int start = 0, int end = 0, layout="reading", ownerpass=None, userpass=None, cfg_file=""):             # <<<<<<<<<<<<<<
 *     cdef string ext_text
 *     cdef int err_code
 */
  __Pyx_TraceLine(39,0,__PYX_ERR(2, 39, __pyx_L1_error))

  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pyxpdf_4xpdf_1pdftotext_raw, 0, __pyx_n_s_pdftotext_raw, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__5)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pdftotext_raw, __pyx_t_2) < 0) __PYX_ERR(2, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/pyxpdf/globalconfig.pxi":11
 *     cdef GlobalParams* _global
 * 
 *     def load_file(self, cfg_path):             # <<<<<<<<<<<<<<
 *         global globalParams
 *         # delete if already init
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(3, 11, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pyxpdf_4xpdf_18GlobalParamsConfig_1load_file, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GlobalParamsConfig_load_file, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__8)); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_GlobalParamsConfig->tp_dict, __pyx_n_s_load_file, __pyx_t_2) < 0) __PYX_ERR(3, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_GlobalParamsConfig);

  /* "src/pyxpdf/globalconfig.pxi":37
 * 
 * 
 *     def setup_base_fonts(self, dir):             # <<<<<<<<<<<<<<
 *         self._global.setupBaseFonts(_chars(dir))
 * 
 */
  __Pyx_TraceLine(37,0,__PYX_ERR(3, 37, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pyxpdf_4xpdf_18GlobalParamsConfig_7setup_base_fonts, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GlobalParamsConfig_setup_base_fo, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__10)); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_GlobalParamsConfig->tp_dict, __pyx_n_s_setup_base_fonts, __pyx_t_2) < 0) __PYX_ERR(3, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_GlobalParamsConfig);

  /* "src/pyxpdf/globalconfig.pxi":49
 * 
 * 
 *     def map_name_to_unicode(self, char_name):             # <<<<<<<<<<<<<<
 *         return self._global.mapNameToUnicode(_chars(char_name))
 * 
 */
  __Pyx_TraceLine(49,0,__PYX_ERR(3, 49, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pyxpdf_4xpdf_18GlobalParamsConfig_9map_name_to_unicode, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GlobalParamsConfig_map_name_to_u, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__11)); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_GlobalParamsConfig->tp_dict, __pyx_n_s_map_name_to_unicode, __pyx_t_2) < 0) __PYX_ERR(3, 49, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_GlobalParamsConfig);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(4, 1, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pyxpdf_4xpdf_18GlobalParamsConfig_11__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GlobalParamsConfig___reduce_cyth, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__13)); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(3,0,__PYX_ERR(4, 3, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pyxpdf_4xpdf_18GlobalParamsConfig_13__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_GlobalParamsConfig___setstate_cy, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__15)); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(4, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/pyxpdf/globalconfig.pxi":146
 * 
 * 
 * Config = GlobalParamsConfig()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(146,0,__PYX_ERR(3, 146, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_GlobalParamsConfig)); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Config, __pyx_t_2) < 0) __PYX_ERR(3, 146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/pyxpdf/textoutput.pxi":4
 * from pyxpdf.includes.TextOutputDev cimport TextOutputMode, TextOutputControl
 * 
 * TextPhysicalLayout = TextOutputMode.textOutPhysLayout             # <<<<<<<<<<<<<<
 * TextSimpleLayout = TextOutputMode.textOutSimpleLayout
 * TextTableLayout = TextOutputMode.textOutTableLayout
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(6, 4, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyInt_From_TextOutputMode(textOutPhysLayout); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TextPhysicalLayout, __pyx_t_2) < 0) __PYX_ERR(6, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/pyxpdf/textoutput.pxi":5
 * 
 * TextPhysicalLayout = TextOutputMode.textOutPhysLayout
 * TextSimpleLayout = TextOutputMode.textOutSimpleLayout             # <<<<<<<<<<<<<<
 * TextTableLayout = TextOutputMode.textOutTableLayout
 * TextLinePrinter = TextOutputMode.textOutLinePrinter
 */
  __Pyx_TraceLine(5,0,__PYX_ERR(6, 5, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyInt_From_TextOutputMode(textOutSimpleLayout); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TextSimpleLayout, __pyx_t_2) < 0) __PYX_ERR(6, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/pyxpdf/textoutput.pxi":6
 * TextPhysicalLayout = TextOutputMode.textOutPhysLayout
 * TextSimpleLayout = TextOutputMode.textOutSimpleLayout
 * TextTableLayout = TextOutputMode.textOutTableLayout             # <<<<<<<<<<<<<<
 * TextLinePrinter = TextOutputMode.textOutLinePrinter
 * TextRawOrder = TextOutputMode.textOutRawOrder
 */
  __Pyx_TraceLine(6,0,__PYX_ERR(6, 6, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyInt_From_TextOutputMode(textOutTableLayout); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TextTableLayout, __pyx_t_2) < 0) __PYX_ERR(6, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/pyxpdf/textoutput.pxi":7
 * TextSimpleLayout = TextOutputMode.textOutSimpleLayout
 * TextTableLayout = TextOutputMode.textOutTableLayout
 * TextLinePrinter = TextOutputMode.textOutLinePrinter             # <<<<<<<<<<<<<<
 * TextRawOrder = TextOutputMode.textOutRawOrder
 * TextReadingOrder = TextOutputMode.textOutReadingOrder
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(6, 7, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyInt_From_TextOutputMode(textOutLinePrinter); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TextLinePrinter, __pyx_t_2) < 0) __PYX_ERR(6, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/pyxpdf/textoutput.pxi":8
 * TextTableLayout = TextOutputMode.textOutTableLayout
 * TextLinePrinter = TextOutputMode.textOutLinePrinter
 * TextRawOrder = TextOutputMode.textOutRawOrder             # <<<<<<<<<<<<<<
 * TextReadingOrder = TextOutputMode.textOutReadingOrder
 * 
 */
  __Pyx_TraceLine(8,0,__PYX_ERR(6, 8, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyInt_From_TextOutputMode(textOutRawOrder); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TextRawOrder, __pyx_t_2) < 0) __PYX_ERR(6, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/pyxpdf/textoutput.pxi":9
 * TextLinePrinter = TextOutputMode.textOutLinePrinter
 * TextRawOrder = TextOutputMode.textOutRawOrder
 * TextReadingOrder = TextOutputMode.textOutReadingOrder             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(9,0,__PYX_ERR(6, 9, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyInt_From_TextOutputMode(textOutReadingOrder); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TextReadingOrder, __pyx_t_2) < 0) __PYX_ERR(6, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/pyxpdf/textoutput.pxi":15
 *     cdef TextOutputControl control
 * 
 *     def __cinit__(self, TextOutputMode mode = TextReadingOrder, double fixed_pitch = 0, double fixed_line_spacing=0, enable_html=False,             # <<<<<<<<<<<<<<
 *                 clip_text=False, discard_diagonal=False, discard_invisible=False, discard_clipped=False,
 *                 insert_bom=False, double margin_left=0, double margin_right=0, double margin_top=0, double margin_bottom=0):
 */
  __Pyx_TraceLine(15,0,__PYX_ERR(6, 15, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_TextReadingOrder); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = ((TextOutputMode)__Pyx_PyInt_As_TextOutputMode(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(6, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__17 = __pyx_t_3;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(4, 1, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pyxpdf_4xpdf_11TextControl_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_TextControl___reduce_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__18)); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(3,0,__PYX_ERR(4, 3, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pyxpdf_4xpdf_11TextControl_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_TextControl___setstate_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__20)); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(4, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/pyxpdf/document.pxi":29
 *     cdef bytes doc_data
 * 
 *     cdef dict get_info_dict(XPDFDoc self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             Object info
 */
  __Pyx_TraceLine(29,0,__PYX_ERR(5, 29, __pyx_L1_error))


  /* "src/pyxpdf/document.pxi":38
 *         return result
 * 
 *     cdef get_metadata(self):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[GString] meta
 *         meta.reset(self.doc.readMetadata())
 */
  __Pyx_TraceLine(38,0,__PYX_ERR(5, 38, __pyx_L1_error))


  /* "src/pyxpdf/document.pxi":45
 *         return None
 * 
 *     cdef _load_from_file(XPDFDoc self, GString *pdf):             # <<<<<<<<<<<<<<
 *         self.doc = new PDFDoc(pdf, self.ownerpass, self.userpass)
 *         if self.doc == NULL:
 */
  __Pyx_TraceLine(45,0,__PYX_ERR(5, 45, __pyx_L1_error))


  /* "src/pyxpdf/document.pxi":50
 *             raise MemoryError("Cannot allocate memory for internal objects")
 * 
 *     cdef _load_from_char_array(XPDFDoc self, char *pdf, int data_length):             # <<<<<<<<<<<<<<
 *         cdef Object *obj_null = new Object()
 *         cdef MemStream *mem_stream = new MemStream(pdf, 0, data_length, obj_null.initNull())
 */
  __Pyx_TraceLine(50,0,__PYX_ERR(5, 50, __pyx_L1_error))


  /* "src/pyxpdf/document.pxi":57
 *         self.doc = new PDFDoc(mem_stream, self.ownerpass, self.userpass)
 * 
 *     cdef check(self):             # <<<<<<<<<<<<<<
 *         if self.doc.isOk() == gTrue or self.doc.getErrorCode() == errEncrypted:
 *             if self.doc.getErrorCode() == errEncrypted:
 */
  __Pyx_TraceLine(57,0,__PYX_ERR(5, 57, __pyx_L1_error))


  /* "src/pyxpdf/document.pxi":64
 *             raise PDFError(f"Cannot Parse PDF. ErrorCode - {self.doc.getErrorCode()}")
 * 
 *     cdef Catalog *get_catalog(self):             # <<<<<<<<<<<<<<
 *         return self.doc.getCatalog()
 * 
 */
  __Pyx_TraceLine(64,0,__PYX_ERR(5, 64, __pyx_L1_error))


  /* "src/pyxpdf/document.pxi":139
 * 
 * 
 *     def info_dict(self):             # <<<<<<<<<<<<<<
 *         return self.get_info_dict()
 * 
 */
  __Pyx_TraceLine(139,0,__PYX_ERR(5, 139, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pyxpdf_4xpdf_7XPDFDoc_5info_dict, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_XPDFDoc_info_dict, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__25)); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFDoc->tp_dict, __pyx_n_s_info_dict, __pyx_t_2) < 0) __PYX_ERR(5, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_XPDFDoc);

  /* "src/pyxpdf/document.pxi":142
 *         return self.get_info_dict()
 * 
 *     def metadata(self):             # <<<<<<<<<<<<<<
 *         return self.get_metadata()
 * 
 */
  __Pyx_TraceLine(142,0,__PYX_ERR(5, 142, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pyxpdf_4xpdf_7XPDFDoc_7metadata, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_XPDFDoc_metadata, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__26)); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFDoc->tp_dict, __pyx_n_s_metadata, __pyx_t_2) < 0) __PYX_ERR(5, 142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_XPDFDoc);

  /* "src/pyxpdf/document.pxi":145
 *         return self.get_metadata()
 * 
 *     cpdef get_page(self, int pgno):             # <<<<<<<<<<<<<<
 *         if 0 <= pgno < self.num_pages:
 *             return XPage(self, pgno)
 */
  __Pyx_TraceLine(145,0,__PYX_ERR(5, 145, __pyx_L1_error))

  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pyxpdf_4xpdf_7XPDFDoc_9get_page, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_XPDFDoc_get_page, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__27)); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFDoc->tp_dict, __pyx_n_s_get_page, __pyx_t_2) < 0) __PYX_ERR(5, 145, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_XPDFDoc);

  /* "src/pyxpdf/document.pxi":151
 *             return None
 * 
 *     cpdef get_page_from_label(self, label):             # <<<<<<<<<<<<<<
 *         cdef:
 *             int pgno
 */
  __Pyx_TraceLine(151,0,__PYX_ERR(5, 151, __pyx_L1_error))

  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pyxpdf_4xpdf_7XPDFDoc_11get_page_from_label, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_XPDFDoc_get_page_from_label, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__28)); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPDFDoc->tp_dict, __pyx_n_s_get_page_from_label, __pyx_t_2) < 0) __PYX_ERR(5, 151, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_XPDFDoc);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(4, 1, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pyxpdf_4xpdf_7XPDFDoc_13__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_XPDFDoc___reduce_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__29)); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(3,0,__PYX_ERR(4, 3, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pyxpdf_4xpdf_7XPDFDoc_15__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_XPDFDoc___setstate_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__31)); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(4, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/pyxpdf/document.pxi":174
 * 
 * 
 *     cdef display_slice(self, OutputDev* out, int x1, int y1, int hgt, int wdt,             # <<<<<<<<<<<<<<
 *                         double hDPI = 72, double vDPI = 72, int rotate = 0,
 *                         GBool use_media_box = gFalse, GBool crop = gTrue,
 */
  __Pyx_TraceLine(174,0,__PYX_ERR(5, 174, __pyx_L1_error))


  /* "src/pyxpdf/document.pxi":176
 *     cdef display_slice(self, OutputDev* out, int x1, int y1, int hgt, int wdt,
 *                         double hDPI = 72, double vDPI = 72, int rotate = 0,
 *                         GBool use_media_box = gFalse, GBool crop = gTrue,             # <<<<<<<<<<<<<<
 *                         GBool printing = gFalse):
 *         self.page.displaySlice(out, hDPI, vDPI, rotate, use_media_box, crop,
 */
  __Pyx_TraceLine(176,0,__PYX_ERR(5, 176, __pyx_L1_error))
  __pyx_k__33 = gFalse;
  __pyx_k__34 = gTrue;

  /* "src/pyxpdf/document.pxi":177
 *                         double hDPI = 72, double vDPI = 72, int rotate = 0,
 *                         GBool use_media_box = gFalse, GBool crop = gTrue,
 *                         GBool printing = gFalse):             # <<<<<<<<<<<<<<
 *         self.page.displaySlice(out, hDPI, vDPI, rotate, use_media_box, crop,
 *                                 x1, y1, hgt, wdt, printing)
 */
  __Pyx_TraceLine(177,0,__PYX_ERR(5, 177, __pyx_L1_error))
  __pyx_k__35 = gFalse;

  /* "src/pyxpdf/document.pxi":181
 *                                 x1, y1, hgt, wdt, printing)
 * 
 *     cdef display(self, OutputDev* out, double hDPI = 72, double vDPI = 72,             # <<<<<<<<<<<<<<
 *                         int rotate = 0, GBool use_media_box = gFalse,
 *                         GBool crop = gTrue, GBool printing = gFalse):
 */
  __Pyx_TraceLine(181,0,__PYX_ERR(5, 181, __pyx_L1_error))


  /* "src/pyxpdf/document.pxi":182
 * 
 *     cdef display(self, OutputDev* out, double hDPI = 72, double vDPI = 72,
 *                         int rotate = 0, GBool use_media_box = gFalse,             # <<<<<<<<<<<<<<
 *                         GBool crop = gTrue, GBool printing = gFalse):
 *         self.display_slice(out, -1, -1, -1, -1, hDPI, vDPI, rotate,
 */
  __Pyx_TraceLine(182,0,__PYX_ERR(5, 182, __pyx_L1_error))
  __pyx_k__36 = gFalse;

  /* "src/pyxpdf/document.pxi":183
 *     cdef display(self, OutputDev* out, double hDPI = 72, double vDPI = 72,
 *                         int rotate = 0, GBool use_media_box = gFalse,
 *                         GBool crop = gTrue, GBool printing = gFalse):             # <<<<<<<<<<<<<<
 *         self.display_slice(out, -1, -1, -1, -1, hDPI, vDPI, rotate,
 *                             use_media_box, crop, printing)
 */
  __Pyx_TraceLine(183,0,__PYX_ERR(5, 183, __pyx_L1_error))
  __pyx_k__37 = gTrue;
  __pyx_k__38 = gFalse;

  /* "src/pyxpdf/document.pxi":196
 * 
 * 
 *     def find_text(self, text, search_box=None, start_at_top=True, stop_at_bottom=True, start_at_last=False,             # <<<<<<<<<<<<<<
 *                 stop_at_last=False, case_sensitive=False, backward=False, wholeword=False, rotation=0):
 *         cdef double x_min = 0
 */
  __Pyx_TraceLine(196,0,__PYX_ERR(5, 196, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pyxpdf_4xpdf_5XPage_3find_text, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_XPage_find_text, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__40)); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPage->tp_dict, __pyx_n_s_find_text, __pyx_t_2) < 0) __PYX_ERR(5, 196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_XPage);

  /* "src/pyxpdf/document.pxi":229
 * 
 * 
 *     def text_raw(self, search_box=None, TextControl control = None):             # <<<<<<<<<<<<<<
 *         cdef:
 *             TextOutputControl text_control = control.control if control else TextOutputControl()
 */
  __Pyx_TraceLine(229,0,__PYX_ERR(5, 229, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pyxpdf_4xpdf_5XPage_5text_raw, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_XPage_text_raw, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__41)); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pyxpdf_4xpdf_XPage->tp_dict, __pyx_n_s_text_raw, __pyx_t_2) < 0) __PYX_ERR(5, 229, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6pyxpdf_4xpdf_XPage);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(4, 1, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pyxpdf_4xpdf_5XPage_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_XPage___reduce_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__42)); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(3,0,__PYX_ERR(4, 3, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pyxpdf_4xpdf_5XPage_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_XPage___setstate_cython, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__44)); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(4, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_PDFError(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(4, 1, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6pyxpdf_4xpdf_3__pyx_unpickle_PDFError, 0, __pyx_n_s_pyx_unpickle_PDFError, NULL, __pyx_n_s_pyxpdf_xpdf, __pyx_d, ((PyObject *)__pyx_codeobj__46)); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_PDFError, __pyx_t_2) < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_PDFError__set_state(<PDFError> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_PDFError__set_state(PDFError __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(4, 11, __pyx_L1_error))


  /* "pyxpdf/xpdf.pyx":1
 * # distutils: language=c++             # <<<<<<<<<<<<<<
 * # cython: language_level=2
 * # cython: profile=True
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(2, 1, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */
  __Pyx_TraceLine(31,0,__PYX_ERR(4, 31, __pyx_L1_error))


  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */
  __Pyx_TraceLine(37,0,__PYX_ERR(4, 37, __pyx_L1_error))


  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */
  __Pyx_TraceLine(43,0,__PYX_ERR(4, 43, __pyx_L1_error))


  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */
  __Pyx_TraceLine(49,0,__PYX_ERR(4, 49, __pyx_L1_error))


  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */
  __Pyx_TraceLine(55,0,__PYX_ERR(4, 55, __pyx_L1_error))

  __Pyx_TraceReturn(Py_None, 0);

  /*--- Wrapped vars code ---*/

  if (__Pyx_RegisterCleanup()) __PYX_ERR(2, 1, __pyx_L1_error);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pyxpdf.xpdf", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pyxpdf.xpdf");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

static CYTHON_SMALL_CODE void __Pyx_CleanupGlobals(void) {
  Py_CLEAR(__pyx_codeobj__3);
  Py_CLEAR(__pyx_codeobj__4);
  Py_CLEAR(__pyx_codeobj__5);
  Py_CLEAR(__pyx_tuple__6);
  Py_CLEAR(__pyx_tuple__7);
  Py_CLEAR(__pyx_codeobj__8);
  Py_CLEAR(__pyx_tuple__9);
  Py_CLEAR(__pyx_codeobj__10);
  Py_CLEAR(__pyx_codeobj__11);
  Py_CLEAR(__pyx_tuple__12);
  Py_CLEAR(__pyx_codeobj__13);
  Py_CLEAR(__pyx_tuple__14);
  Py_CLEAR(__pyx_codeobj__15);
  Py_CLEAR(__pyx_tuple__16);
  Py_CLEAR(__pyx_codeobj__18);
  Py_CLEAR(__pyx_tuple__19);
  Py_CLEAR(__pyx_codeobj__20);
  Py_CLEAR(__pyx_tuple__21);
  Py_CLEAR(__pyx_tuple__22);
  Py_CLEAR(__pyx_tuple__23);
  Py_CLEAR(__pyx_tuple__24);
  Py_CLEAR(__pyx_codeobj__25);
  Py_CLEAR(__pyx_codeobj__26);
  Py_CLEAR(__pyx_codeobj__27);
  Py_CLEAR(__pyx_codeobj__28);
  Py_CLEAR(__pyx_codeobj__29);
  Py_CLEAR(__pyx_tuple__30);
  Py_CLEAR(__pyx_codeobj__31);
  Py_CLEAR(__pyx_tuple__32);
  Py_CLEAR(__pyx_tuple__39);
  Py_CLEAR(__pyx_codeobj__40);
  Py_CLEAR(__pyx_codeobj__41);
  Py_CLEAR(__pyx_codeobj__42);
  Py_CLEAR(__pyx_tuple__43);
  Py_CLEAR(__pyx_codeobj__44);
  Py_CLEAR(__pyx_tuple__45);
  Py_CLEAR(__pyx_codeobj__46);
  Py_CLEAR(__pyx_tuple__47);
  Py_CLEAR(__pyx_tuple__48);
  Py_CLEAR(__pyx_tuple__49);
  Py_CLEAR(__pyx_tuple__50);
  Py_CLEAR(__pyx_tuple__51);
  Py_CLEAR(__pyx_tuple__52);
  Py_CLEAR(__pyx_tuple__53);
  Py_CLEAR(__pyx_tuple__54);
  Py_CLEAR(__pyx_tuple__55);
  Py_CLEAR(__pyx_tuple__56);
  Py_CLEAR(__pyx_tuple__57);
  Py_CLEAR(__pyx_tuple__58);
  Py_CLEAR(__pyx_tuple__59);
  Py_CLEAR(__pyx_tuple__60);
  Py_CLEAR(__pyx_tuple__61);
  Py_CLEAR(__pyx_tuple__62);
  Py_CLEAR(__pyx_tuple__63);
  Py_CLEAR(__pyx_tuple__64);
  Py_CLEAR(__pyx_tuple__65);
  Py_CLEAR(__pyx_tuple__66);
  Py_CLEAR(__pyx_tuple__67);
  /* CodeObjectCache.cleanup */
  if (__pyx_code_cache.entries) {
      __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
      int i, count = __pyx_code_cache.count;
      __pyx_code_cache.count = 0;
      __pyx_code_cache.max_count = 0;
      __pyx_code_cache.entries = NULL;
      for (i=0; i<count; i++) {
          Py_DECREF(entries[i].code_object);
      }
      PyMem_Free(entries);
  }

}
static void __pyx_module_cleanup(CYTHON_UNUSED PyObject *self) {
  /*--- Global cleanup code ---*/
  __Pyx_CleanupGlobals();
  /*--- Type import cleanup code ---*/
  Py_CLEAR(__pyx_ptype_7cpython_4bool_bool);
  Py_CLEAR(__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(__pyx_ptype_7cpython_7complex_complex);
  /*--- Builtin cleanup code ---*/
  Py_CLEAR(__pyx_builtin_range);
  Py_CLEAR(__pyx_builtin_super);
  Py_CLEAR(__pyx_builtin_ValueError);
  Py_CLEAR(__pyx_builtin_MemoryError);
  Py_CLEAR(__pyx_builtin_TypeError);
  Py_CLEAR(__pyx_builtin_IndexError);
  /*--- Intern cleanup code ---*/
  Py_CLEAR(__pyx_empty_tuple);
  Py_CLEAR(__pyx_d);
  Py_CLEAR(__pyx_cython_runtime);
  Py_CLEAR(__pyx_b);
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* Profile */
#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   PyThreadState* tstate,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    PyObject *type, *value, *traceback;
    int retval;
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            tstate,                          /*PyThreadState *tstate*/
            *code,                           /*PyCodeObject *code*/
            __pyx_d,                  /*PyObject *globals*/
            0                                /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
        if (CYTHON_TRACE && (*frame)->f_trace == NULL) {
            Py_INCREF(Py_None);
            (*frame)->f_trace = Py_None;
        }
#if PY_VERSION_HEX < 0x030400B1
    } else {
        (*frame)->f_tstate = tstate;
#endif
    }
      __Pyx_PyFrame_SetLineNumber(*frame, firstlineno);
    retval = 1;
    tstate->tracing++;
    tstate->use_tracing = 0;
    __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
    #if CYTHON_TRACE
    if (tstate->c_tracefunc)
        retval = tstate->c_tracefunc(tstate->c_traceobj, *frame, PyTrace_CALL, NULL) == 0;
    if (retval && tstate->c_profilefunc)
    #endif
        retval = tstate->c_profilefunc(tstate->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
    tstate->use_tracing = (tstate->c_profilefunc ||
                           (CYTHON_TRACE && tstate->c_tracefunc));
    tstate->tracing--;
    if (retval) {
        __Pyx_ErrRestoreInState(tstate, type, value, traceback);
        return tstate->use_tracing && retval;
    } else {
        Py_XDECREF(type);
        Py_XDECREF(value);
        Py_XDECREF(traceback);
        return -1;
    }
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyCodeObject *py_code = 0;
#if PY_MAJOR_VERSION >= 3
    py_code = PyCode_NewEmpty(srcfile, funcname, firstlineno);
    if (likely(py_code)) {
        py_code->co_flags |= CO_OPTIMIZED | CO_NEWLOCALS;
    }
#else
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    py_funcname = PyString_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    py_srcfile = PyString_FromString(srcfile);
    if (unlikely(!py_srcfile)) goto bad;
    py_code = PyCode_New(
        0,
        0,
        0,
        CO_OPTIMIZED | CO_NEWLOCALS,
        __pyx_empty_bytes,     /*PyObject *code,*/
        __pyx_empty_tuple,     /*PyObject *consts,*/
        __pyx_empty_tuple,     /*PyObject *names,*/
        __pyx_empty_tuple,     /*PyObject *varnames,*/
        __pyx_empty_tuple,     /*PyObject *freevars,*/
        __pyx_empty_tuple,     /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,
        __pyx_empty_bytes      /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
#endif
    return py_code;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* decode_c_string */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* None */
static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* CIntToDigits */
static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned short    uint16_t;
        #else
           typedef unsigned __int16  uint16_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define GCC_DIAGNOSTIC
#endif
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(int)*3+2];
    char *dpos, *end = digits + sizeof(int)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    int remaining;
#ifdef GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (int) (remaining / (8*8));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_8)[digit_pos];
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (int) (remaining / (10*10));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_10)[digit_pos];
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (int) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    if (last_one_off) {
        assert(*dpos == '0');
        dpos++;
    }
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto __PYX_BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto __PYX_BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* RegisterModuleCleanup */
#if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
static PyObject* __pyx_module_cleanup_atexit(PyObject *module, CYTHON_UNUSED PyObject *unused) {
    __pyx_module_cleanup(module);
    Py_INCREF(Py_None); return Py_None;
}
static int __Pyx_RegisterCleanup(void) {
    static PyMethodDef cleanup_def = {
        "__cleanup", (PyCFunction)__pyx_module_cleanup_atexit, METH_NOARGS, 0};
    PyObject *cleanup_func = 0;
    PyObject *atexit = 0;
    PyObject *reg = 0;
    PyObject *args = 0;
    PyObject *res = 0;
    int ret = -1;
    cleanup_func = PyCFunction_New(&cleanup_def, 0);
    if (!cleanup_func)
        goto bad;
    atexit = PyImport_ImportModule("atexit");
    if (!atexit)
        goto bad;
    reg = PyObject_GetAttrString(atexit, "_exithandlers");
    if (reg && PyList_Check(reg)) {
        PyObject *a, *kw;
        a = PyTuple_New(0);
        kw = PyDict_New();
        if (!a || !kw) {
            Py_XDECREF(a);
            Py_XDECREF(kw);
            goto bad;
        }
        args = PyTuple_Pack(3, cleanup_func, a, kw);
        Py_DECREF(a);
        Py_DECREF(kw);
        if (!args)
            goto bad;
        ret = PyList_Insert(reg, 0, args);
    } else {
        if (!reg)
            PyErr_Clear();
        Py_XDECREF(reg);
        reg = PyObject_GetAttrString(atexit, "register");
        if (!reg)
            goto bad;
        args = PyTuple_Pack(1, cleanup_func);
        if (!args)
            goto bad;
        res = PyObject_CallObject(reg, args);
        if (!res)
            goto bad;
        ret = 0;
    }
bad:
    Py_XDECREF(cleanup_func);
    Py_XDECREF(atexit);
    Py_XDECREF(reg);
    Py_XDECREF(args);
    Py_XDECREF(res);
    return ret;
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_TextOutputMode(TextOutputMode value) {
    const TextOutputMode neg_one = (TextOutputMode) ((TextOutputMode) 0 - (TextOutputMode) 1), const_zero = (TextOutputMode) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(TextOutputMode) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(TextOutputMode) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(TextOutputMode) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(TextOutputMode) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(TextOutputMode) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(TextOutputMode),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Unicode(Unicode value) {
    const Unicode neg_one = (Unicode) ((Unicode) 0 - (Unicode) 1), const_zero = (Unicode) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(Unicode) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Unicode) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(Unicode) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(Unicode) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(Unicode) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(Unicode),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE TextOutputMode __Pyx_PyInt_As_TextOutputMode(PyObject *x) {
    const TextOutputMode neg_one = (TextOutputMode) ((TextOutputMode) 0 - (TextOutputMode) 1), const_zero = (TextOutputMode) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(TextOutputMode) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(TextOutputMode, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (TextOutputMode) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (TextOutputMode) 0;
                case  1: __PYX_VERIFY_RETURN_INT(TextOutputMode, digit, digits[0])
                case 2:
                    if (8 * sizeof(TextOutputMode) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(TextOutputMode, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(TextOutputMode) >= 2 * PyLong_SHIFT) {
                            return (TextOutputMode) (((((TextOutputMode)digits[1]) << PyLong_SHIFT) | (TextOutputMode)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(TextOutputMode) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(TextOutputMode, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(TextOutputMode) >= 3 * PyLong_SHIFT) {
                            return (TextOutputMode) (((((((TextOutputMode)digits[2]) << PyLong_SHIFT) | (TextOutputMode)digits[1]) << PyLong_SHIFT) | (TextOutputMode)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(TextOutputMode) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(TextOutputMode, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(TextOutputMode) >= 4 * PyLong_SHIFT) {
                            return (TextOutputMode) (((((((((TextOutputMode)digits[3]) << PyLong_SHIFT) | (TextOutputMode)digits[2]) << PyLong_SHIFT) | (TextOutputMode)digits[1]) << PyLong_SHIFT) | (TextOutputMode)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (TextOutputMode) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(TextOutputMode) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(TextOutputMode, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(TextOutputMode) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(TextOutputMode, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (TextOutputMode) 0;
                case -1: __PYX_VERIFY_RETURN_INT(TextOutputMode, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(TextOutputMode,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(TextOutputMode) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(TextOutputMode, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(TextOutputMode) - 1 > 2 * PyLong_SHIFT) {
                            return (TextOutputMode) (((TextOutputMode)-1)*(((((TextOutputMode)digits[1]) << PyLong_SHIFT) | (TextOutputMode)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(TextOutputMode) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(TextOutputMode, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(TextOutputMode) - 1 > 2 * PyLong_SHIFT) {
                            return (TextOutputMode) ((((((TextOutputMode)digits[1]) << PyLong_SHIFT) | (TextOutputMode)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(TextOutputMode) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(TextOutputMode, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(TextOutputMode) - 1 > 3 * PyLong_SHIFT) {
                            return (TextOutputMode) (((TextOutputMode)-1)*(((((((TextOutputMode)digits[2]) << PyLong_SHIFT) | (TextOutputMode)digits[1]) << PyLong_SHIFT) | (TextOutputMode)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(TextOutputMode) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(TextOutputMode, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(TextOutputMode) - 1 > 3 * PyLong_SHIFT) {
                            return (TextOutputMode) ((((((((TextOutputMode)digits[2]) << PyLong_SHIFT) | (TextOutputMode)digits[1]) << PyLong_SHIFT) | (TextOutputMode)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(TextOutputMode) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(TextOutputMode, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(TextOutputMode) - 1 > 4 * PyLong_SHIFT) {
                            return (TextOutputMode) (((TextOutputMode)-1)*(((((((((TextOutputMode)digits[3]) << PyLong_SHIFT) | (TextOutputMode)digits[2]) << PyLong_SHIFT) | (TextOutputMode)digits[1]) << PyLong_SHIFT) | (TextOutputMode)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(TextOutputMode) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(TextOutputMode, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(TextOutputMode) - 1 > 4 * PyLong_SHIFT) {
                            return (TextOutputMode) ((((((((((TextOutputMode)digits[3]) << PyLong_SHIFT) | (TextOutputMode)digits[2]) << PyLong_SHIFT) | (TextOutputMode)digits[1]) << PyLong_SHIFT) | (TextOutputMode)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(TextOutputMode) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(TextOutputMode, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(TextOutputMode) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(TextOutputMode, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            TextOutputMode val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (TextOutputMode) -1;
        }
    } else {
        TextOutputMode val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (TextOutputMode) -1;
        val = __Pyx_PyInt_As_TextOutputMode(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to TextOutputMode");
    return (TextOutputMode) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to TextOutputMode");
    return (TextOutputMode) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
